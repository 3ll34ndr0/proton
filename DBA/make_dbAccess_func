
sub dbaGetInstPinRects {
  my (@args) =  @_;
  $args = join(' ',@args);
  if (!defined($args)) {
        $args = "";
  }
my $help = 0;
  my $parseResult = Getopt::Long::GetOptionsFromString($args ,
                                                                      # read args here
                                                             "h"          => \$help,
                                                             "help"       => \$help,
                                                             "debug"      => \$debug,
                                                             "verbose"    => \$verbose,
                                                             "inst=s"    => \$instName,
                                                             "pin=s"    => \$pinName,
                                                             "units:s"    => \$pinName,
                                                       );
my @rects = ();
if ($help == 1 ) {
print "The command dbaGetInstPinRects is a database access command\n";
print "with the following options \n";
print " -inst < instance name >\n";
print " -pin < name >\n";
print " -units < DBU or microns >\n";
                 }
if ( exists $CADB{$instName} ) {
 # get the cellref
   my $cellref = $CADB{$instName}->dbCadbGetCellref;
   my $instLoc = $CADB{$instName}->dbCadbGetLoc;
   my $instOrient = $CADB{$instName}->dbCadbGetOrient;
 # check for the existance of pin name on the cell
   if ( exists $PLDB{$cellref} ) {
        my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
        my @cellSize =   $PLDB{$cellref}->dbMdbGetSize;

        my @pins = $PLDB{$cellref}->dbMdbGetPins;
        foreach $pin ( @pins ) {
 # get all the rects of the pin
        if ( $pin eq $pinName ) {
             my @r = $PLDB{$cellref}->dbMdbGetPinRect($pin);
           print "@PinRect\n" if ($debug);
 # transform the pin rects to instance rects
           foreach $rectLine ( @r ) {
           my ($z, $llx, $lly, $urx, $ury ) = (split(/\s+/,$rectLine))[0,2,3,4,5];
           my @PinRect = &xformCellPinToInstPin($instLoc[0],$instLoc[1],$cellOrigin[0], $cellOrigin[1],$instOrient,$cellSize[0],$cellSize[1],$llx,$lly,$urx,$ury);
           print "@PinRect\n" if ($debug);
           push (@rects,@PinRect);
                                     }
                                }
return(@rects);
                                   }
                                 }
 # return or print on the  screen


}# if the instance name exits in the flat database 
}#sub dbaGetInstPinRects



######################### SEARCH ########################
sub searchNets {

}#sub searchNets

sub searchInsts {

}#sub searchInsts

######################## FIND ############################

sub find {


}#sub find


########################## DBA ###########################

sub dbaGetNet {



}#sub dbaGetNet

sub dbaGetPGNet {


}#sub dbaGetPGNet

sub dbaGetInst {



}#sub dbaGetInst

sub dbaGetInstNets {


}#sub dbaGetInstNets

sub dbaGetNetInsts {

}#sub dbaGetNetInsts

sub dbaGetInstPinNet {
    my $inst = @_[0];
    my $pin = @_[1];
    my $net = $COMP_ALREADY{$inst}{$pin};
return($net);
}


1;
