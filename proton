#!/usr/bin/perl

######### set BEEHOME to cwd ##########
$BEEHOME = "/home/ubuntu/proton";

######### Now appending ./UTILS/tool.nopath ########

use Benchmark;
my $t0 = new Benchmark;

#****f* ModuleName/tool
# FUNCTION
#   tool invokes the proton QA System
#   it provides a user interactive shell which can be used as a command line interface (CLI)
#   The GUI can be open at anytime by issuing "win" or "gui" on the CLI
#****

sub printVersion {


}#sub printVersion

#####################################################
# interrupt handling                                #
#####################################################

#use Config ;
#print $Config{sig_name};

$SIG{INT} = \&ctrlc_handler; # calls the interrupt handler in case of Ctrl C 
#$SIG{CHLD} = 'IGNORE'; # ignores zombie child processes
$SIG{CHLD} = \&reap_update_child_hash; # ignores zombie child processes and clears hash of child process
#$SIG{'INT' } = 'interrupt';  
#$SIG{'QUIT'} = \&interrupt;
#$SIG{'HUP' } = \&interrupt;  
#$SIG{'TRAP'} = \&interrupt;
#$SIG{'ABRT'} = \&interrupt;  
#$SIG{'STOP'} = \&interrupt;
$SIG{'USR1'} = \&WATCHER;
$STOP_IMMEDIATELY = 0;

sub WATCHER {
$STOP_IMMEDIATELY = 1;
print "INFO-000 User stop signal received ... will stop the execution and return to prompt\n";
}# sub WATCHER

sub resume {
print "recover from a user interrupt ... continue normal execution\n";
print "the tool is now in interactive mode ..\n";
$STOP_IMMEDIATELY = 0;
}#sub resume

sub interrupt {
      my($signal)=@_;
      print "Caught Interrupt\: $signal \n";
      print "Now Exiting\n";
      exit(1);
}# sub interrupt

######################################################
#initilizing @INC
######################################################
#@INC = ();
#no lib ;
######################################################

######################################################
#populating @INC
######################################################

######################################################
#perl2exe_noopt ;
##perl2exe_include Verilog::Netlist;
##perl2exe_include Verilog::Getopt;
##perl2exe_include Verilog::Parser;
##perl2exe_include Verilog::SigParser;
#perl2exe_include utf8 ;
##perl2exe_include Tk ;
##perl2exe_bundle Tk ;
#perl2exe_include Tk::FBox ;
#perl2exe_include Tk::Scale ;
#perl2exe_include Tk::IconList ;
#perl2exe_include Tk::Optionmenu ;
#perl2exe_include Tk::Bitmap ;
#perl2exe_include Tk::After ;
##perl2exe_include Tk::Widget ;
##perl2exe_include DynaLoader;
##perl2exe_include DBD::mysql;
##perl2exe_include Tk::Scrollbar;

use Benchmark;
use DynaLoader;

use Tk;
#use Tk::HList;
use Tk::Tree;
use Tk::Scale;
use Tk::Widget;
use Tk::Entry;
use Tk::Frame;
use Tk::Scrollbar;
use Tk::Checkbutton;
use Tk::Radiobutton;
use Tk::Menubutton;
use Tk::Canvas;
use Tk::DummyEncode;
use Tk::BrowseEntry;
use Tk::Tree;
#use Tk::FBox;
use Tk::ROText;
use Tk::Photo;
use Tk::WinPhoto;
use Tk::PNG;
use Tk::JPEG;
use Tk::NoteBook;
#use Tk::Event;
use Tk::Pixmap;
use Tk::WorldCanvas;
use Tk::Optionmenu;

#use utf8;
use DBI;
#use DBD::SQLite;
use DBD::mysql;
#use DBD::mysqlPP;
#use Carp::Heavy;
#use GD::Graph::lines;
use Spreadsheet::Read;
use Spreadsheet::WriteExcel;
#use Spreadsheet::ReadSXC;
#use Text::CSV;
use Text::CSV_XS;
use Tk::Balloon;
use Tk::DynaTabFrame;
use CGI;
use Tk::widgets qw/PNG/;
#use Schedule::Load::Reporter;
#use Schedule::Load::Chooser;
#use Schedule::Load::Hosts;
#use Schedule::Load::Schedule;
use File::Data;
use Tk::Adjuster;
# added by Rajeev on 01/08/09 to address the issue that code did not open gui on viraj.lnx6.com
#use Tk::PRINT;
# added by Rajeev on 01/20/09 because Nitij's RTL gen code was not working

# Needed by titan --fixed by Rajeev on 03/15/10
use Getopt::Long;
use XML::Simple;
use PDF::Create;


# needed for RTL parser fixed on 10/8/2010
# had to comment out bootLoader from Parser.pm and Preproc.pm files
use Verilog::Netlist;
use Verilog::Netlist::File;
use Verilog::Getopt;
use Verilog::SigParser;
use Verilog::Parser;
use Bit::Vector;
use Verilog::EditFiles;
use Verilog::Getopt;
use Verilog::Language;
use Verilog::Netlist;
use Verilog::Netlist::Cell;
use Verilog::Netlist::ContAssign;
#use Verilog::Netlist::Defparam;
use Verilog::Netlist::File;
use Verilog::Netlist::Interface;
use Verilog::Netlist::Logger;
#use Verilog::Netlist::ModPort;
use Verilog::Netlist::Module;
use Verilog::Netlist::Net;
use Verilog::Netlist::Pin;
use Verilog::Netlist::Port;
use Verilog::Netlist::Subclass;
use Verilog::Parser;
use Verilog::Preproc;
use Verilog::SigParser;
use Verilog::Std;
use Verilog::VCD;
#----------------

# needed for saving and restoring database
use Storable;

use GDS2;

# needed for supporting XML-RPC
use Frontier::Daemon;

# needed for creating binary
use URI;

# needed by the image generation routine
use GD;
use Graphics::ColorNames 2.10;
use Graphics::ColorNames::X;
use Module::Load ;
use Module::Loaded ;
# use liberty;

use Spreadsheet::ParseExcel;
use Data::Dumper;
use XML::Writer;
use IO::File;
use PerlIO ;

# for rpc need switch
use Switch ;
use XML::SAX::PurePerl ; 

################################################################################################
#     for log file                                                         
################################################################################################
use Local::TeeOutput;
use POSIX;
use List::Util qw[min max];

#require "utf8_heavy.pl";

################################################################################################
#     compile the required files                                                         
################################################################################################

use Proc::Simple;
use Proc::ProcessTable;
use Verilog::VCD;

################################################################################################
################################################################################################
use Tk::Splashscreen;



%PSEUDO_FLOORPLAN_ALREADY = ();
require "$BEEHOME/commandsFile";
require "$BEEHOME/executables";

##### utils ##############
require "$BEEHOME/UTILS/make_err_msg";
require "$BEEHOME/UTILS/perl_dump";
#require "$BEEHOME/UTILS/make_rw_shareable_data";
require "$BEEHOME/UTILS/make_Robi_func";
require "$BEEHOME/UTILS/make_Robi_write_graph";
require "$BEEHOME/UTILS/make_place_graph_new";
require "$BEEHOME/UTILS/make_unixLike_commands";
require "$BEEHOME/UTILS/make_help";
require "$BEEHOME/UTILS/make_verilog_utils";
require "$BEEHOME/UTILS/make_liberty_utils";
require "$BEEHOME/UTILS/make_inst_box";
require "$BEEHOME/UTILS/make_del_tmp_placer_files";
require "$BEEHOME/UTILS/gen_vertex_file";
require "$BEEHOME/UTILS/gen_fanout_file";
require "$BEEHOME/UTILS/gen_net_func";
require "$BEEHOME/UTILS/make_eval_expressions";
require "$BEEHOME/UTILS/make_bus_bits";
require "$BEEHOME/UTILS/make_hierarchical_placement";
require "$BEEHOME/UTILS/make_plan_1_hierarchical_placement";
require "$BEEHOME/UTILS/make_test_pseudo_command";
require "$BEEHOME/UTILS/make_test_pseudo_command_new";
require "$BEEHOME/UTILS/make_test_pseudo_command_for_casey";
require "$BEEHOME/UTILS/make_test_final";
require "$BEEHOME/UTILS/make_spider_script";
require "$BEEHOME/UTILS/make_Robi_read_graph";
require "$BEEHOME/UTILS/make_reset_proton";
require "$BEEHOME/UTILS/make_def_2_gds";
require "$BEEHOME/UTILS/make_run_app_only";
require "$BEEHOME/UTILS/make_spice_place";

###### PARSERS #####
require "$BEEHOME/PARSER/make_rw_verilog";
require "$BEEHOME/PARSER/make_flatten_hier";
require "$BEEHOME/PARSER/make_elaborate";
require "$BEEHOME/PARSER/make_querry";
require "$BEEHOME/PARSER/make_floorplan";
require "$BEEHOME/PARSER/make_get_nets";
require "$BEEHOME/PARSER/make_rw_def";
require "$BEEHOME/PARSER/make_rw_lef";
require "$BEEHOME/PARSER/make_rw_lib";
require "$BEEHOME/PARSER/make_rw_plef";
require "$BEEHOME/PARSER/make_rw_udn";
require "$BEEHOME/PARSER/make_build_clock";
require "$BEEHOME/PARSER/make_rwt_clock_tree";
require "$BEEHOME/PARSER/make_rw_ipc";
require "$BEEHOME/PARSER/make_rw_dummy_netlist";
require "$BEEHOME/PARSER/make_rw_fe";
require "$BEEHOME/PARSER/make_def_analysis";
require "$BEEHOME/PARSER/make_lef_analysis";
require "$BEEHOME/PARSER/make_rw_specfiles";
require "$BEEHOME/PARSER/make_w_rtl";
require "$BEEHOME/PARSER/make_r_rtl";
require "$BEEHOME/PARSER/make_rw_gds";
require "$BEEHOME/PARSER/make_rw_timing_report";
require "$BEEHOME/PARSER/make_rw_xls";
require "$BEEHOME/PARSER/make_rw_xml";
require "$BEEHOME/PARSER/make_rw_edif";
#####  RTL ######
require "$BEEHOME/RTL/p2v";
require "$BEEHOME/RTL/Fifo";
#require "$BEEHOME/RTL/Combo";
require "$BEEHOME/RTL/RtlUtils";
require "$BEEHOME/RTL/make_estimate_rtl_area";


#####  GUI ######

require "$BEEHOME/GUI/make_1_import_gui";
require "$BEEHOME/GUI/make_analysis_gui";
require "$BEEHOME/GUI/make_basic_gui";
require "$BEEHOME/GUI/make_compare_def_gui";
require "$BEEHOME/GUI/make_cookie-cut_gui";
require "$BEEHOME/GUI/make_def_browser";
require "$BEEHOME/GUI/make_def_gui";
require "$BEEHOME/GUI/make_def2png_layers";
require "$BEEHOME/GUI/make_design_browser";
require "$BEEHOME/GUI/make_design_elements";
require "$BEEHOME/GUI/make_flat_router_display";
require "$BEEHOME/GUI/make_flatView_image";
require "$BEEHOME/GUI/make_flatView_svg";
require "$BEEHOME/GUI/make_gcell_gui";
require "$BEEHOME/GUI/make_gds_gui";
require "$BEEHOME/GUI/make_gds_image";
require "$BEEHOME/GUI/make_gui_kb_tab";
require "$BEEHOME/GUI/make_gui_prototype";
require "$BEEHOME/GUI/make_gui_support_func";
require "$BEEHOME/GUI/make_help_gui";
require "$BEEHOME/GUI/make_histogram_gui";
#require "$BEEHOME/GUI/make_lef_gui";
require "$BEEHOME/GUI/make_lef_gui_II";
require "$BEEHOME/GUI/make_lefView_image";
require "$BEEHOME/GUI/make_lib_gui";
require "$BEEHOME/GUI/make_place_grid_gui";
require "$BEEHOME/GUI/make_place_gui";
require "$BEEHOME/GUI/make_place_gui_supportFunc";
require "$BEEHOME/GUI/make_ruler";
require "$BEEHOME/GUI/make_rw_gui";
require "$BEEHOME/GUI/make_specify_gui";
require "$BEEHOME/GUI/make_timing_gui";
require "$BEEHOME/GUI/make_timingReport_browser";
require "$BEEHOME/GUI/make_tool_display_vars";
require "$BEEHOME/GUI/make_tstgen_connection";
require "$BEEHOME/GUI/make_tstgen_func";
require "$BEEHOME/GUI/make_worldCan_def_gui";
require "$BEEHOME/GUI/make_spice_gui";

require "$BEEHOME/GUI/PROTO/make_display_pseudo_hierarchy";
require "$BEEHOME/GUI/PROTO/make_floorplan_widget";
require "$BEEHOME/GUI/PROTO/make_help_text";
require "$BEEHOME/GUI/PROTO/make_hierView_image";
#require "$BEEHOME/GUI/PROTO/make_hier_router_display";
require "$BEEHOME/GUI/PROTO/make_hier_smatrix_display";
require "$BEEHOME/GUI/PROTO/make_pin_placement_gui";
require "$BEEHOME/GUI/PROTO/make_rtledit_gui";
require "$BEEHOME/GUI/PROTO/make_write_edp";
require "$BEEHOME/GUI/PROTO/make_write_layout_of_spice";

#####  GUI_SERVER ######

require "$BEEHOME/GUI_SERVER/make_flex_specify";
require "$BEEHOME/GUI_SERVER/make_server_design_gui";
require "$BEEHOME/GUI_SERVER/make_server_hier_gui";
require "$BEEHOME/GUI_SERVER/make_server_lef_gui";
require "$BEEHOME/GUI_SERVER/make_server_rpc";

##### Spice #####
require "$BEEHOME/TE/make_rw_spice";
require "$BEEHOME/TE/make_run_spice";
require "$BEEHOME/TE/make_application_modes";
require "$BEEHOME/TE/make_r_extSTA";
require "$BEEHOME/TE/make_x_characterize";

#####  Timing Analysis ####
require "$BEEHOME/TE/make_rw_sta";
require "$BEEHOME/TE/make_rw_sdc";
#require "$BEEHOME/TE/make_rw_dta";
require "$BEEHOME/TE/make_rw_hta";
require "$BEEHOME/TE/make_timingDB_access_commands";

##### Placement ######
require "$BEEHOME/ALGO/PLACE/make_seed_place";
require "$BEEHOME/ALGO/PLACE/placeSA";
#require "$BEEHOME/ALGO/PLACE/make_place_design";
#require "$BEEHOME/ALGO/PLACE/make_globalplace";
#require "$BEEHOME/ALGO/PLACE/make_place_refine";
#require "$BEEHOME/ALGO/PLACE/make_seed_place";
require "$BEEHOME/ALGO/PLACE/make_place";
require "$BEEHOME/ALGO/PLACE/make_place_ports";
require "$BEEHOME/ALGO/PLACE_NEW/make_InstByRow_db";
require "$BEEHOME/ALGO/PLACE_NEW/make_remove_overlap";
require "$BEEHOME/ALGO/PLACE_NEW/make_remove_overlap_block";
require "$BEEHOME/ALGO/PLACE_NEW/make_remove_congestion";
require "$BEEHOME/ALGO/PLACE_NEW/make_pins_density";
require "$BEEHOME/ALGO/PLACE_NEW/make_macro_arranger";
require "$BEEHOME/ALGO/PREPLACE/make_place_db";
require "$BEEHOME/ALGO/PREPLACE/tempSeedPlace";
require "$BEEHOME/ALGO/PREPLACE/make_place_bfs_algo";
require "$BEEHOME/ALGO/PREPLACE/make_place_supportFunc";
require "$BEEHOME/ALGO/PREPLACE/make_place_grid";
require "$BEEHOME/ALGO/PREPLACE/make_place_flopring";
require "$BEEHOME/ALGO/PREPLACE/make_place_floparray";
require "$BEEHOME/ALGO/PREPLACE/make_place_order_Smatrix";
require "$BEEHOME/ALGO/PREPLACE/make_PinBySide_db";
require "$BEEHOME/ALGO/PREPLACE/make_remove_pins_overlap";
require "$BEEHOME/ALGO/PLACE_NEW/make_placement_mode";
require "$BEEHOME/ALGO/FLPLAN/make_floorplan_setup";
require "$BEEHOME/ALGO/FLPLAN/make_floorplan_engine";
require "$BEEHOME/ALGO/BLOCKPLACE/make_blockPlacer";
require "$BEEHOME/ALGO/BLOCKPLACE/make_blockPlacer_Shift";


require "$BEEHOME/ALGO/POSTPLACE/make_postPlace_func";
require "$BEEHOME/ALGO/PLACE_NEW/make_leastpath_resistance";
require "$BEEHOME/ALGO/PLACE_NEW/make_place_out_fine_tuned";
require "$BEEHOME/ALGO/SEEDPLACE/make_ankur_identify_seed";
##### database programs #####
require "$BEEHOME/DB/make_CompDB_package";
require "$BEEHOME/DB/make_CompPinDB_package";
require "$BEEHOME/DB/make_NetDB_package";
require "$BEEHOME/DB/make_NetAttribDB_package";
require "$BEEHOME/DB/make_NetRoutingDB_package";
require "$BEEHOME/DB/make_PortDB_package";
require "$BEEHOME/DB/make_TechDB_package";
require "$BEEHOME/DB/make_MacroDB_package";
require "$BEEHOME/DB/make_MacroPinDB_package";
#require "$BEEHOME/DB/make_place_package";
require "$BEEHOME/DB/make_TimingDB_package";
require "$BEEHOME/DB/make_TimingDelayDB_package";
require "$BEEHOME/DB/make_FloorplanDB_package";
require "$BEEHOME/DB/make_PinGuideDB_package";
require "$BEEHOME/DB/make_SpiceDB_package";
require "$BEEHOME/DB/make_GlobalVariableDB_package";
require "$BEEHOME/DB/make_TimingPinInTimeDB_package";
require "$BEEHOME/DB/make_TimingPinBiasDB_package";
require "$BEEHOME/DB/make_TimingLibPinDB_package";
require "$BEEHOME/DB/make_TimingLibDB_package";
require "$BEEHOME/DB/make_TimingLibRelatedPinDB_package";
require "$BEEHOME/DB/make_TimingLibRelatedPinCondDB_package";
require "$BEEHOME/DB/make_PlaceDB_package";
require "$BEEHOME/DB/make_PlaceLocDB_package";
require "$BEEHOME/DB/make_PlaceFlagDB_package";
require "$BEEHOME/DB/make_PlaceOptLenDB_package";
require "$BEEHOME/DB/make_PlaceGrid_package";
require "$BEEHOME/DB/make_QAHierPseudoModuleModelDB_package";
require "$BEEHOME/DB/make_QAHierPseudoNetModelDB_package";
require "$BEEHOME/DB/make_QAHierPseudoBlockageModelDB_package";
require "$BEEHOME/DB/make_QAHierPseudoInstanceModelDB_package";
require "$BEEHOME/DB/make_QAHierPseudoDsgnLibDB_package";
require "$BEEHOME/DB/make_QAHierPseudoDsgnLibPinDB_package";
require "$BEEHOME/DB/make_ExtCommandFileOptionDB_package";
require "$BEEHOME/DB/make_ExtCommandMustOptionDB_package";
require "$BEEHOME/DB/make_ExtCommandSwitchDB_package";
require "$BEEHOME/DB/make_ExtCommandOptionDB_package";
require "$BEEHOME/DB/make_ExtCommandDB_package";
require "$BEEHOME/DB/make_ExtFlowDB_package";
require "$BEEHOME/DB/make_PlaceRowDB_package";
require "$BEEHOME/DB/make_PlacePinDB_package";
require "$BEEHOME/DB/make_PlaceBinDB_package";
require "$BEEHOME/DB/make_VNOM_package";
require "$BEEHOME/DB/make_VNOM_Hinst_package";
require "$BEEHOME/DB/make_VNOM_Linst_package";
require "$BEEHOME/DB/make_VNOM_Ins_package";
require "$BEEHOME/DB/make_VNOM_Outs_package";
require "$BEEHOME/DB/make_VNOM_Bidi_package";
require "$BEEHOME/DB/make_VNOM_Nets_package";
require "$BEEHOME/DB/make_TimingClockDB_package";
require "$BEEHOME/DB/make_RouteCellDB_package";
require "$BEEHOME/DB/make_eFarm_package";
require "$BEEHOME/DB/make_ViaDB_package";
require "$BEEHOME/DB/make_ViaRuleDB_package";
require "$BEEHOME/DB/make_ViaRuleLayerDB_package";
require "$BEEHOME/DB/make_ViaLayerDB_package";
require "$BEEHOME/DB/make_GCell_package";
require "$BEEHOME/DB/make_BlockageDB_package";
require "$BEEHOME/DB/make_Timing_Report_package";
require "$BEEHOME/DB/make_VNOM_Reg_package";
require "$BEEHOME/DB/make_RTLDB_package";
require "$BEEHOME/DB/make_RTLDB_BLOCK_package";
require "$BEEHOME/DB/make_RTLDB_EXPRESSION_package";
require "$BEEHOME/DB/make_RTLDB_REG_ASSIGN_package";
require "$BEEHOME/DB/make_SpiceElement_package";
require "$BEEHOME/DB/make_SpiceParam_package";
require "$BEEHOME/DB/make_FillInformationDB_package";
##### database modif programs #####
require "$BEEHOME/DBA/make_dbMod_func";
require "$BEEHOME/DBA/make_TechDB_access_func";
require "$BEEHOME/DBA/SQL/make_eFarm_package";
require "$BEEHOME/DBA/SQL/make_testcase_package";
require "$BEEHOME/DBA/SQL/cronjob.pl";
require "$BEEHOME/DBA/make_dbXforms";
require "$BEEHOME/DBA/make_dbAccess_func";


##### database querry commands #####
require "$BEEHOME/make_global_commands";
require "$BEEHOME/DB/make_MacroDB_access_package";

##### testgen programs ######
require "$BEEHOME/TSTGEN/make_wx_netlist";
require "$BEEHOME/TSTGEN/make_netlist_support_func";
require "$BEEHOME/DB/make_GenDesignDB_package";
require "$BEEHOME/TSTGEN/make_r_netlist";
require "$BEEHOME/TSTGEN/make_r_analysis";
require "$BEEHOME/TSTGEN/make_Hmodel_support_func";
require "$BEEHOME/TSTGEN/make_physical_support_func";
require "$BEEHOME/TSTGEN/make_PseudoHierModel";
require "$BEEHOME/TSTGEN/make_w_PseudoHierModel";
require "$BEEHOME/TSTGEN/make_PseudoPhysicalModel";
require "$BEEHOME/TSTGEN/GEOMETRYENG/make_cookie_def";
require "$BEEHOME/TSTGEN/GEOMETRYENG/make_cookie_verilog";
require "$BEEHOME/TSTGEN/GEOMETRYENG/make_subdesign";
require "$BEEHOME/TSTGEN/make_populate_designLib";
require "$BEEHOME/TSTGEN/make_router_graph_file";
require "$BEEHOME/TSTGEN/make_hier_place_graph";
require "$BEEHOME/TSTGEN/make_pseudo_floorplan";
require "$BEEHOME/TSTGEN/make_hier_pin_placement";
require "$BEEHOME/TSTGEN/make_HierPinBySide_db";
require "$BEEHOME/TSTGEN/make_remove_hier_pins_overlap";

####### Power programs ######
require "$BEEHOME/POWER/make_pg_connections";
require "$BEEHOME/POWER/make_sroute";

####### Flow programs #####
require "$BEEHOME/FLOW/make_flow_matrix";
require "$BEEHOME/FLOW/make_FlowGen";

####### TCL commands ######
require "$BEEHOME/TCL/make_tcl_commands";

####### External Commands #######
require "$BEEHOME/EXTCOMMANDS/make_rw_external_commands";
require "$BEEHOME/EXTCOMMANDS/make_git_interface";

####### KnowledgeBase #######
require "$BEEHOME/KNOWLEDGEBASE/make_kb_plots";
require "$BEEHOME/KNOWLEDGEBASE/make_gui_kb_tab";
require "$BEEHOME/KNOWLEDGEBASE/make_register_testcase";
require "$BEEHOME/KNOWLEDGEBASE/make_test_summary";
require "$BEEHOME/KNOWLEDGEBASE/make_manage_testcase";
require "$BEEHOME/KNOWLEDGEBASE/make_write_excel";

######## Library analysis #########
require "$BEEHOME/LIBANALYSIS/make_pinAccess";
require "$BEEHOME/LIBANALYSIS/make_pinAccessII";
require "$BEEHOME/LIBANALYSIS/make_cell_footprint";
#require "$BEEHOME/LIBANALYSIS/make_overlapAcess";
require "$BEEHOME/LIBANALYSIS/make_report_pin_access";
require "$BEEHOME/LIBANALYSIS/make_report_inst_and_net";
require "$BEEHOME/LIBANALYSIS/make_inst_map_file";
require "$BEEHOME/LIBANALYSIS/make_find_pinDensity";
require "$BEEHOME/LIBANALYSIS/make_lef_analysis";
require "$BEEHOME/LIBANALYSIS/make_identifyBumps";

######## Design analysis #########
require "$BEEHOME/DESANALYSIS/make_design_analysis_gui";
require "$BEEHOME/DESANALYSIS/make_design_analysis";
require "$BEEHOME/DESANALYSIS/make_route_analysis";
require "$BEEHOME/DESANALYSIS/make_droute_analysis";
require "$BEEHOME/DESANALYSIS/make_report_routing";
require "$BEEHOME/DESANALYSIS/make_route_length_analysis";
require "$BEEHOME/DESANALYSIS/make_specialnetdir_analysis";
require "$BEEHOME/DESANALYSIS/make_gcell";
require "$BEEHOME/DESANALYSIS/make_FlipChip";
require "$BEEHOME/DESANALYSIS/make_report_net_command";
require "$BEEHOME/DESANALYSIS/make_report_design";
####### Router ######
require "$BEEHOME/ROUTER/make_router";
require "$BEEHOME/ROUTER/make_box_router";
require "$BEEHOME/ROUTER/make_z_router";
require "$BEEHOME/ROUTER/make_p2p_custom_router";

####### LIbrary QA #######
require "$BEEHOME/LIBQA/make_libqa_design";


####### eFarm ###########
require "$BEEHOME/EFARM/make_manage_machines";
require "$BEEHOME/EFARM/make_initMacDB";
require "$BEEHOME/EFARM/make_services";
require "$BEEHOME/EFARM/make_gui_efarm_tab";

require "$BEEHOME/SCRATCH/make_LVS";


######## PLACER #########
require "$BEEHOME/PLACER/DATAPREP/make_read_graph_files";
require "$BEEHOME/PLACER/DATAPREP/make_write_graph_files";
require "$BEEHOME/PLACER/DATAPREP/make_run_placement_file";
require "$BEEHOME/PLACER/DATAPREP/smatrix_placement/make_run_smatrix_placement";
require "$BEEHOME/PLACER/DATAPREP/smatrix_placement/make_write_smatrix_graph";
require "$BEEHOME/PLACER/DATAPREP/smatrix_placement/make_read_smatrix_graph";
require "$BEEHOME/PLACER/FUNTIONS/make_placer_commands";

######## FLEX #########
require "$BEEHOME/FLEX_COMMANDS/make_design_hierarchy";
require "$BEEHOME/FLEX_COMMANDS/make_rtl_estimation";
require "$BEEHOME/FLEX_COMMANDS/make_timing_browser";

###### SPARK ############
require "$BEEHOME/SPARK/make_rw_sdef";

require "$BEEHOME/TESTS/demo1.pl";

################################################################################################
# Check the existence of the environment variable
################################################################################################

################################################################################################
#  setting some default variables                                                              
################################################################################################
$GLOBAL = Global::new();
%SUBCKT_ALREADY_WRITTEN = ();
#$GLOBAL->dbfGlobalSetVersion("");
######buildadmin uncomment this# $build_version = "214";
$GLOBAL->dbfGlobalSetVersion($build_version);
$TOOL_VERSION = $GLOBAL->dbfGlobalGetVersion;
$LIC_FEATURE = "";
$LOG_FILE = "";
$CMD_FILE = "";
$LICKEY = "";
$KB_DATABASE = "";
$MAC_DATABASE = "";
my @kbOrder = ("ID", "TestName", "Status", "Path to testcase","TNS", "WNS", "# Timing Paths", "# Components", "# Nets", "# Inputs", "# Outputs", "# Clocks", "Pin/Net Ratio", "Utilization", "# Layers", "Technology", "Operating Voltage", "PVT Corner", "VT", "0utime","0wtime");
$GLOBAL->dbGlobalSetKbfo(@kbOrder);
$DEBUG = 0;
$WINSTART = 0;
$EXIT_TOOL = 0;
$PROMPT = "tool_shell";
$echo_commands ="true";
$got_ctrlc=-1;
$KB_DATABASE = "UND";
$MAC_DATABASE = "UND";
############  setting the environment variables  #######
##  Later I will put up a hash so that all there variables can be set and displayed and querried
$dieIsCentre = 0;
$DEF_DATABASE_UNIT=2000;
$GLOBAL->dbfGlobalSetDBU("2000");
$MICRONFACTOR = 1;
srand(0);
&createTKcolors;

################################################################################################
#   tools help commands
################################################################################################
sub printMainHelp {
print "Usage : eqator.lnx.bin                       : inteactive mode\n";
print "Options available are : [--help | -h]             : print out this help\n";
print "                        [--win]              : interactive mode with GUI\n";
print "                        [--win]              : interactive mode with GUI\n";
print "                        [--version]          : print the version of proton\n";
print "                        [-init <fileName>]   : batch mode, tcl run file executed after tool invocation\n";
print "                        [-f <fileName>]      : batch mode, tcl run file executed after tool invocation\n";
print "                        [-log <fileName>]    : log fileName to be used to capture all messages from the tool\n";
print "                        [-cmdlog <fileName>] : fileName to store the executed commands\n";
print "                        [-lic <featureName>] : featureName\n";
print "                        [--nolog]            : log file will not be generated\n";
print "                        [--overwritelog]     : new log file will not be generated last log file will be overwritten\n";
print "                        [--cleanlog]         : existing log files will be removed\n";
print "                        [--EOC]              : exit from tool\n";
exit;
}#sub printMainHelp

sub printVersionInfo {
my $TOOL_VERSION = $GLOBAL->dbfGlobalGetVersion;
print "$TOOL_VERSION\n";
#exit;
}#sub printVersionInfo
################################################################################################
#   setting the command databases                                                       
################################################################################################

&initiallize_commands;
&dbGuiInitDisplayVariables;
&dbinitEverthing;

$p2cmd = \%cmds;
$p2cmdArgs = \%checkArguments;
$dbInitFile = 0;                                              
$daemonize = 0;

################## Added by aditya to make seperate app ################
&check_create_app_tcl;
#########################################################################

my $LICENSE_CODE = "2U2C8VM75XY85BM08AG14H8W0K457JTM256YMGJQS0PDAY6NTQHR";
$numArgs = $#ARGV;                                            
 for ( my $xx = -1; $xx < $numArgs ; $xx++ ) {                 
      if ( $ARGV[$xx] eq "-init" || $ARGV[$xx] eq "-f") { $INIT_FILE = $ARGV[$xx+1 ]; $dbInitFile = 1; }         
      elsif ( $ARGV[$xx] eq "--version" ) { &printVersionInfo;}         
      elsif ( $ARGV[$xx] eq "--help" || $ARGV[$xx] eq "-h" ) { &printMainHelp;}         
      elsif ( $ARGV[$xx] eq "-lic" ) { $LIC_FEATURE = $ARGV[$xx+1 ];}         
      elsif ( $ARGV[$xx] eq "-log" ) { $LOG_FILE = $ARGV[$xx+1 ];}         
      elsif ( $ARGV[$xx] eq "-cmdlog" ) { $CMD_FILE = $ARGV[$xx+1 ];}         
      elsif ( $ARGV[$xx] eq "--win" ) { $WINSTART = 1;}         
      elsif ( $ARGV[$xx] eq "--EOC" ) { $EXIT_TOOL = 1;}         
      elsif ( $ARGV[$xx] eq "-key" ) { $LICKEY = $ARGV[$xx+1 ] ;}         
      elsif ( $ARGV[$xx] eq "-port" ) { $DAEMON_PORT = $ARGV[$xx+1] ; $daemonize = 1 ; }         
                                            }                
                                                              
#if ( $WINSTART == 1 ) { &start_gui; };
#####buildadmin uncomment this# if ($LICKEY eq $LICENSE_CODE ) {print "INFO : License checkout succeeded\n"; } else {print "ERROR : License not checked out ...\n"; exit;}

########### if the command file is provided using the -init option ####################### 
print "MSG : 000 : starting a fresh session\n";
my $t1 = new Benchmark;
my $td = timediff($t1,$t0);
print "proton :",timestr($td),"\n";
if ( $dbInitFile == 1 ) {                                     
     &source($INIT_FILE);                                     
                        }                                     
if ( $daemonize == 1 ) {
     print "Starting proton as a daemon on port $DAEMON_PORT\n";
     &allow_remote_login('-host', $hostname , '-port', $DAEMON_PORT);
                       }
elsif ( $WINSTART == 1 ) {
      &win;
                      }
elsif ( $EXIT_TOOL == 1 ) {
     exit;
                      }
                                                              

print "$PROMPT \> ";

$SIG{INT} = \&ctrlc_handler; # calls the interrupt handler in case of Ctrl C 
#$SIG{CHLD} = 'IGNORE'; # ignores zombie child processes
$SIG{CHLD} = \&reap_update_child_hash; # ignores zombie child processes and clears hash of child process

while(<STDIN>){
if($echo_commands eq "true"){#-----------------changed by Mansi--------------------------#
                             #print "#<CMD> $_";
                             #-----------------------------------------------------------#
                                          #open (LOG, ">>$cmdfileName");
                                          #print LOG "$_\n";
                              }

############ reseting ctrlc variable after first ctrlc ##########
$got_ctrlc=-1;        

if($_ eq "\n"){
print "$PROMPT \> ";
} else { chomp;
$_ =~ s/^\s+//;
($cmd, @arguments) = split(/\s+/, $_);
#------------------------------------Added by Mansi---------------------------#
$GLOBAL->dbfGlobalSetCurrCommand($cmd);
if($cmd eq "help"){
$GLOBAL->dbfGlobalSetCurrCommand($arguments[0]);
}#if cmd eq help
#-----------------------------------------------------------------------------#
#--------------------- conditioning the arguments : Rajeev -------------------#
my $tempArgStr = join" ",@arguments;
#print "hi $tempArgStr\n" ;
$tempArgStr =~ s/\{\s*/\{/g;
$tempArgStr =~ s/\s*\}/\}/g;
my $modArgs = "";
if ( $tempArgStr =~ /\{/ ) {
while ( $tempArgStr =~ m/(.*?)\{\s*(.*?)\s*\}(.*?)/g) {
                                              my $preBrace  = $1;
                                              my $withinBrace = $2;
                                              #my $postBrace = $3;
                                              $withinBrace =~ s/\s*\,\s*/\,/g ;
                                              $withinBrace =~ s/\s+/ /g ;
                                              $withinBrace =~ s/\s/\,/g ;
                                              $modArgs = $modArgs." ".$preBrace." \{".$withinBrace."\}";
                                              #print "$preBrace $withinBrace $postBrace\n"; 
                                              #print "$modArgs\n";
                                            }# while
while ( $tempArgStr =~ m/\{\s*(.*)\s*\}(.*)/g) {
                                              my $withinBrace = $1;
                                              my $postBrace = $2;
                                              $modArgs = $modArgs." ".$postBrace;
                                              #print " last $modArgs\n";
                                             }# while
#print "$modArgs\n" ;
                          } else { $modArgs = $tempArgStr; }
@arguments = split(/\s+/,$modArgs);
#--------------------- conditioning the arguments : Rajeev -------------------#
$noOfargs = @arguments;
if(exists $p2cmdArgs->{$cmd}){
	if( $p2cmdArgs->{$cmd} <= $noOfargs) { 
                #print "#<CMD> $_";
#--------------------------------changed by Mansi-----------------------------#
                print "#<CMD> $_\n";
#-----------------------------------------------------------------------------#
                                          open (LOG, ">>$cmdfileName");
                                          print LOG "$_\n";
		&{$p2cmd->{$cmd}}(@arguments); 
	} else { 
		&{$p2cmd->{$cmd}}("HELP"); 
	}
	print "$PROMPT \> ";
} else {
#if command starts with "sys " interpret as system command
#else put it insides a eval block. $perlcmd = "{."$_."}"; eval $perlcmd
	if ($_ =~ /^\s*sys (.*)/) {
		system($1);
	} else {
		$perlcmd = "{"."$_"."}";
		eval($perlcmd); 
	}
	print "$PROMPT \> ";
	} # if a system command
} #if only CR
} # while



sub  remoteCommands {

my $remoteArgument = $_[0];

if($remoteArgument eq "\n"){
print "$PROMPT \> ";
} else { chomp;
($cmd, @arguments) = split(/\s+/, $remoteArgument);
$noOfargs = @arguments;
if(exists $p2cmdArgs->{$cmd}){ if( $p2cmdArgs->{$cmd} <= $noOfargs) { &{$p2cmd->{$cmd}}(@arguments); } else { &{$p2cmd->{$cmd}}("HELP"); }
print "$PROMPT \> ";}
else {
system($remoteArgument);
print "$PROMPT \> ";
} # if a system command
}

}#sub remoteCommands


sub ctrlc_handler {
$got_ctrlc++;
if (!$got_ctrlc) {print "\n To exit press ctrl C again; To continue press enter\n";};
return if($got_ctrlc==0) ;
exit 1;
}

use POSIX 'WNOHANG' ;
sub reap_update_child_hash {
  while ((my $kid = waitpid(-1,WNOHANG)) >0) {
    if(exists $child_pid_status{$kid}){
      delete($child_pid_status{$kid}) ;
    }else {
      $child_pid_status{$kid} = 0 ;
    }
    print "child process $kid reaped" ;
  }
}

sub BEGIN {
$build_version = "1.1";
######buildadmin uncomment this# $build_version = "1.1";
$NOLOG = 0 ;
$HELP = 0;
$overwritelog = 0;
$numArgs = $#ARGV;                                            
for ( my $xx = -1; $xx < $numArgs ; $xx++ ) {
  if ( $ARGV[$xx] eq "--nolog" ) { 
    $NOLOG = 1; 
  }        
  elsif ( $ARGV[$xx] eq "-help" ) { 
    $NOLOG = 1;
    #&printMainHelp; 
  }         
  elsif ( $ARGV[$xx] eq "--cleanlog" ) { 
    #$NOLOG = 1;
    system ("rm proton.log*");
    #exit;
  }         
  elsif ( $ARGV[$xx] eq "--overwritelog" ) { 
    $overwritelog = 1;
  }   
  elsif ( $ARGV[$xx] eq "-log" ) {
    $LOG_FILE = $ARGV[$xx+1 ];
  }         
}                
$logFileName = "" ;
$cmdfileName = "";
if($LOG_FILE eq ""){
  if( ($NOLOG == 0) && ($overwritelog == 0) ) {
    for (my $i = 0 ; 1;$i++){
      $logFileName ="proton.log".$i;
      $cmdfileName ="proton.cmd".$i;
      if (-e $logFileName){
        $t= $i+1;
        $logFileName = "proton.log".$t; 
        $cmdfileName ="proton.cmd".$t;
      }else {
        $logFileName ="proton.log".$i;
        $cmdfileName ="proton.cmd".$i;
        last;	
      }
    }
    open (TEST, ">$logFileName");
    open (LOG, ">$cmdfileName");
    openTee(*STDOUT, *STDOUT, *TEST);
  }
  if( $overwritelog == 1 ) {
    for (my $i = 0 ; 1;$i++){
      $logFileName ="proton.log".$i;
      $cmdfileName ="proton.cmd".$i;
      if (-e $logFileName){
      } 
      else {
        $i = $i-1;
        $logFileName ="proton.log".$i;
        $cmdfileName ="proton.cmd".$i;
        last;	
      }
    }
       open (TEST, ">$logFileName");
       open (LOG, ">$cmdfileName");
       openTee(*STDOUT, *STDOUT, *TEST);
  }
} else {
  open (TEST, ">$LOG_FILE");
  #open (LOG, ">$LOG_FILE.cmd");
  openTee(*STDOUT, *STDOUT, *TEST);
}
     
#my $ver = $GLOBAL->dbfGlobalGetVersion;
print "\n\n\t#########################################\n";
print "\t#                                       #\n";
print "\t#       Welcome to Proton tool          #\n";
print "\t#          release-ID  $build_version              #\n";
print "\t#                                       #\n";
print "\t#########################################\n\n\n";
print "INFO : Checking out license ....\n";

%moduleArea = ();
%moduleHierarchyPointer = ();
%verilogModules = ();
%modules = ();
%verilogModules = ();
%cmds = ();
%checkArguments = ();
%macroInputPins = ();
%macroOutputPins = ();
%COMP_ALREADY = ();
@COMPONENTS = ();
@GCellArray = ();
%TECHNOLOGY_PHYSICAL = ();
%PTDB = ();
%VDB = ();
%VLDB =();
%VRDB = ();
%VRLDB = ();

}

sub END {
#system("clear");
print "cleanup data \.";
undef %moduleArea ;
undef %moduleHierarchyPointer ;
undef %verilogModules ;
undef %modules ;
print "\.";
undef %verilogModules ;
undef %cmds ;
undef %checkArguments ;
undef %macroInputPins ;
undef %macroOutputPins ;
undef %COMP_ALREADY ;
undef @COMPONENTS ;
undef @GCellArray;

$dieIsCentre = 0;
$DEF_DATABASE_UNIT=2000;
undef $GLOBAL;
$MICRONFACTOR = 1;
print "\.";
print " \. done \n";

print "\n\n\t#########################################\n";
print "\t#                                       #\n";
print "\t#     Thank you for using Proton!       #\n";
print "\t#                                       #\n";
print "\t#########################################\n\n\n";
closeTee(*STDOUT);
}



