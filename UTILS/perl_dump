sub save_design {

use Benchmark;
my $t0 = new Benchmark;

my $noOfArguments = @_;
print "No of arguments: $noOfArguments\n" if ($debug);
if($noOfArguments < 2 || $_[0] eq "-h" )  {
        print "Usage :  save_design\n";
        print "                       -name <design name>\n";
        print "                       <-debug> \n";

  }
else {
 for(my $i = 0; $i < $noOfArguments; $i++){
  if($_[$i] eq "-name"){
    $name = $_[$i+1];	
    	if (-d "./$name") {
		print "INFO-UTS-SAVE_DES : 001 : There is a directory named $name!\n";
		print "INFO-UTS-SAVE_DES : 002 : Overwriting existing directory\n";
	}
  }
}
print "INFO-UTS-SAVE_DES : 003 : Design name is $name \n";
$Design = $name;
mkdir("$Design", 0777) ;
if (-w $Design){

store \%PLDB, "$Design/PLDB";
store \%PTDB, "$Design/PTDB";
store \%MACROS_ATTRIBUTE_ALREADY, "$Design/MACROS_ATTRIBUTE_ALREADY";
store \%TLDB, "$Design/TLDB";
####################################################
store \%VDB, "$Design/VDB";
store \%VLDB, "$Design/VLDB";
store \%VRDB, "$Design/VRDB";
store \%VRLDB, "$Design/VRLDB";
store \%HashCol, "$Design/HashCol";
store \%RML, "$Design/RML";

####################################################
store \%NETS_ROUTING_ALREADY , "$Design/NRA";
store \%DEF_TRACKS_ALREADY , "$Design/DTA";
store \%DIE_ALREADY , "$Design/DA";
store \%FLOORPLAN_ALREADY , "$Design/FA";

store \%CADB, "$Design/CADB";
store \%PORTS_ALREADY, "$Design/PORTS_ALREADY";
store \%COMP_ALREADY, "$Design/COMP_ALREADY";
store \%NETS_ALREADY, "$Design/NETS_ALREADY";

store \%TECHNOLOGY_PHYSICAL, "$Design/TP";
store \%ROWS_ALREADY, "$Design/RA";
store \$GLOBAL, "$Design/global";

print "INFO-UTS-SAVE_DES : 004 : Saving design $Design\n";
#$GLOBAL->dbfGlobalSetTOP($TOP_MODULE);
$TOP = $GLOBAL->dbfGlobalGetTOP ;
print "INFO-UTS-SAVE_DES : 005 : Top name is $TOP\n";
#undef %PLDB;
#undef %MACROS_ATTRIBUTE_ALREADY;
#undef %TLDB;
#undef %CADB;
#undef %PORTS_ALREADY;
#undef %COMP_ALREADY;
#undef %NETS_ALREADY;
}else {print "ERR-UTS-SAVE_DES : 006 : DO NOT HAVE WRITE PERMISSION\n";
      }#else  
}#end else

my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "subroutine save_design took:",timestr($td),"\n";
}# sub save_design

sub get_design {
my $Design = "";
my $noOfArguments = @_;

my $flag =0;
print "DBG-UTS-GET_DES : 001 : No of arguments: $noOfArguments\n" if ($debug);
if($noOfArguments < 2 ||$_[0] eq "-h" )  {
        print "Usage :  restore_design\n";
        print "                       -name <design name>\n";
        print "                       <-debug>\n";

  }
else {
 for(my $i = 0; $i < $noOfArguments; $i++){
  if($_[$i] eq "-name"){
    	$Design = $_[$i+1];
	if (! -d "./$Design") {
		print "WARN-UTS-GET_DES : 002 : No database exists!\n";
		print "WARN-UTS-GET_DES : 003 : Please check the database name\n";
		$flag = 1;
	}
  }
}
if ($flag ==0) {
$ptdb_ref = retrieve "$Design/PTDB";
%PTDB = %{$ptdb_ref};

$pldb_ref = retrieve "$Design/PLDB";
%PLDB = %{$pldb_ref};

$macros_att_ref = retrieve "$Design/MACROS_ATTRIBUTE_ALREADY" ;
%MACROS_ATTRIBUTE_ALREADY = %{$macros_att_ref};

$tldb_ref = retrieve "$Design/TLDB" ;
%TLDB = %{$tldb_ref}; 

############################################################
$vdb_ref = retrieve "$Design/VDB";
%VDB = %{$vdb_ref};

$vldb_ref = retrieve "$Design/VLDB";
%VLDB = %{$vldb_ref};

$vrdb_ref = retrieve "$Design/VRDB";
%VRDB = %{$vrdb_ref};

$vrldb_ref = retrieve "$Design/VRLDB";
%VRLDB = %{$vrldb_ref};

$hashCol_ref = retrieve "$Design/HashCol";
%HashCol = %{$hashCol_ref};

$rml_ref = retrieve "$Design/RML";
%RML = %{$rml_ref};

#############################################################

$nra = retrieve "$Design/NRA" ;
%NETS_ROUTING_ALREADY = %{$nra}; 

$dta = retrieve "$Design/DTA" ;
%DEF_TRACKS_ALREADY = %{$dta}; 

$da = retrieve "$Design/DA" ;
%DIE_ALREADY = %{$da}; 

$fa = retrieve "$Design/FA" ;
%FLOORPLAN_ALREADY = %{$fa}; 


$cadb_ref = retrieve "$Design/CADB" ;
%CADB = %{$cadb_ref}; 

$ports_ref = retrieve "$Design/PORTS_ALREADY" ;
%PORTS_ALREADY = %{$ports_ref};

$comp_ref = retrieve "$Design/COMP_ALREADY" ;
%COMP_ALREADY = %{$comp_ref};

$nets_ref = retrieve "$Design/NETS_ALREADY" ;
%NETS_ALREADY = %{$nets_ref};

$tp_ref = retrieve "$Design/TP" ;
%TECHNOLOGY_PHYSICAL = %{$tp_ref};

$ra_ref = retrieve "$Design/RA" ;
%ROWS_ALREADY = %{$ra_ref};

$global_ref = retrieve "$Design/global";
$GLOBAL = ${$global_ref};

$TOP_MODULE = $GLOBAL->dbfGlobalGetTOP ;
print "INFO-UTS-GET_DES : 004 : Top module : $TOP_MODULE \n";
}
}#end else
}# sub get_design

sub popup_save_design {
my $popupgui = MainWindow->new();
$popupgui->title ("Save Design");
        my $Frame1=$popupgui->Frame->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
        my $Frame2=$popupgui->Frame(-background=>"pale turquoise")->pack(-side => 'bottom',-anchor=>'n', -expand=>1, -fill=>'x');
        my $ButtonFrame = $Frame2->Frame(-borderwidth=>1,-background=>"magenta")->pack(-side=>'bottom');

$Frame1->Label(-text => "DesignName",-background=>"pale turquoise", -foreground=>"black",-font=>"Times 10 italic")->pack(-side =>'left', -anchor => 'w');
$Frame1->Entry(-textvariable =>\$designName,-background=>"wheat")->pack(-side =>'left', -anchor => 'w',-fill => 'x', -expand=> '1');

 my $Browsebutton = $Frame1->Button(-text=>'Browse',
                                -background=>"pink",
                                -activebackground=>"pink",
                                -activeforeground=>"blue",
                                -pady=>0,                                                                     
                                -command =>sub {&call_popup_save_design;}
                                   )->pack(-side => 'right');
my $okbutton = $ButtonFrame->Button(-text=>'Ok', 
                                     -background=>"pink",
                                     -activebackground=>"pink",
                                     -activeforeground=>"blue",
                                     -pady=>0,                                                                                                                             -command =>sub {&save_design(-name, $designName);
                                                     $popupgui->destroy;},
                                     )->pack(-side => 'left');

my $applybutton = $ButtonFrame->Button(-text=>'Apply', 
                                     -background=>"pink",
                                     -activebackground=>"pink",
                                     -activeforeground=>"blue",
                                     -pady=>0,                                                                                                                             -command =>sub {&save_design(-name, $designName);},
                                     )->pack(-side => 'left');

my $cancelbutton = $ButtonFrame->Button(-text=>'Cancel', 
                                     -background=>"pink",
                                     -activebackground=>"pink",
                                     -activeforeground=>"blue",
                                     -pady=>0,                                                                                                                             -command =>sub {$popupgui->destroy;},
                                     )->pack(-side => 'left');


                           
}#sub popup_save_design 

sub call_popup_save_design {

   $designName =$_;
my @types = (#["Config File", '.def'],
             ["All Files", "*"]);

$designName = $top->getSaveFile(-filetypes =>\@types,
                             );#-defaultextension => '.def'); 
          
}#sub call_popup_save_design


sub popup_get_design {
my $popupgui = MainWindow->new();
$popupgui->title ("Restore Design");
        my $Frame1=$popupgui->Frame->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
        my $Frame2=$popupgui->Frame(-background=>"pale turquoise")->pack(-side => 'bottom',-anchor=>'n', -expand=>1, -fill=>'x');
        my $ButtonFrame = $Frame2->Frame(-borderwidth=>1,-background=>"magenta")->pack(-side=>'bottom');

$Frame1->Label(-text => "DesignName",-background=>"pale turquoise", -foreground=>"black",-font=>"Times 10 italic")->pack(-side =>'left', -anchor => 'w');

$Frame1->Entry(-textvariable =>\$desDir,-background=>"wheat")->pack(-side =>'left', -anchor => 'w',-fill => 'x', -expand=> '1');

my $Browsebutton = $Frame1->Button(-text=>'Browse',
                                   -background=>"pink",
                                   -activebackground=>"pink",
                                   -activeforeground=>"blue",
                                   -pady=>0,                                                                     
                                   -command =>sub {&call_popup_get_design;}
                                   )->pack(-side => 'right');
my $okbutton = $ButtonFrame->Button(-text=>'Ok', 
                                    -background=>"pink",
                                    -activebackground=>"pink",
                                    -activeforeground=>"blue",
                                    -pady=>0,                                                                                                       -command =>sub {&get_design(-name, $desDir);
                                                    $popupgui->destroy;},
                                     )->pack(-side => 'left');

my $applybutton = $ButtonFrame->Button(-text=>'Apply', 
                                       -background=>"pink",
                                       -activebackground=>"pink",
                                       -activeforeground=>"blue",
                                       -pady=>0,                                                                                                       -command =>sub {&get_design(-name, $desDir);},
                                     )->pack(-side => 'left');

my $cancelbutton = $ButtonFrame->Button(-text=>'Cancel', 
                                        -background=>"pink",
                                        -activebackground=>"pink",
                                        -activeforeground=>"blue",
                                        -pady=>0,                                                                                                                             -command =>sub {$popupgui->destroy;},
                                     )->pack(-side => 'left');

}#sub popup_get_design 


sub call_popup_get_design {

use Tk::DirTree;
use Cwd;

my $top = new MainWindow;
$top->withdraw;

my $t = $top->Toplevel;
$t->title("Choose directory:");
my $ok = 0; 
# Create Frame widget before the DirTree widget, so it's always visible
# if the window gets resized.
my $f = $t->Frame->pack(-fill => "x", -side => "bottom");

 $designName = Cwd::cwd();

my $d;
$d = $t->Scrolled('DirTree',
		  -scrollbars => 'osoe',
		  -width => 25,
		  -height => 10,
		  -selectmode => 'browse',
		  -exportselection => 1,
		  -browsecmd => sub { $designName = shift },
		  # With this version of -command a double-click will
		  # select the directory
		  -command   => sub { $ok = 1 },
		  # With this version of -command a double-click will
		  # open a directory. Selection is only possible with
		  # the Ok button.
		  #-command   => sub { $d->opencmd($_[0]) },
		 )->pack(-fill => "both", -expand => 1);
# Set the initial directory
$d->chdir($designName);

$f->Button(-text => 'Ok',
           -background=>"pink",
           -activebackground=>"pink",
           -activeforeground=>"blue",
           -pady=>0,
	   -command => sub {$ok=1; $top->destroy; })->pack(-side => 'left');
$f->Button(-text => 'Cancel',
           -background=>"pink",
           -activebackground=>"pink",
           -activeforeground=>"blue",
           -pady=>0,
	   -command => sub { $top->destroy; })->pack(-side => 'left');

$f->waitVariable(\$ok);
if ($ok == 1) {
    #warn "The resulting directory is: $designName\n";
my @array_dir  = split(/\//,$designName);
my $n = @array_dir;
 $desDir = $array_dir[$n-1];

                }#if 

}#sub call_popup_get_design

#-------------------------------------------------------------------------------------------------------------------------------------------------#
sub save_design_new {
#****f* /save_design_new
# FUNCTION
#  save design
# NAME
#  save_design_new
# Assumptions
#      save design database
# SYNOPSIS
#     save_design_new -name <design name>
# INPUTS
#   save_design_new
#   options:-
#            i) -name <design name>
# OUTPUTS
#    design database prepared
#**********  
my $noOfArguments = @_;
print "DBG-UTS-SAVE_DES_NEW : 001 : No of arguments: $noOfArguments\n" if($debug);
if($noOfArguments < 2 || $_[0] eq "-h"){print "Usage : save_design_new\n";
                                        print "         -name <design name>\n";
                                        print "         <-debug> \n";
 }
else {
  for(my $i =0; $i < $noOfArguments; $i++){
   if($_[$i] eq "-name"){
      $name = $_[$i+1];
          if (-d "./$name"){
                   print "INFO-UTS-SAVE_DES_NEW : 002 : There is a directory named $name!\n";
                   print "WARN-UTS-SAVE_DES_NEW : 003 : Overwriting existing directory\n";
                   }
                 }
            }
print "INFO-UTS-SAVE_DES_NEW : 004 : Design name is $name \n";
$Design = $name;
mkdir("$Design",0777);

store \%PLDB, "$Design/PLDB";
store \%PTDB, "$Design/PTDB";
store \%MACROS_ATTRIBUTE_ALREADY, "$Design/MACROS_ATTRIBUTE_ALREADY";
########################################################################################################
store \%TLDB, "$Design/TLDB";
########################################################################################################
store \%VDB, "$Design/VDB";
store \%VLDB, "$Design/VLDB";
store \%VRDB, "$Design/VRDB";
store \%VRLDB, "$Design/VRLDB";
store \%HashCol, "$Design/HashCol";
store \%RML, "$Design/RML";
########################################################################################################
store \%NETS_ROUTING_ALREADY , "$Design/NRA";
store \%DEF_TRACKS_ALREADY , "$Design/DTA";
store \%DIE_ALREADY , "$Design/DA";
store \%FLOORPLAN_ALREADY , "$Design/FA";
########################################################################################################
store \%CADB, "$Design/CADB";
store \%PORTS_ALREADY, "$Design/PORTS_ALREADY";
store \%COMP_ALREADY, "$Design/COMP_ALREADY";
store \%NETS_ALREADY, "$Design/NETS_ALREADY";
########################################################################################################
store \%TECHNOLOGY_PHYSICAL, "$Design/TP";
store \%ROWS_ALREADY, "$Design/RA";
########################################################################################################
store \%PLACE,"$Design/PLACE";
store \%VNOM ,"$Design/VNOM";
store \%SpiceDB ,"$Design/SpiceDB";
store \%PesudoModuleDB, "$Design/PesudoModuleDB";
store \%eFarmDB,"$Design/eFarmDB";
########################################################################################################
store \$GLOBAL, "$Design/global";
print "INFO-UTS-SAVE_DES_NEW : 005 : Saving design $Design \n";
$TOP = $GLOBAL->dbfGlobalGetTOP;
print "INFO-UTS-SAVE_DES_NEW : 006 : Top name is $TOP \n";
}#else             
}#sub save_design_new
#------------------------------------------------------------------------------------------------------------------------------------------------------------------#
sub restore_design_new {
#******f */restore_design_new
# NAME
#  restore_design_new 
# FUNCTION
#     restore design
# Assumptions
#      after save design we can get design using this command  
# SYNOPSIS
#     restore_design_new -name <design name>
# INPUTS
#   restore_design_new
#   options:-
#            i) -name <design name>
# OUTPUTS
#    restore design database
#*******
my $Design = "";
my $noOfArguments = @_;

my $flag =0;
print "DBG-UTS-RESTRE_DES_NEW : 001 : No of arguments: $noOfArguments\n"if($debug);
if($noOfArguments < 2 || $_[0] eq "-h"){print "Usage : restore_design_new\n";
                                        print "                       -name <design name>\n";
                                        print "                       <-debug>\n";
                                        }
else{
for(my $i =0; $i<$noOfArguments;$i++){
   if($_[$i] eq "-name"){
   $Design = $_[$i+1];
  if (! -d "./$Design"){
  print "WARN-UTS-RESTRE_DES_NEW : 002 : No database exists!\n";
  print "WARN-UTS-RESTRE_DES_NEW : 003 : Please check the database name\n";
  $flag = 1;
                        }
                     }
                   }
if ($flag ==0){
$ptdb_ref = retrieve "$Design/PTDB";
%PTDB = %{$ptdb_ref};

$pldb_ref = retrieve "$Design/PLDB";
%PLDB = %{$pldb_ref};

$macros_att_ref = retrieve "$Design/MACROS_ATTRIBUTE_ALREADY" ;
%MACROS_ATTRIBUTE_ALREADY = %{$macros_att_ref};

###################################################################################################
$tldb_ref = retrieve "$Design/TLDB" ;
%TLDB = %{$tldb_ref};
###################################################################################################
$vdb_ref = retrieve "$Design/VDB";
%VDB = %{$vdb_ref};

$vldb_ref = retrieve "$Design/VLDB";
%VLDB = %{$vldb_ref};

$vrdb_ref = retrieve "$Design/VRDB";
%VRDB = %{$vrdb_ref};

$vrldb_ref = retrieve "$Design/VRLDB";
%VRLDB = %{$vrldb_ref};

$hashCol_ref = retrieve "$Design/HashCol";
%HashCol = %{$hashCol_ref};

$rml_ref = retrieve "$Design/RML";
%RML = %{$rml_ref};
###################################################################################################
$nra = retrieve "$Design/NRA" ;
%NETS_ROUTING_ALREADY = %{$nra}; 

$dta = retrieve "$Design/DTA" ;
%DEF_TRACKS_ALREADY = %{$dta}; 

$da = retrieve "$Design/DA" ;
%DIE_ALREADY = %{$da}; 

$fa = retrieve "$Design/FA" ;
%FLOORPLAN_ALREADY = %{$fa}; 


$cadb_ref = retrieve "$Design/CADB" ;
%CADB = %{$cadb_ref}; 

$ports_ref = retrieve "$Design/PORTS_ALREADY" ;
%PORTS_ALREADY = %{$ports_ref};

$comp_ref = retrieve "$Design/COMP_ALREADY" ;
%COMP_ALREADY = %{$comp_ref};

$nets_ref = retrieve "$Design/NETS_ALREADY" ;
%NETS_ALREADY = %{$nets_ref};

$tp_ref = retrieve "$Design/TP" ;
%TECHNOLOGY_PHYSICAL = %{$tp_ref};

$ra_ref = retrieve "$Design/RA" ;
%ROWS_ALREADY = %{$ra_ref};
###################################################################################################
$place_ref = retrieve "$Design/PLACE";
%PLACE = %{$place_ref};

$vnom_ref = retrieve "$Design/VNOM";
%VNOM = %{$vnom_ref};

$spice_ref = retrieve "$Design/SpiceDB";
%SpiceDB = %{$spice_ref};

$pesudo_ref = retrieve "$Design/PesudoModuleDB";
%PesudoModuleDB = %{$pesudo_ref};

$eFarm_ref = retrieve "$Design/eFarmDB";
%eFarmDB = %{$eFarm_ref};
###################################################################################################

$global_ref = retrieve "$Design/global";
$GLOBAL = ${$global_ref};

$TOP_MODULE = $GLOBAL->dbfGlobalGetTOP;
print "INFO-UTS-RESTRE_DES_NEW : 004 : Top module : $TOP_MODULE \n"; 
}#if flag
}#else
}#sub restore_design_new


1;

