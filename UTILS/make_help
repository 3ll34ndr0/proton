
sub help {

#****f* /help
# NAME
#   help
# FUNCTION
#   print all commands
# Assumptions
#   when type help print all commands or when type help <any command options> or <full command name>
#   they give list of possible options 
# SYNOPSIS
#   help or help <any command name> or <full commnad name> 
# INPUTS
#   help : for all commands
#   help <any command options> 
#   help <full command name>
# OUTPUTS
#   commands name
#****

my $opt ;
   $opt = $_[0];
if ($opt eq ""){
foreach $k (sort keys %cmds){
print "$k \n";
            }#foreach 
             } else {
$value = $cmds{$opt};
if ($value ne ""){
    if(defined &$value){
     &$value("-h");
                  }#if 
}#if
####################################################################################################
else {
if($opt =~m/\*$opt\*/) {
   $opt =~ s/^\*/\.\*/;
   $opt=~s/\*$/\.\*/;
   foreach $cmd (sort keys%cmds){
     if ($cmd =~m/$opt/){
         print "$cmd \n";
     }#if
   }#foreach
}#if
###################################################################################################
elsif($opt =~m/\*$opt/){
  $opt =~s/^\*/\.\*/;
  foreach $command (sort keys %cmds){
    if($command =~m/$opt$/){
       print "$command\n";
    }#if
  }#foreach
}#elsif
###################################################################################################
elsif(($opt =~m/$opt\*/)||($opt=~m/$opt/)){
  $opt =~s/\**$/\.\*/;
  foreach $commands (sort keys %cmds){
    if($commands =~m/^$opt/){
       print "$commands\n";
    }#if
   }#foreach
}#elsif
###################################################################################################
 }#else
}#else option given
}#sub help
#-------------------------------------------------------------------------------------------------------------------------#
sub report_runtime {
my $no_of_Arguments = @_;
if($no_of_Arguments < 0 || $_[0] eq '-h'){print "Usage : report_runtime\n";
                                          print "      : --regress <return time in HH::MM::SS format>\n";
                                        }
else {
my $sec;
my $mins;
my $hrs;
my $runtime;
my $regress = 0;
   for (my $i =0; $i < $no_of_Arguments; $i++){
        if($_[$i] eq "--regress"){$regress = 1;}
   } 
my $get_time = $GLOBAL->dbfGlobalGetProtonTime;
my $t1 = new Benchmark;
my $td = timediff ($t1,$get_time);
my $time_str_val = timestr($td);
$time_str_val =~ s/^\s*//;
my @time_val_array = split(/ /,$time_str_val);
my $wallclock_sec = $time_val_array[0];
$mins = int($wallclock_sec/60);
$sec = int($wallclock_sec -($mins*60));
$hrs = int($mins/60);
$mins = int($mins - ($hrs*60));
$runtime = $hrs."::".$mins."::"."$sec";
if ($regress == 1){
return($runtime);
}
else {
print "Total time $hrs hrs :: $mins mins :: $sec sec \n";
}
}
}#sub report_runtime
#-------------------------------------------------------------------------------------------------------------------------#
1;
