package PseudoInstanceModelDB;

# TOP : is the module top module or not 0 : not top module
#                                        1 : is top module
# PM : Parent Module Name
# Type is one of 0 - 32
#  0 - module 
#  1 - hardMacro
#  3 - blooean element
#  4 - arithmetic element
#  5 - black box
#  6 - fifo's
sub new {
my $dd = {
          TOP => 0,
          PM => "UND",
          cellref => "UND",
          L => [],
          O => N,
          F => "UNPLACED",
          Name => "UND",
          IName => "UND",
          File => "UND",
          Clk => "0",
          Rst => "1", 
          Width => "0",
          Depth => "0", 
          Input => "UND",
          Output => "UND",
          Bidi => "UND",
          Rd_en => "UND",
          Wr_en => "UND",  
          Operand => "UND",  
          inputWirePins => (),  
          outputWirePins => (),  
          bidiWirePins => (),
          inputBusPins => (),  
          outputBusPins => (),  
          bidiBusPins => (),  
          ID => 0,
          };
bless $dd, 'PseudoInstanceModelDB';
return $dd;
}# sub new

sub dbPimDBSetParentModule {
my($self,$parentName) = @_;
$self->{PM} = $parentName;
}#sub dbpimDBSetParentModule

sub dbPimDBGetParentModule {
my($self) = @_;
my $PM = $self->{PM};
return($PM);
}#sub dbpimDBGetParentModule

sub dbpimDBSetIsModuleTop {
my($self) = @_;
$self->{TOP} = 1;
}#sub dbpimDBSetIsModuleTop

sub dbpimDBGetIsModuleTop {
my($self) = @_;
my $val = $self->{TOP};
return($val);
}#sub dbpimDBGetIsModuleTop

#----------------------------------------------#
# Added by Rajeev

sub dbPimDBSetInstRelBbox {
#my($self,$x0,$y0, $x1,$y1) = @_;
#$self->{L}->[0] = $x0;
#$self->{L}->[1] = $y0;
#$self->{L}->[2] = $x1;
#$self->{L}->[3] = $y1;
######### addedd due to polygon in place of rectangle ###
my ($self, @bbox) = @_;
for(my $i=0; $i <=$#bbox; $i++){
    $self->{L}->[$i] = $bbox[$i];
}
}# sub dbPimDBSetInstRelBbox

sub dbPimDBGetInstRelBbox {
my($self) = @_;
my @bbox = @{$self->{L}};
return(@bbox);
}# sub dbPimDBGetInstRelBbox


sub dbPimDBSetInstRelLoc {
my ($self, $x0, $y0) = @_;
$self->{L}->[0] = $x0;
$self->{L}->[1] = $y0;
}# sub dbPimDBSetInstRelLoc

sub dbPimDBGetInstRelLoc {
my ($self) = @_;
my $x0 = $self->{L}->[0];
my $y0 = $self->{L}->[1];
return ($x0, $y0);
}# sub dbPimDBGetInstRelLoc

#----------------------------------------------#
sub dbPimDBSetInstOrient {
my ($self, $orient) = @_;
$self->{O} = $orient;
}

sub dbPimDBGetInstOrient {
my ($self) = @_;
my $orient = $self->{O};
return ($orient);
}

#----------------------------------------------#
sub dbPimDBSetInstStatus {
my ($self,$flag) = @_;
    $self->{F} = $flag;
}#sub dbPimDBSetInstStatus

sub dbPimDBGetInstStatus{
my ($self) = @_;
  my $flag =  $self->{F};
return($flag);
}#sub dbPimDBGetInstStatus

sub dbgPimDBGetInstStatus {
my ($self) = @_;
    my $flag =  $self->{F};
  print "status : $flag\n";
}#sub dbgPimDBGetInstStatus

#----------------------------------------------#
sub dbPimDBSetInstCellref {
my($self,$cellref) = @_;
$self->{cellref} = $cellref;
}#sub dbpimDBSetInstCellref

sub dbPimDBGetInstCellref {
my($self) = @_;
my $cellref = $self->{cellref};
return($cellref);
}#sub dbpimDBGetInstCellref

#----------------------------------------------#
sub dbPimDBSetInstName {
my($self,$Name) = @_;
$self->{Name} = $Name;
}#sub dbpimDBSetInstName

sub dbPimDBGetInstName {
my($self) = @_;
my $Name = $self->{Name};
return($Name);
}#sub dbpimDBGetInstName
#----------------------------------------------#
sub dbPimDBSetInstIName {
my($self,$IName) = @_;
$self->{IName} = $IName;
}#sub dbpimDBSetInstIName

sub dbPimDBGetInstIName {
my($self) = @_;
my $IName = $self->{IName};
return($IName);
}#sub dbpimDBGetInstIName
#----------------------------------------------#
sub dbPimDBSetInstFile {
my($self,$File) = @_;
$self->{File} = $File;
}#sub dbpimDBSetInstFile

sub dbPimDBGetInstFile {
my($self) = @_;
my $File = $self->{File};
return($File);
}#sub dbpimDBGetInstFile
#----------------------------------------------#
sub dbPimDBSetInstClk {
my($self,$Clk) = @_;
$self->{Clk} = $Clk;
}#sub dbpimDBSetInstClk

sub dbPimDBGetInstClk {
my($self) = @_;
my $Clk = $self->{Clk};
return($Clk);
}#sub dbpimDBGetInstClk

#----------------------------------------------#
sub dbPimDBSetInstRst {
my($self,$Rst) = @_;
$self->{Rst} = $Rst;
}#sub dbpimDBSetInstRst

sub dbPimDBGetInstRst {
my($self) = @_;
my $Rst = $self->{Rst};
return($Rst);
}#sub dbpimDBGetInstRst

#----------------------------------------------#
sub dbPimDBSetInstWidth {
my($self,$Width) = @_;
$self->{Width} = $Width;
}#sub dbpimDBSetInstWidth

sub dbPimDBGetInstWidth {
my($self) = @_;
my $Width = $self->{Width};
return($Width);
}#sub dbpimDBGetInstWidth

#----------------------------------------------#
sub dbPimDBSetInstDepth {
my($self,$Depth) = @_;
$self->{Depth} = $Depth;
}#sub dbpimDBSetInstDepth

sub dbPimDBGetInstDepth {
my($self) = @_;
my $Depth = $self->{Depth};
return($Depth);
}#sub dbpimDBGetInstDepth

#----------------------------------------------#
sub dbPimDBSetInstInput {
my($self,$Input) = @_;
$self->{Input} = $Input;
}#sub dbpimDBSetInstInput

sub dbPimDBGetInstInput {
my($self) = @_;
my $Input = $self->{Input};
return($Input);
}#sub dbpimDBGetInstInput

#----------------------------------------------#
sub dbPimDBSetInstBidi {
my($self,$Bidi) = @_;
$self->{Bidi} = $Bidi;
}#sub dbpimDBSetInstBidi

sub dbPimDBGetInstBidi {
my($self) = @_;
my $Bidi = $self->{Bidi};
return($Bidi);
}#sub dbpimDBGetInstBidi

#----------------------------------------------#
sub dbPimDBSetInstOutput {
my($self,$Output) = @_;
$self->{Output} = $Output;
}#sub dbpimDBSetInstOutput

sub dbPimDBGetInstOutput {
my($self) = @_;
my $Output = $self->{Output};
return($Output);
}#sub dbpimDBGetInstOutput

#----------------------------------------------#
sub dbPimDBSetInstRd_en {
my($self,$Rd_en) = @_;
$self->{Rd_en} = $Rd_en;
}#sub dbpimDBSetInstRd_en

sub dbPimDBGetInstRd_en {
my($self) = @_;
my $Rd_en = $self->{Rd_en};
return($Rd_en);
}#sub dbpimDBGetInstRd_en

#----------------------------------------------#
sub dbPimDBSetInstWr_en {
my($self,$Wr_en) = @_;
$self->{Wr_en} = $Wr_en;
}#sub dbpimDBSetInstWr_en

sub dbPimDBGetInstWr_en {
my($self) = @_;
my $Wr_en = $self->{Wr_en};
return($Wr_en);
}#sub dbpimDBGetInstWr_en
#----------------------------------------------#
sub dbPimDBSetInstOperand {
my($self,$Operand) = @_;
$self->{Operand} = $Operand;
}#sub dbpimDBSetInstOperand

sub dbPimDBGetInstOperand {
my($self) = @_;
my $Operand = $self->{Operand};
return($Operand);
}#sub dbpimDBGetInstOperand

#----------------------------------------------#
sub dbPimDBAddInstInputWirePin {
my ($self, $pin, $type) = @_;
$self->{inputWirePins}{$pin}{USED} = "";
$self->{inputWirePins}{$pin}{TYPE} = $type;
}# sub dbPimDBAddInstInputWirePin

sub dbPimDBSetInstInputWirePinUsed {
my ($self, $pin, $used) = @_;
if ( $pin =~ m/\[.*\]/ ) {
  $self->dbPimDBSetInstInputBusPinUsed($pin, $used);
  return;
}
if ( exists $self->{inputWirePins}{$pin} ) {
  $self->{inputWirePins}{$pin}{USED} = $used;
}
}# sub dbPimDBSetInstInputWirePinUsed

sub dbPimDBGetInstNextInputWirePin {
my ($self, $type, $net) = @_;
foreach my $in ( keys %{$self->{inputWirePins}} ) {
  if ( $self->{inputWirePins}{$in}{TYPE} == $type &&
       $self->{inputWirePins}{$in}{USED} eq "" ) {
    $self->{inputWirePins}{$in}{USED} = $net;
    return $in;
  };
}
return "";
}# sub dbPimDBGetInstNextInputWirePin

sub dbPimDBGetInstInputWirePinList {
my($self) = @_;
my @temp = ();
foreach my $in ( keys %{$self->{inputWirePins}} ) {
  my $pin = "($in";
  while ( my ($key, $val) = each %{$self->{inputWirePins}{$in}} ) {
    $pin .= " $key=>$val";
  }
  $pin .= ")";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstInputWirePinList

sub dbPimDBInstHasInputWirePin {
my ($self, $pin) = @_;
if ( exists $self->{inputWirePins}{$pin} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasInputWirePin

sub dbPimDBWipeInstInputWirePins {
my ($self) = @_;
$self->{inputWirePins} = ();
}# sub dbPimDBWipeInstInputWirePins

#----------------------------------------------#
sub dbPimDBAddInstOutputWirePin {
my ($self, $pin, $type) = @_;
$self->{outputWirePins}{$pin}{USED} = "";
$self->{outputWirePins}{$pin}{TYPE} = $type;
}# sub dbPimDBAddInstOutputWirePin

sub dbPimDBSetInstOutputWirePinUsed {
my ($self, $pin, $used) = @_;
if ( $pin =~ m/\[.*\]/ ) {
  $self->dbPimDBSetInstOutputBusPinUsed($pin, $used);
  return;
}
if ( exists $self->{outputWirePins}{$pin} ) {
  $self->{outputWirePins}{$pin}{USED} = $used;
}
}# sub dbPimDBSetInstOutputWirePinUsed

sub dbPimDBGetInstNextOutputWirePin {
my ($self, $type, $net) = @_;
foreach my $out ( keys %{$self->{outputWirePins}} ) {
  if ( $self->{outputWirePins}{$out}{TYPE} == $type &&
       $self->{outputWirePins}{$out}{USED} eq "" ) {
    $self->{outputWirePins}{$out}{USED} = $net;
    return $out;
  };
}
return "";
}# sub dbPimDBGetInstNextOutputWirePin

sub dbPimDBGetInstOutputWirePinList {
my($self) = @_;
my @temp = ();
foreach my $out ( keys %{$self->{outputWirePins}} ) {
  my $pin = "($out";
  while ( my ($key, $val) = each %{$self->{outputWirePins}{$out}} ) {
    $pin .= " $key=>$val";
  }
  $pin .= ")";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstOutputWirePinList

sub dbPimDBInstHasOutputWirePin {
my ($self, $pin) = @_;
if ( exists $self->{outputWirePins}{$pin} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasOutputWirePin

sub dbPimDBWipeInstOutputWirePins {
my ($self) = @_;
$self->{outputWirePins} = ();
}# sub dbPimDBWipeInstOutputWirePins

#----------------------------------------------#
sub dbPimDBAddInstInputBusPin {
my($self, $prefix, $from, $to, $type) = @_;
$self->{inputBusPins}{$prefix}{USED} = "";
$self->{inputBusPins}{$prefix}{SPUSED} = [];
$self->{inputBusPins}{$prefix}{SPCNT} = 0;
$self->{inputBusPins}{$prefix}{FROM} = $from;
$self->{inputBusPins}{$prefix}{TO} = $to;
$self->{inputBusPins}{$prefix}{TYPE} = $type;
}# sub dbPimDBAddInstInputBusPin

sub dbPimDBSetInstInputBusPinUsed {
my ($self, $pin, $net) = @_;

my $prefix = $pin;
my ($usedFrom, $usedTo);
if ( $pin =~ m/\[.*\]/ ) {
  my $bits = $pin;
  $bits =~ s/^.*\[/\[/;
  ($usedFrom, $usedTo) = main::utilGetBitsRange($bits);
  $prefix =~ s/\[.*\]//;
}
unless ( exists $self->{inputBusPins}{$prefix} ) {
  return;
}
unless ( defined $usedFrom && defined $usedTo ) {
  $self->{inputBusPins}{$prefix}{USED} = $net;
  return;
}
my $pinFrom = $self->{inputBusPins}{$prefix}{FROM};
my $pinTo = $self->{inputBusPins}{$prefix}{TO};
my $usedWid = 1 + abs ($usedTo - $usedFrom);
$self->{inputBusPins}{$prefix}{SPCNT} += $usedWid;

if ( $usedWid > 1 && $net !~ m/\[.*\]/ ) {
  $net .= ( $pinFrom > $pinTo ) ? ('[' . ($usedWid - 1) . ':0]') :
                                  ('[0:' . ($usedWid - 1) . ']');
}

my $lo;
my @splitNet;
if ( $pinFrom <= $pinTo ) {
  if ( $usedFrom <= $usedTo ) {
    $lo = $usedFrom - $pinFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $usedTo - $pinFrom;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
else {
  if ( $usedFrom >= $usedTo ) {
    $lo = $pinFrom - $usedFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $pinFrom - $usedTo;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
for ( my $i = 0; $i < $usedWid; $i++ ) {
  $self->{inputBusPins}{$prefix}{SPUSED}->[$lo + $i] = $splitNet[$i];
}
}# sub dbPimDBSetInstInputBusPinUsed

sub dbPimDBGetInstNextInputBusPin {
my ($self, $width, $type, $net) = @_;
foreach my $in ( keys %{$self->{inputBusPins}} ) {
  if ( $self->{inputBusPins}{$in}{TYPE} != $type ||
       $self->{inputBusPins}{$in}{USED} ne "" ||
       $self->{inputBusPins}{$in}{SPCNT} > 0 ) {
    next;
  }
  my $from = $self->{inputBusPins}{$in}{FROM};
  my $to = $self->{inputBusPins}{$in}{TO};
  my $buswid = 1 + abs ($to - $from);
  if ($buswid == $width) {
    $self->{inputBusPins}{$in}{USED} = $net;
    return ($in, $from, $to);
  }
}
return ("", 0, 0);
}# sub dbPimDBGetInstNextInputBusPin

sub dbPimDBGetInstInputBusPinList {
my($self) = @_;
my @temp = ();
foreach my $in ( keys %{$self->{inputBusPins}} ) {
  my $pin = "($in";
  my $from = $self->{inputBusPins}{$in}{FROM};
  my $to = $self->{inputBusPins}{$in}{TO};
  $pin .= "\[$from:$to\] ";
  my $spcnt = $self->{inputBusPins}{$in}{SPCNT};
  if ( $spcnt > 0 ) {
    $pin .= "SPCNT=>$spcnt";
  }
  else {
    my $used = $self->{inputBusPins}{$in}{USED};
    $pin .= "USED=>\"$used\"";
  }
  my $type = $self->{inputBusPins}{$in}{TYPE};
  $pin .= " TYPE=>$type)";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstInputBusPinList

sub dbPimDBInstHasInputBusPin {
my ($self, $prefix) = @_;
if ( exists $self->{inputBusPins}{$prefix} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasInputBusPin

sub dbPimDBGetInstInputBusBits {
my ($self, $prefix) = @_;
unless ( exists $self->{inputBusPins}{$prefix} ) {
  return "\[\]";
}
my $from = $self->{inputBusPins}{$prefix}{FROM};
my $to = $self->{inputBusPins}{$prefix}{TO};
return "\[$from:$to\]";
}# sub dbPimDBGetInstInputBusBits

sub dbPimDBGetInstInputBusWidth {
my ($self, $prefix) = @_;
unless ( exists $self->{inputBusPins}{$prefix} ) {
  return 0;
}
my $from = $self->{inputBusPins}{$prefix}{FROM};
my $to = $self->{inputBusPins}{$prefix}{TO};
my $buswid = 1 + abs ($to - $from);
return $buswid;
}# sub dbPimDBGetInstInputBusWidth

sub dbPimDBWipeInstInputBusPins {
my ($self) = @_;
$self->{inputBusPins} = ();
}# sub dbPimDBWipeInstInputBusPins

#----------------------------------------------#
sub dbPimDBAddInstOutputBusPin {
my($self, $prefix, $from, $to, $type) = @_;
$self->{outputBusPins}{$prefix}{USED} = "";
$self->{outputBusPins}{$prefix}{SPUSED} = [];
$self->{outputBusPins}{$prefix}{SPCNT} = 0;
$self->{outputBusPins}{$prefix}{FROM} = $from;
$self->{outputBusPins}{$prefix}{TO} = $to;
$self->{outputBusPins}{$prefix}{TYPE} = $type;
}# sub dbPimDBAddInstOutputBusPin

sub dbPimDBSetInstOutputBusPinUsed {
my ($self, $pin, $net) = @_;
my $prefix = $pin;
my ($usedFrom, $usedTo);
if ( $pin =~ m/\[.*\]/ ) {
  my $bits = $pin;
  $bits =~ s/^.*\[/\[/;
  ($usedFrom, $usedTo) = main::utilGetBitsRange($bits);
  $prefix =~ s/\[.*\]//;
}
unless ( exists $self->{outputBusPins}{$prefix} ) {
  return;
}
unless ( defined $usedFrom && defined $usedTo ) {
  $self->{outputBusPins}{$prefix}{USED} = $net;
  return;
}
my $pinFrom = $self->{outputBusPins}{$prefix}{FROM};
my $pinTo = $self->{outputBusPins}{$prefix}{TO};
my $usedWid = 1 + abs ($usedTo - $usedFrom);
$self->{outputBusPins}{$prefix}{SPCNT} += $usedWid;

if ( $usedWid > 1 && $net !~ m/\[.*\]/ ) {
  $net .= ( $pinFrom > $pinTo ) ? ('[' . ($usedWid - 1) . ':0]') :
                                  ('[0:' . ($usedWid - 1) . ']');
}

my $lo;
my @splitNet;
if ( $pinFrom <= $pinTo ) {
  if ( $usedFrom <= $usedTo ) {
    $lo = $usedFrom - $pinFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $usedTo - $pinFrom;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
else {
  if ( $usedFrom >= $usedTo ) {
    $lo = $pinFrom - $usedFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $pinFrom - $usedTo;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
for ( my $i = 0; $i < $usedWid; $i++ ) {
  $self->{outputBusPins}{$prefix}{SPUSED}->[$lo + $i] = $splitNet[$i];
}
}# sub dbPimDBSetInstOutputBusPinUsed

sub dbPimDBGetInstNextOutputBusPin {
my ($self, $width, $type, $net) = @_;
foreach my $out ( keys %{$self->{outputBusPins}} ) {
  if ( $self->{outputBusPins}{$out}{TYPE} != $type ||
       $self->{outputBusPins}{$out}{USED} ne "" ||
       $self->{outputBusPins}{$out}{SPCNT} > 0) {
    next;
  }
  my $from = $self->{outputBusPins}{$out}{FROM};
  my $to = $self->{outputBusPins}{$out}{TO};
  my $buswid = 1 + abs ($to - $from);
  if ($buswid == $width) {
    $self->{outputBusPins}{$out}{USED} = $net;
    return ($out, $from, $to);
  }
}
return ("", 0, 0);
}# sub dbPimDBGetInstNextOutputBusPin

sub dbPimDBGetInstOutputBusPinList {
my($self) = @_;
my @temp = ();
foreach my $out ( keys %{$self->{outputBusPins}} ) {
  my $pin = "($out";
  my $from = $self->{outputBusPins}{$out}{FROM};
  my $to = $self->{outputBusPins}{$out}{TO};
  $pin .= "\[$from:$to\] ";
  my $spcnt = $self->{outputBusPins}{$out}{SPCNT};
  if ( $spcnt > 0 ) {
    $pin .= "SPCNT=>$spcnt";
  }
  else {
    my $used = $self->{outputBusPins}{$out}{USED};
    $pin .= "USED=>\"$used\"";
  }
  my $type = $self->{outputBusPins}{$out}{TYPE};
  $pin .= " TYPE=>$type)";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstOutputBusPinList

sub dbPimDBInstHasOutputBusPin {
my ($self, $prefix) = @_;
if ( exists $self->{outputBusPins}{$prefix} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasOutputBusPin

sub dbPimDBGetInstOutputBusBits {
my ($self, $prefix) = @_;
unless ( exists $self->{outputBusPins}{$prefix} ) {
  return "\[\]";
}
my $from = $self->{outputBusPins}{$prefix}{FROM};
my $to = $self->{outputBusPins}{$prefix}{TO};
return "\[$from:$to\]";
}# sub dbPimDBGetInstOutputBusBits

sub dbPimDBGetInstOutputBusWidth {
my ($self, $prefix) = @_;
unless ( exists $self->{outputBusPins}{$prefix} ) {
  return 0;
}
my $from = $self->{outputBusPins}{$prefix}{FROM};
my $to = $self->{outputBusPins}{$prefix}{TO};
my $buswid = 1 + abs ($to - $from);
return $buswid;
}# sub dbPimDBGetInstOutputBusWidth

sub dbPimDBWipeInstOutputBusPins {
my ($self) = @_;
$self->{outputBusPins} = ();
}# sub dbPimDBWipeInstOutputBusPins

#----------------------------------------------#
sub dbPimDBGetInstPinConnList {
my($self) = @_;
my @allPins = ();
foreach my $in ( keys %{$self->{inputWirePins}} ) {
  push(@allPins, $in, $self->{inputWirePins}{$in}{USED});
}
foreach my $out ( keys %{$self->{outputWirePins}} ) {
  push(@allPins, $out, $self->{outputWirePins}{$out}{USED});
}
foreach my $bidi ( keys %{$self->{bidiWirePins}} ) {
  push(@allPins, $bidi, $self->{bidiWirePins}{$bidi}{USED});
}
foreach my $in ( keys %{$self->{inputBusPins}} ) {
  if ( $self->{inputBusPins}{$in}{SPCNT} == 0 ) {
    push(@allPins, $in, $self->{inputBusPins}{$in}{USED});
  }
  else {
    my $spused = join(',', @{$self->{inputBusPins}{$in}{SPUSED}});
    $spused = "\{" . $spused . "\}";
    push(@allPins, $in, $spused);
  }
}
foreach my $out ( keys %{$self->{outputBusPins}} ) {
  if ( $self->{outputBusPins}{$out}{SPCNT} == 0 ) {
    push(@allPins, $out, $self->{outputBusPins}{$out}{USED});
  }
  else {
    my $spused = join(',', @{$self->{outputBusPins}{$out}{SPUSED}});
    $spused = "\{" . $spused . "\}";
    push(@allPins, $out, $spused);
  }
}
foreach my $bidi ( keys %{$self->{bidiBusPins}} ) {
  if ( $self->{bidiBusPins}{$bidi}{SPCNT} == 0 ) {
    push(@allPins, $bidi, $self->{bidiBusPins}{$bidi}{USED});
  }
  else {
    my $spused = join(',', @{$self->{bidiBusPins}{$bidi}{SPUSED}});
    $spused = "\{" . $spused . "\}";
    push(@allPins, $bidi, $spused);
  }
}
return(@allPins);
}# sub dbPimDBGetInstPinConnList
#---------------------------------------------------------------------------------#
sub dbPimDBAddInstBidiWirePin {
my ($self, $pin, $type) = @_;
$self->{bidiWirePins}{$pin}{USED} = "";
$self->{bidiWirePins}{$pin}{TYPE} = $type;
}# sub dbPimDBAddInstBidiWirePin

sub dbPimDBSetInstBidiWirePinUsed {
my ($self, $pin, $used) = @_;
if ( $pin =~ m/\[.*\]/ ) {
  $self->dbPimDBSetInstBidiBusPinUsed($pin, $used);
  return;
}
if ( exists $self->{bidiWirePins}{$pin} ) {
  $self->{bidiWirePins}{$pin}{USED} = $used;
}
}# sub dbPimDBSetInstBidiWirePinUsed

sub dbPimDBGetInstNextBidiWirePin {
my ($self, $type, $net) = @_;
foreach my $in ( keys %{$self->{bidiWirePins}} ) {
  if ( $self->{bidiWirePins}{$in}{TYPE} == $type &&
       $self->{bidiWirePins}{$in}{USED} eq "" ) {
    $self->{bidiWirePins}{$in}{USED} = $net;
    return $in;
  };
}
return "";
}# sub dbPimDBGetInstNextBidiWirePin

sub dbPimDBGetInstBidiWirePinList {
my($self) = @_;
my @temp = ();
foreach my $in ( keys %{$self->{bidiWirePins}} ) {
  my $pin = "($in";
  while ( my ($key, $val) = each %{$self->{bidiWirePins}{$in}} ) {
    $pin .= " $key=>$val";
  }
  $pin .= ")";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstBidiWirePinList

sub dbPimDBInstHasBidiWirePin {
my ($self, $pin) = @_;
if ( exists $self->{bidiWirePins}{$pin} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasBidiWirePin

sub dbPimDBWipeInstBidiWirePins {
my ($self) = @_;
$self->{bidiWirePins} = ();
}# sub dbPimDBWipeInstBidiWirePins

#---------------------------------------------------------------------------------#
sub dbPimDBAddInstBidiBusPin {
my($self, $prefix, $from, $to, $type) = @_;
$self->{bidiBusPins}{$prefix}{USED} = "";
$self->{bidiBusPins}{$prefix}{SPUSED} = [];
$self->{bidiBusPins}{$prefix}{SPCNT} = 0;
$self->{bidiBusPins}{$prefix}{FROM} = $from;
$self->{bidiBusPins}{$prefix}{TO} = $to;
$self->{bidiBusPins}{$prefix}{TYPE} = $type;
}# sub dbPimDBAddInstBidiBusPin

sub dbPimDBSetInstBidiBusPinUsed {
my ($self, $pin, $net) = @_;

my $prefix = $pin;
my ($usedFrom, $usedTo);
if ( $pin =~ m/\[.*\]/ ) {
  my $bits = $pin;
  $bits =~ s/^.*\[/\[/;
  ($usedFrom, $usedTo) = main::utilGetBitsRange($bits);
  $prefix =~ s/\[.*\]//;
}
unless ( exists $self->{bidiBusPins}{$prefix} ) {
  return;
}
unless ( defined $usedFrom && defined $usedTo ) {
  $self->{bidiBusPins}{$prefix}{USED} = $net;
  return;
}
my $pinFrom = $self->{bidiBusPins}{$prefix}{FROM};
my $pinTo = $self->{bidiBusPins}{$prefix}{TO};
my $usedWid = 1 + abs ($usedTo - $usedFrom);
$self->{bidiBusPins}{$prefix}{SPCNT} += $usedWid;

if ( $usedWid > 1 && $net !~ m/\[.*\]/ ) {
  $net .= ( $pinFrom > $pinTo ) ? ('[' . ($usedWid - 1) . ':0]') :
                                  ('[0:' . ($usedWid - 1) . ']');
}

my $lo;
my @splitNet;
if ( $pinFrom <= $pinTo ) {
  if ( $usedFrom <= $usedTo ) {
    $lo = $usedFrom - $pinFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $usedTo - $pinFrom;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
else {
  if ( $usedFrom >= $usedTo ) {
    $lo = $pinFrom - $usedFrom;
    @splitNet = main::utilSplitBusBits($net);
  }
  else {
    $lo = $pinFrom - $usedTo;
    @splitNet = main::utilSplitBusBits($net, "reverse");
  }
}
for ( my $i = 0; $i < $usedWid; $i++ ) {
  $self->{bidiBusPins}{$prefix}{SPUSED}->[$lo + $i] = $splitNet[$i];
}
}# sub dbPimDBSetInstBidiBusPinUsed

sub dbPimDBGetInstNextBidiBusPin {
my ($self, $width, $type, $net) = @_;
foreach my $in ( keys %{$self->{bidiBusPins}} ) {
  if ( $self->{bidiBusPins}{$in}{TYPE} != $type ||
       $self->{bidiBusPins}{$in}{USED} ne "" ||
       $self->{bidiBusPins}{$in}{SPCNT} > 0 ) {
    next;
  }
  my $from = $self->{bidiBusPins}{$in}{FROM};
  my $to = $self->{bidiBusPins}{$in}{TO};
  my $buswid = 1 + abs ($to - $from);
  if ($buswid == $width) {
    $self->{bidiBusPins}{$in}{USED} = $net;
    return ($in, $from, $to);
  }
}
return ("", 0, 0);
}# sub dbPimDBGetInstNextBidiBusPin

sub dbPimDBGetInstBidiBusPinList {
my($self) = @_;
my @temp = ();
foreach my $in ( keys %{$self->{bidiBusPins}} ) {
  my $pin = "($in";
  my $from = $self->{bidiBusPins}{$in}{FROM};
  my $to = $self->{bidiBusPins}{$in}{TO};
  $pin .= "\[$from:$to\] ";
  my $spcnt = $self->{bidiBusPins}{$in}{SPCNT};
  if ( $spcnt > 0 ) {
    $pin .= "SPCNT=>$spcnt";
  }
  else {
    my $used = $self->{bidiBusPins}{$in}{USED};
    $pin .= "USED=>\"$used\"";
  }
  my $type = $self->{bidiBusPins}{$in}{TYPE};
  $pin .= " TYPE=>$type)";
  push(@temp, $pin);
}
return(@temp);
}# sub dbPimDBGetInstBidiBusPinList

sub dbPimDBInstHasBidiBusPin {
my ($self, $prefix) = @_;
if ( exists $self->{bidiBusPins}{$prefix} ) {
  return 1;
}
return 0;
}# sub dbPimDBInstHasBidiBusPin

sub dbPimDBGetInstBidiBusBits {
my ($self, $prefix) = @_;
unless ( exists $self->{bidiBusPins}{$prefix} ) {
  return "\[\]";
}
my $from = $self->{bidiBusPins}{$prefix}{FROM};
my $to = $self->{bidiBusPins}{$prefix}{TO};
return "\[$from:$to\]";
}# sub dbPimDBGetInstBidiBusBits

sub dbPimDBGetInstBidiBusWidth {
my ($self, $prefix) = @_;
unless ( exists $self->{bidiBusPins}{$prefix} ) {
  return 0;
}
my $from = $self->{bidiBusPins}{$prefix}{FROM};
my $to = $self->{bidiBusPins}{$prefix}{TO};
my $buswid = 1 + abs ($to - $from);
return $buswid;
}# sub dbPimDBGetInstBidiBusWidth

sub dbPimDBWipeInstBidiBusPins {
my ($self) = @_;
$self->{bidiBusPins} = ();
}# sub dbPimDBWipeInstBidiBusPins

#---------------------------------------------------------------------------------#

1;
