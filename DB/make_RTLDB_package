package RTLDB_ALWAYS;

sub new {
my $dd = {
          sensitivity_list => "UND",
          block_list => RTLDB_BLOCK::createEmpty(),
          block_seq_list => [],
          register_assign_list => [],
          number_of_blocks => 0,
          begin_found => "0",
         };
bless $dd, 'RTLDB_ALWAYS';
return $dd;
}#sub new
#----------------------------------------------------------------#
sub dbRTLDB_Set_SensitivityList {
my ($self,$list) = @_;
$self->{sensitivity_list} = $list;
}#sub dbRTLDBAddSensitivityList

sub dbRTLDB_Get_SensitivityList {
my($self) = @_;
my $list = $self->{sensitivity_list};
return($list);
}#sub dbRTLDBGetSensitivityList 
#------------------------------------------------------------------#
sub dbRTLDB_Add_Reg_Assign_List {
my ($self,$register_assign) = @_;
push(@{$self->{register_assign_list}},$register_assign);
}#sub dbRTLDBAddReg_Assign_List

sub dbRTLDB_Get_Reg_Assign_List {
my ($self) = @_;
my @temp_register_assign_list = @{$self->{register_assign_list}};
return(@temp_register_assign_list);
}#sub dbRTLDBGetReg_Assign_List
#--------------------------------------------------------------------#
sub dbRTLDB_ALWAYS_Add_Block {
my ($self, $blk) = @_;
my $new_block_name = "block"."_".$self->{number_of_blocks};
$self->{block_list}{$new_block_name} =  $blk;
push(@{$self->{block_seq_list}},$blk);
$self->{number_of_blocks}++;
}#sub dbRTLDB_ALWAYS_Add_Block

sub dbRTLDB_ALWAYS_Get_Block {
my ($self) = @_;
my @blk = @{$self->{block_seq_list}};
return(@blk);
}#sub dbRTLDB_ALWAYS_Get_Block 
#--------------------------------------------------------------------#
sub dbRTLDB_ALWAYS_Set_Begin {
my ($self,$begin_found) = @_;
$self->{begin_found} = $begin_found;
}#sub dbRTLDB_ALWAYS_Set_Begin

sub dbRTLDB_ALWAYS_Get_Begin {
my ($self) = @_;
my $beginfound = $self->{begin_found};
return($beginfound);
}#sub dbRTLDB_ALWAYS_Get_Begin
#--------------------------------------------------------------------#
1;
