package NetRoutingDB;

## F : fixed routing
## C : cover routing
## R : routed routing
## nS : no shield routing

sub createEmpty {
my $net = {
          };
bless $net, 'NetRoutingDB';
return $net;
}# sub createEmpty

sub new {
my $net = {
           F => [],
           C => [],
           R => [],
           nS => [],
           S => [],
           FRS => [],
           RRS => [],
           SRS => [],
           P => "",
           V => "", 
           T => "",
           ID => "",  
          };
bless $net, 'NetRoutingDB';
return $net;
}#sub new

#----------------------------------------------#
sub dbNetRoutingDBSetFixedRoute {
my ($self,$l)=@_;
push(@{$self->{F}}, $l);
}#sub dbNetRoutingDBSetFixedRoute

sub dbNetRoutingDBGetFixedRoute {
my ($self,$l)=@_;
my @r = @{$self->{F}};
return(@r);
}#sub dbNetRoutingDBGetFixedRoute
#----------------------------------------------#

sub dbNetRoutingDBSetRegularRoute {
my ($self,$l)=@_;
push(@{$self->{R}}, $l);
}#sub dbNetRoutingDBSetRegularRoute

sub dbNetRoutingDBGetRegularRoute {
my ($self,$l)=@_;
my @r = @{$self->{R}};
return(@r);
}#sub dbNetRoutingDBGetRegularRoute

#----------------------------------------------#
sub dbNetRoutingDBSetSpecialRoute {
my ($self,$l)=@_;
push(@{$self->{S}}, $l);
}#sub dbNetRoutingDBSetSpecialRoute

sub dbNetRoutingDBGetSpecialRoute {
my ($self,$l)=@_;
my @r = @{$self->{S}};
return(@r);
}#sub dbNetRoutingDBGetSpecialRoute

#-----------------------------------------------#

sub dbNetSetType {
my ($self,$p) =@_;
$self->{P} = $p;
}#sub dbNetSetType

sub dbNetGetType {
my ($self) = @_;
my $p = $self->{P};
return($p);
}#sub dbNetGetType

#----------------------------------------------#
sub dbSNetSetVoltage {
my ($self,$r,$v) =@_;
${$self->{SP}}{$r}->{V} = $v;
}#sub dbSNetSetVoltage

sub dbSNetGetVoltage {
my ($self,$r) = @_;
my $v = ${$self->{SP}}{$r}->{V};
return($v);
}#sub dbSNetGetVoltage
#----------------------------------------------#
sub dbRegularNetSetType {
my ($self,$type) = @_;
$self->{T} = $type;
}#sub dbRegularNetSetType

sub dbRegularNetGetType {
my ($self) = @_;
my $type = $self->{T};
}#sub dbRegularNetGetType
#-------dded by shobhit------------------------#
#----------------------------------------------#
sub dbNetSetId {
my ($self,$id) = @_;
$self->{ID} = $id;
}#sub dbNetSetId

sub dbNetGetId {
my ($self) = @_;
my $id = $self->{ID};
}#sub dbNetGetId
#----------------------------------------------#
sub dbNetRoutingDBSetFRCompareDefState {
my ($self,$l)=@_;
push(@{$self->{FRS}}, $l);
}#sub dbNetRoutingDBSetFRCompareDefState

sub dbNetRoutingDBGetFRCompareDefState {
my ($self)=@_;
my @r = @{$self->{FRS}};
return(@r);
}#sub dbNetRoutingDBGetFRCompareDefState

#----------------------------------------------#
sub dbNetRoutingDBSetRRCompareDefState {
my ($self,$l)=@_;
push(@{$self->{RRS}}, $l);
}#sub dbNetRoutingDBSetRRCompareDefState

sub dbNetRoutingDBGetRRCompareDefState {
my ($self)=@_;
my @r = @{$self->{RRS}};
return(@r);
}#sub dbNetRoutingDBGetRRCompareDefState

#----------------------------------------------#
sub dbNetRoutingDBSetSRCompareDefState {
my ($self,$l)=@_;
push(@{$self->{SRS}}, $l);
}#sub dbNetRoutingDBSetSRCompareDefState

sub dbNetRoutingDBGetSRCompareDefState {
my ($self)=@_;
my @r = @{$self->{SRS}};
return(@r);
}#sub dbNetRoutingDBGetSRCompareDefState

#----------------------------------------------#



1;
