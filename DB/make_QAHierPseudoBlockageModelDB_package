package PseudoBlkgModelDB;

# T : type, one of P ( Placement blockage) or R (Routing blockage)
# L : layerName : in case of routing blockage

sub new {
my $dd = {
          T => P,
          Size => [],
          L => "UND",
          PM => "UND",
          };
bless $dd, 'PseudoBlkgModelDB';
return $dd;
}# sub new

#--------------------------------------------#
sub dbaTstgenSetParentModule {
my($self,$parentName) = @_;
$self->{PM} = $parentName;
}#sub dbaTstgenSetParentModule

sub dbaTstgenGetParentModule {
my($self) = @_;
my $parentName = $self->{PM};
return($parentName);
}#sub dbaTstgenGetParentModule
#--------------------------------------------#

sub dbaTstgenSetPseudoBlkgType {
my($self,$type) = @_;
$self->{T} = $type;
}#sub dbaTstgenSetPseudoBlkgType

sub dbaTstgenGetPseudoBlkgType {
my($self) = @_;
my $type = $self->{T};
return($type);
}#sub dbaTstgenGetPseudoBlkgType
#--------------------------------------------#

sub dbaTstgenSetPseudoBlkgLayer {
my($self,$type) = @_;
$self->{L} = $type;
}#sub dbaTstgenSetPseudoBlkgLayer

sub dbaTstgenGetPseudoBlkgLayer {
my($self) = @_;
my $type = $self->{L};
return($type);
}#sub dbaTstgenGetPseudoBlkgLayer
#--------------------------------------------#


sub dbaTstgenSetPseudoBlkgSize {
my($self,@rect) = @_;
@{$self->{Size}} = ($rect[0],$rect[1],$rect[2],$rect[3]);
}#sub dbaTstgenSetPseudoBlkgSize

sub dbaTstgenGetPseudoBlkgSize {
my($self) = @_;
my @rect = @{$self->{Size}};
return(@rect);
}#sub dbaTstgenGetPseudoBlkgSize
#--------------------------------------------#



1;
