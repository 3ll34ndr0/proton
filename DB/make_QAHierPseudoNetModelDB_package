package PseudoNetModelDB;

sub new {
my $dd = {
         pm => "UND",
         prefix => "UND",
         netName => "UND",
         netWidth => 1,
         type => "UND",
         class => "digital",
         fanIn => "",
         src => "",
         sink => {},
         topConn => 0,
         topConnPin => "",
         ID => 0,
         COORDS => [],
         EXTCOORDS => [],
         };
bless $dd, 'PseudoNetModelDB';
return $dd;
}# sub new

#------------------------------------------------#
sub dbaTstgenSetPseudoNetParentModule {
my($self,$module) = @_;
$self->{pm} = $module;
}#sub dbaTstgenSetPseudoNetParentModule

sub dbaTstgenGetPseudoNetParentModule {
my($self) = @_;
my $module = $self->{pm};
return($module);
}#sub dbaTstgenGetPseudoNetParentModule


#------------------------------------------------#

sub dbaTstgenSetPseudoNetPrefix {
my($self,$prefix) = @_;
$self->{prefix} = $prefix;
}#sub dbaTstgenSetPseudoNetPrefix

#------------------------------------------------#
sub dbaTstgenSetPseudoNetId {
my ($self,$id) = @_;
$self->{ID} = $id;
}#sub dbaTstgenSetPseudoNetId

sub dbaTstgenGetPseudoNetId {
my ($self) = @_;
my $id = $self->{ID};
}#sub dbaTstgenGetPseudoNetId

#------------------------------------------------#

sub dbaTstgenSetPseudoNetType {
my($self,$type) = @_;
if ($type eq "wire" || $type eq "glue" || $type eq "bus" || $type eq "clock" || $type eq "single") { $self->{type} = $type; }
else {
  my $name = $self->{prefix};
  print "DB WARN : \"$type\" is not a recognised type for net $name\n";
}
}#sub dbaTstgenSetPseudoNetType

sub dbaTstgenGetPseudoNetType {
my($self) = @_;
my $type = $self->{type};
return($type);
}#sub dbaTstgenGetPseudoNetType

#------------------------------------------------#

sub dbaTstgenSetPseudoNetClass {
my($self,$class) = @_;
if ($class eq "digital" || $class eq "analog" || $class eq "bump") { $self->{class} = $class; }
else {
  my $name = $self->{prefix};
  print "DB WARN : \"$class\" is not a recognised class for net $name\n";
}
}#sub dbaTstgenSetPseudoNetClass

sub dbaTstgenGetPseudoNetClass {
my($self) = @_;
my $class = $self->{class};
return($class);
}#sub dbaTstgenGetPseudoNetClass

#------------------------------------------------#
sub dbaTstgenSetPseudoNetCoords {
my($self,@coords) = @_;
@{$self->{COORDS}} = @coords;
}#sub dbaTstgenSetPseudoNetCoords

sub dbaTstgenGetPseudoNetCoords {
my($self) = @_;
my @coords = @{$self->{COORDS}};
return(@coords);
}#sub dbaTstgenGetPseudoNetCoords

#------------------------------------------------#
sub dbaTstgenSetPseudoExtNetCoords {
my($self,@coords) = @_;
@{$self->{EXTCOORDS}} = @coords;
}#sub dbaTstgenSetPseudoExtNetCoords

sub dbaTstgenGetPseudoExtNetCoords {
my($self) = @_;
my @coords = @{$self->{EXTCOORDS}};
return(@coords);
}#sub dbaTstgenGetPseudoExtNetCoords

#------------------------------------------------#

sub dbaTstgenSetPseudoNetSourceFanInList {
my($self, $src, $fanIn) = @_;
$self->{src} = $src;
$self->{fanIn} = $fanIn;
}#sub dbaTstgenSetPseudoNetSourceFanInList

sub dbaTstgenGetPseudoNetSourceFanInList {
my($self) = @_;
my $src = $self->{src};
my $fanIn = $self->{fanIn};
return($src, $fanIn);
}#sub dbaTstgenGetPseudoNetSourceFanInList

#------------------------------------------------#

sub dbaTstgenSetPseudoNetSinkFanOutList {
my($self, $sink, $fanOut) = @_;
unless ( exists $self->{sink}{$sink} ) {
  $self->{sink}{$sink} = [];
}
if ( $fanOut ne "" ) {
  push(@{$self->{sink}{$sink}}, $fanOut);
}
}#sub dbaTstgenSetPseudoNetSinkFanOutList

sub dbaTstgenGetPseudoNetSinkFanOutList {
my($self) = @_;
my @temp = ();
foreach my $s ( keys %{$self->{sink}} ) {
  my @pins = @{$self->{sink}{$s}};
  if ( @pins == 0 ) {
    push(@pins, "");
  }
  foreach my $fanOut ( @pins ) {
    push(@temp, $s, $fanOut);
  }
}
return(@temp);
}#sub dbaTstgenGetPseudoNetSinkFanOutList

#------------------------------------------------#
sub dbaTstgenRemovePseudoNetSinkFanOutList {
my ($self,$sink,$fanOut) = @_;
my @fan_pin = @{$self->{sink}{$sink}};
foreach my $f_pin (@fan_pin){
  if($f_pin eq $fanOut){ 
    shift @{$self->{sink}{$sink}};
    delete $self->{sink}{$sink};
  }
}
}#sub dbaTstgenRemovePseudoNetSinkFanOutList


##################### Added by Aditya ###########################
#-------------------------------------------#
sub dbaTstgenSetPseudoNetName {
my($self,$netName) = @_;
$self->{netName} = $netName;
}#sub dbaTstgenSetPseudoNetName

sub dbaTstgenGetPseudoNetName{
my($self) = @_;
my $netName = $self->{netName};
return($netName);
}#sub dbaTstgenGetPseudoNetName
#-------------------------------------------#
sub dbaTstgenSetPseudoNetWidth {
my($self,$netWidth) = @_;
$self->{netWidth} = $netWidth;
}#sub dbaTstgenSetPseudoNetWidth

sub dbaTstgenGetPseudoNetWidth{
my($self) = @_;
my $netWidth = $self->{netWidth};
return($netWidth);
}#sub dbaTstgenGetPseudoNetWidth
#-------------------------------------------#
sub dbaTstgenSetPseudoNetIsTopConn {
my($self,$topConn) = @_;
$self->{topConn} = $topConn;
}#sub dbaTstgenSetPseudoNetIsTopConn

sub dbaTstgenGetPseudoNetIsTopConn {
my($self) = @_;
my $topConn = $self->{topConn};
return($topConn);
}#sub dbaTstgenGetPseudoNetIsTopConn
#-------------------------------------------#
sub dbaTstgenSetPseudoNetTopConnPin {
my ($self, $pin) = @_;
$self->{topConnPin} = $pin;
}#sub dbaTstgenSetPseudoNetTopConnPin

sub dbaTstgenGetPseudoNetTopConnPin {
my ($self) = @_;
my $pin = $self->{topConnPin};
return($pin);
}#sub dbaTstgenGetPseudoNetTopConnPin
#-------------------------------------------#
##################################################################

1;
