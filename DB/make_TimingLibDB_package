package TimingLibDB;

####  explanation of database ####
##    FUNC : footprint of the cell

sub new {
my $cell = {
                    PINS => TimingLibPinDB::createEmpty(), 
                    FUNC => "UND",
                    CELL_NAME => "UND",
                    AREA => 0,
                    CELL_FOOTPRINT => "UND", 
                    };
bless $cell, 'TimingLibDB';
return $cell;
}#sub new

#-----------------------------------------------------#
sub dbTimingLibAddPin {
my ($self,$pin)  = @_;
${$self->{PINS}}{$pin} = TimingLibPinDB::new();
}#sub dbTimingLibAddPin

sub dbTimingLibGetPins {
my ($self)  = @_;
my @pins = ();
   foreach my $pinName ( keys %{$self->{PINS}} ) { push(@pins,$pinName); }
return(@pins);
}#sub dbTimingLibGetPins

#-----------------------------------------------------#
sub dbTimingLibSetPinType {
my ($self,$pin,$type) = @_;
${$self->{PINS}}{$pin}->{T} = $type;
}#sub dbTimingLibSetPinType

sub dbTimingLibGetPinType {
my ($self,$pin) = @_;
$type = ${$self->{PINS}}{$pin}->{T};
return($type);
}#sub dbTimingLibGetPinType

sub dbpTimingLibGetPinType {
my ($self,$pin) = @_;
$type = ${$self->{PINS}}{$pin}->{T};
print "$type\n";
}#sub dbpTimingLibGetPinType

#-----------------------------------------------------#
sub dbTimingLibSetPinFunc {
my ($self,$pin,$func) = @_;
${$self->{PINS}}{$pin}->{F} = $func;
}#sub dbTimingLibSetPinFunc

sub dbTimingLibGetPinFunc {
my ($self,$pin) = @_;
$func = ${$self->{PINS}}{$pin}->{F};
return($func);
}#sub dbTimingLibGetPinFunc

sub dbpTimingLibGetPinFunc {
my ($self,$pin) = @_;
$func = ${$self->{PINS}}{$pin}->{F};
print "$func\n";
}#sub dbpTimingLibGetPinFunc


#-----------------------------------------------------#
sub dbTimingLibSetPinCap {
my ($self,$pin,$cap) = @_;
${$self->{PINS}}{$pin}->{C} = $cap;
}#sub dbTimingLibSetPinCap

sub dbTimingLibGetPinCap {
my ($self,$pin) = @_;
my $cap = ${$self->{PINS}}{$pin}->{C};
return($cap);
}#sub dbTimingLibGetPinCap

sub dbgTimingLibGetPinCap {
my ($self,$pin) = @_;
my $cap = ${$self->{PINS}}{$pin}->{C};
print "cap : $cap\n";
}#sub dbgTimingLibGetPinCap

#-----------------------------------------------------#
sub dbTimingLibSetPinDir {
my ($self,$pin,$dir)  = @_;
${$self->{PINS}}{$pin}->{D} = $dir;
}#sub dbTimingLibSetPinDir

sub dbTimingLibGetPinDir {
my ($self,$pin)  = @_;
my $dir = ${$self->{PINS}}{$pin}->{D};
return($dir);
}#sub dbTimingLibGetPinDir

#-----------------------------------------------------#
sub dbTimingLibSetPinTiming {
my ($self,$pin,$timing)  = @_;
${$self->{PINS}}{$pin}->{timing} = $timing;
}#sub dbTimingLibSetPinTiming

sub dbTimingLibGetPinTiming {
my ($self,$pin)  = @_;
my $timing = ${$self->{PINS}}{$pin}->{timing};
return($timing);
}#sub dbTimingLibGetPinTiming

#-----------------------------------------------------#
sub dbTimingLibSetPinTimingType {
my ($self,$pin,$timing_type)  = @_;
push (@{${$self->{PINS}}{$pin}->{timing_type}}, $timing_type);
}#sub dbTimingLibSetPinTimingType

sub dbTimingLibGetPinTimingType {
my ($self,$pin)  = @_;
my @timing_type = @{${$self->{PINS}}{$pin}->{timing_type}};
return(@timing_type);
}#sub dbTimingLibGetPinTimingType

#-----------------------------------------------------#
sub dbTimingLibSetPinRPin {
my ($self,$pin,$rpin)  = @_;
push(@{${$self->{PINS}}{$pin}->{rpin_name}} ,$rpin);
}#sub dbTimingLibSetPinRPin

sub dbTimingLibGetPinRPin {
my ($self,$pin)  = @_;
my @rpin = @{${$self->{PINS}}{$pin}->{rpin_name}};
return(@rpin);
}#sub dbTimingLibGetPinRPin

#-----------------------------------------------------#

#sub dbTimingLibSetPinCond {
#my ($self,$pin,$rpin,$Ttype,$cond)  = @_;
#if ($Ttype eq "fallDelay" ) { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}},$cond);}
#elsif ($Ttype eq "riseDelay" ) {push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}},$cond);}
#else { }
#}#sub dbTimingLibSetPinCond
#
#sub dbTimingLibGetPinCond {
#my ($self,$pin,$rpin,$Ttype)  = @_;
#if ($Ttype eq "fallDelay" ) { @cond = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}};}
#elsif ($Ttype eq "riseDelay" ) { @cond = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}};}
#else { }
#return(@cond);
#}#sub dbTimingLibGetPinCond

sub dbTimingLibSetPinCond {
my ($self,$pin,$rpin,$cond)  = @_;
 push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{COND}},$cond);
}#sub dbTimingLibSetPinCond

sub dbTimingLibGetPinCond {
my ($self,$pin,$rpin)  = @_;
my @cond = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{COND}};
return(@cond);
}#sub dbTimingLibGetPinCond

#-----------------------------------------#
sub dbTimingLibSetPinTimingType {
my ($self,$pin,$rpin,$cond,$timing_type)  = @_;
   ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{TTYPE} = $timing_type;
}#sub dbTimingLibSetPinTimingType

sub dbTimingLibGetPinTimingType {
my ($self,$pin,$rpin,$cond)  = @_;
my $timing_type = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{TTYPE};
return($timing_type);
}#sub dbTimingLibGetPinTimingType

#-----------------------------------------#
sub dbTimingLibSetPinTimingSense {
my ($self,$pin,$rpin,$cond,$timing_sense)  = @_;
   ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{TSENSE} = $timing_sense;
}#sub dbTimingLibSetPinTimingSense

sub dbTimingLibGetPinTimingSense {
my ($self,$pin,$rpin,$cond)  = @_;
my $timing_sense = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{TSENSE};
return($timing_sense);
}#sub dbTimingLibGetPinTimingSense

#-----------------------------------------#
sub dbTimingLibSetPinSdfCond {
my ($self,$pin,$rpin,$cond,$sdf_cond)  = @_;
 ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{SDFCOND} = $sdf_cond;
}#sub dbTimingLibSetPinSdfCond

sub dbTimingLibGetPinSdfCond {
my ($self,$pin,$rpin,$cond)  = @_;
my $sdf_cond = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{SDFCOND};
return($sdf_cond);
}#sub dbTimingLibGetPinSdfCond

#-----------------------------------------#
sub dbTimingLibSetPinDelay {
my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;

if ( $type eq "fallDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_DELAY}},@Ddata); 
                           }
elsif ( $type eq "riseDelay"){ push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_DELAY}},@Ddata); 
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinDelay

sub dbTimingLibGetPinDelay {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my @data = ();
if ( $type eq "fallDelay") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_DELAY}}; }
if ( $type eq "riseDelay") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_DELAY}}; }
return(@data);
}#sub sub dbTimingLibGetPinDelay

#sub dbTimingLibSetPinDelay {
#my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;
#my $ra = [];
#foreach $data ( @Ddata ) { push (@{$ra}, $data ) };
#
#if ( $type eq "fallDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallD}},$ra); 
#push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}},$cond);
#                           }
#elsif ( $type eq "riseDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseD}},$ra); 
#push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}},$cond);
#                              }
#else {print "WARN : 001 unknown delay type\n";}
#}#sub dbTimingLibSetPinDelay
#
#sub dbTimingLibGetPinDelay {
#my ($self,$pin,$rpin,$cond_count,$type)  = @_;
#my $ra;
#if ( $type eq "fallDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallD}}[$cond_count]; }
#if ( $type eq "riseDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseD}}[$cond_count]; }
#my @data = @{$ra};
#return(@data);
#}#sub sub dbTimingLibGetPinDelay
#
#sub dbgTimingLibGetPinDelay {
#my ($self,$pin,$rpin,$cond,$type)  = @_;
#if ( $type eq "fallDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallD}}[$cond]; }
#elsif ( $type eq "riseDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseD}}[$cond]; }
#my @data = @{$ra};
#foreach (@data) { print "$_\n"; }
#}#sub sub dbgTimingLibGetPinDelay

#-----------------------------------------#
sub dbTimingLibSetPinSetupCons {
my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };

if ( $type eq "fallConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallC_setup}},$ra); 
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}},$cond);
                           }
elsif ( $type eq "riseConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseC_setup}},$ra); 
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}},$cond);
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinSetupCons

sub dbTimingLibGetPinSetupCons {
my ($self,$pin,$rpin,$cond,$type)  = @_;
if ( $type eq "fallConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallC_setup}}[$cond]; }
if ( $type eq "riseConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseC_setup}}[$cond]; }
my @data = @{$ra};
return(@data);
}#sub dbTimingLibGetPinSetupCons

#-----------------------------------------#
sub dbTimingLibSetPinHoldCons {
my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };

if ( $type eq "fallConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallC_hold}},$ra); 
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}},$cond);
                           }
elsif ( $type eq "riseConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseC_hold}},$ra); 
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}},$cond);
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinHoldCons

sub dbTimingLibGetPinHoldCons {
my ($self,$pin,$rpin,$cond,$type)  = @_;
if ( $type eq "fallConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallC_hold}}[$cond]; }
if ( $type eq "riseConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseC_hold}}[$cond]; }
my @data = @{$ra};
return(@data);
}#sub dbTimingLibGetPinHoldCons

#-----------------------------------------#

sub dbTimingLibSetPinTran {
my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };

if ( $type eq "fallTran") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallT}},$ra);
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FCOND}},$cond);
                           }
elsif ( $type eq "riseTran") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseT}},$ra);
push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RCOND}},$cond);
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinTran


sub dbTimingLibGetPinTran {
my ($self,$pin,$rpin,$cond,$type)  = @_;
if ( $type eq "fallTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallT}}[$cond]; }
if ( $type eq "riseTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseT}}[$cond]; }
my @data = @{$ra};
return(@data);
}#sub sub dbTimingLibGetPinTran

sub dbgTimingLibGetPinTran {
my ($self,$pin,$rpin,$cond,$type)  = @_;
if ( $type eq "fallTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallT}}[$cond]; }
elsif ( $type eq "riseTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseT}}[$cond]; }
my @data = @{$ra};
foreach (@data) { print "$_\n"; }
}#sub sub dbgTimingLibGetPinTran
#-----------------------------------------#


sub dbTimingLibSetPinDelayIndex {
my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;

if ( $type eq "fallDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_DELAY_INDEX}},$index,@Ddata);
                           }
elsif ( $type eq "riseDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_DELAY_INDEX}},$index,@Ddata);
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinDelayIndex


sub dbTimingLibGetPinDelayIndex {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my @data = ();
if ( $type eq "fallDelay") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_DELAY_INDEX}};}
if ( $type eq "riseDelay") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_DELAY_INDEX}}}; 

return(@data);
}#sub dbTimingLibGetPinDelayIndex

#sub dbTimingLibSetPinDelayIndex {
#my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;
#my $ra = [];
#foreach $data ( @Ddata ) { push (@{$ra}, $data ) };
#
#if ( $type eq "fallDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex}},$ra);
#			     ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex_name} = $index;
#                           }
#elsif ( $type eq "riseDelay") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex}},$ra);
#			     ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex_name} = $index;
#                              }
#else {print "WARN : 001 unknown delay type\n";}
#}#sub dbTimingLibSetPinDelayIndex
#
#
#sub dbTimingLibGetPinDelayIndex {
#my ($self,$pin,$rpin,$cond_count,$type)  = @_;
#my $index;
#my $ra;
#if ( $type eq "fallDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex}}[$cond_count];
#			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex_name} ;}
#if ( $type eq "riseDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex}}[$cond_count]; 
#			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex_name} ;}
#my @data = @{$ra};
#return($index,@data);
#}# sub dbTimingLibGetPinDelayIndex
#
#sub dbgTimingLibGetPinDelayIndex {
#my ($self,$pin,$rpin,$cond,$type)  = @_;
#if ( $type eq "fallDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex}}[$cond];
#			   my $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallDlyInDex_name} ;}
#if ( $type eq "riseDelay") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex}}[$cond]; 
#			   my $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseDlyInDex_name} ;}
#my @data = @{$ra};
#foreach (@data) { print "$_\n"; }
#}# sub dbgTimingLibGetPinDelayIndex
#-----------------------------------------#

sub dbTimingLibSetPinTranIndex {
my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };
if ( $type eq "fallTran") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex_name} = $index;
                           }
elsif ( $type eq "riseTran") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex_name} = $index;
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinTranIndex


sub dbTimingLibGetPinTranIndex {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my $index;
if ( $type eq "fallTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex_name} ;}
elsif ( $type eq "riseTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex_name} ;	}
my @data = @{$ra};
return($index,@data);
}# sub dbTimingLibGetPinTranIndex

sub dbgTimingLibGetPinTranIndex {
my ($self,$pin,$rpin,$cond,$type)  = @_;
if ( $type eq "fallTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex}}[$cond]; 
			   my $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallTranInDex_name} ;}
elsif ( $type eq "riseTran") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex}}[$cond]; 
			   my $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseTranInDex_name} ;	}
my @data = @{$ra};
return($index,@data);
foreach (@data) { print "$_\n"; }
}# sub dbgTimingLibGetPinTranIndex

#-------------------------------------------------------------------------------#
sub dbTimingLibSetPinSetupConsIndex {
my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };
if ( $type eq "fallConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_setup}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_name_setup} = $index;
                           }
elsif ( $type eq "riseConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_setup}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_name_setup} = $index;
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinSetupConsIndex


sub dbTimingLibGetPinSetupConsIndex {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my $index;
if ( $type eq "fallConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_setup}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_name_setup} ;}
elsif ( $type eq "riseConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_setup}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_name_setup} ;	}
my @data = @{$ra};
return($index,@data);
}# sub dbTimingLibSetPinGetupConsIndex
#-------------------------------------------------------------------------------#
sub dbTimingLibSetPinHoldConsIndex {
my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;
my $ra = [];
foreach $data ( @Ddata ) { push (@{$ra}, $data ) };
if ( $type eq "fallConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_hold}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_name_hold} = $index;
                           }
elsif ( $type eq "riseConstraint") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_hold}},$ra);
			  ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_name_hold} = $index;
                              }
else {print "WARN : 001 unknown delay type\n";}
}#sub dbTimingLibSetPinHoldConsIndex


sub dbTimingLibGetPinHoldConsIndex {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my $index;
if ( $type eq "fallConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_hold}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{FallConsInDex_name_hold} ;}
elsif ( $type eq "riseConstraint") { $ra = ${${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_hold}}[$cond]; 
			   $index = ${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RiseConsInDex_name_hold} ;	}
my @data = @{$ra};
return($index,@data);
}# sub dbTimingLibSetPinGetupConsIndex

sub dbTimingLibSetCellName {
my ($self,$name) = @_;
$self->{CELL_NAME} = $name;
}#sub dbTimingLibSetCellName

sub dbTimingLibGetCellName {
my ($self) = @_;
my $name = $self->{CELL_NAME};
return($name);
}#sub dbTimingLibGetCellName
#-------------------------------------------------------------------------------#
sub dbTimingLibSetCellArea {
my ($self,$area) = @_;
$self->{AREA} = $area;
}#sub dbTimingLibSetCellArea
#-------------------------------------------------------------------------------#
sub dbTimingLibGetCellArea {
my ($self) = @_;
my $area = $self->{AREA};
return($area);
}#sub dbTimingLibGetCellArea
#-------------------------------------------------------------------------------#
sub dbTimingLibSetCellFootPrint{
my ($self,$cell_footprint) = @_;
$self->{CELL_FOOTPRINT} = $cell_footprint;
}#sub dbTimingLibSetCellFootPrint 
#-------------------------------------------------------------------------------#
sub dbTimingLibGetCellFootPrint{
my ($self) = @_;
my $cell_footprint = $self->{CELL_FOOTPRINT};
return($cell_footprint);
}#sub dbTimingLibGetCellFootPrint
#---------------------------------function of internal power--------------------#
sub dbTimingLibSetPinPower {
my ($self,$pin,$rpin,$cond,$type,@Ddata)  = @_;
if ( $type eq "fallPower") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_POWER}},@Ddata);} 
elsif ( $type eq "risePower"){ push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_POWER}},@Ddata);} 
else {print "WARN : 001 unknown power\n";}
}#sub dbTimingLibSetPinPower

sub dbTimingLibGetPinPower {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my @data = ();
if ( $type eq "fallPower") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_POWER}}; }
if ( $type eq "risePower") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_POWER}}; }
return(@data);
}#sub dbTimingLibGetPinPower

#-------------------------------------------------------------------------------#
sub dbTimingLibSetPinIndexPower {
my ($self,$pin,$rpin,$cond,$type,$index,@Ddata)  = @_;
if ( $type eq "fallPower") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_POWER_INDEX}},$index,@Ddata);}    elsif ( $type eq "risePower") { push(@{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_POWER_INDEX}},$index,@Ddata);}
else {print "WARN : 001 unknown power\n";}
}#sub dbTimingLibSetPinIndexPower


sub dbTimingLibGetPinIndexPower {
my ($self,$pin,$rpin,$cond,$type)  = @_;
my @data = ();
if ( $type eq "fallPower") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{FALL_POWER_INDEX}};}
if ( $type eq "risePower") { @data = @{${$self->{PINS}}{$pin}->{RPINS}{$rpin}->{RPINS_COND}{$cond}->{RISE_POWER_INDEX}}}; 
return(@data);
}#sub dbTimingLibGetPinIndexPower
#-------------------------------------------------------------------------------#



1;
