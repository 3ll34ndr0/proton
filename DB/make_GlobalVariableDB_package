package Global;
                                                                                                                       
## explanation of the packages
## SCH defines the Std cell row height of the partition
## DBU  defines the Database unit for the eqator system
## KBF defines the knowledgebase fields
## KBFO defines the Knowledgebase fields ordering
## InitializeDB defines database table designStat is created or not
## pin_layer is routing layer name to be written in router input file
                                                                                                                       
sub new {
my $design = {
                    SCH => -1,
                    DBU => 2000,
                    u2db => 0,
                    db2u => 0,
                    micron2gui => 0,
                    gui2micron => 0,
                    db2gui => 0,
                    gui2db => 0,
                    T => 1,
                    C => 1,
                    R => 1,
                    Version => "UND",
                    uF => 1,
                    GUI => 0,
                    KBFO => [],
                    ANLS_Z => 1,
                    HC => 1,
                    VC => 1,
                    TOP => "UND",
                    InitializeDB => "0",
                    map_seed => 0,
                    del_tmp_placer_files => 1,
                    spacing => "",
                    gridsize => "",
                    maxfilledPercent => "",
                    align_X => 0,
                    QA_notOASYS => 0,
                    MaxFanoutLimit => 100,
                    KeepPlcFiles => 0,
                    MaxFlplanID => 0,
                    HROUTE => 0,
                    AREA =>0,
                    REDO_UNDO_COUNT =>0, 
                    HIER_LEVELS =>0,
                    MIN_INSTANCE =>100,
                    MAX_INSTANCE =>10000,
                    IS_FLATTEN_SELECTIVELY =>0,
                    P2P_ROUTER_STATUS =>0,
                    MIN_LEAF_INST_PLACEMENT =>-1,
                    MIN_HIER_INST_PLACEMENT =>-1,
                    MIN_INST_PLACEMENT =>-1,
                    CANVAS => "design_canvas",  
                    LIB_TAB => "tech",  
                    ANALYSIS_TAB => "Analysis",  
                    DESIGN_STAT_TAB => "netStat",  
                    GDS_FACTOR =>1,   
                    XY_REF => [],
                    BUF_FOR_ASSIGN => "",
                    BUF_FOR_ASSIGN_IN => "",
                    BUF_FOR_ASSIGN_OUT => "",
                    BUF_FOR_ASSIGN_POWER => "",
                    BUF_FOR_ASSIGN_GND => "",
                    BUF_FOR_ASSIGN_INST => 1,
                    WRITE_ASSIGN_AS_BUFFER => 0,
                    FLPLAN_MODE => "1",
                    FLINE_MODE => "Regular",
                    CURR_CMD => "UND",
                    open_instance_pop_up => 0,
                    open_pinRect_pop_up => 0,
                    DIE_CENTRE => 0,
                    PROTON_HOME => $ENV{PROTON_HOME},
                    pin_layer => "",
                    runtime => new Benchmark,
                    FLAT_IMAGE_BBOX => [],
                    input_file_type => "netlist_verilog",
                    @fileName = (),
                    gds_display => 0,
#                    mem =>  new Proc::ProcessTable,
                    select_opening_bracket => "<",
                    select_closing_bracket => ">",
                    TOP_HIER_PATH => "",
                    RTL_FILES => [],
                    RTL_DIR => "",
                    LIB_FILES => [],
                    TECH_LEF => "",
                    LEF_FILES => [],
                    V_MODELS => [],
                    CORE_BBOX => [],
                    };
bless $design, 'Global';
return $design;
}#sub new


#-----------------------------------------------#
sub dbfGlobalSetFlplanMode {
my ($self, $i) = @_;
$self->{FLPLAN_MODE} = $i;
print "DB-MSG : set the floorplan mode to $i\n";
}#sub dbfGlobalSetFlplanMode

sub dbfGlobalGetFlplanMode {
my ($self) = @_;
my $i = $self->{FLPLAN_MODE};
return($i);
}#sub dbfGlobalGetFlplanMode


#-----------------------------------------------#
sub dbfGlobalSetKeepTempFiles {
my ($self, $i) = @_;
$self->{KeepPlcFiles} = $i;
print "DB-MSG : set the keepTempFile flag to $i\n";
}#sub dbfGlobalSetKeepTempFiles

sub dbfGlobalGetKeepTempFiles {
my ($self) = @_;
my $i = $self->{KeepPlcFiles};
return($i);
}#sub dbfGlobalGetKeepTempFiles

#-----------------------------------------------#
sub dbfGlobalSetFanoutLimit {
my ($self, $i) = @_;
$self->{MaxFanoutLimit} = $i;
}#sub dbfGlobalSetFanoutLimit

sub dbfGlobalGetFanoutLimit {
my ($self) = @_;
my $i = $self->{MaxFanoutLimit};
return($i);
}#sub dbfGlobalGetFanoutLimit

#-----------------------------------------------#

sub dbfGlobalSetTOP {
my ($self, $top) = @_;
$self->{TOP} = $top;
}#sub dbfGlobalSetTOP

sub dbfGlobalGetTOP {
my ($self) = @_;
my $top = $self->{TOP};
return($top);
}#sub dbfGlobalGetTOP
#-----------------------------------------------#



#----------------------------------------------#
sub dbGlobalSetHorCapacity {
my ($self, $hc) = @_;
$self->{HC} =  $hc;
}# sub dbGlobalSetHorCapacity

sub dbGlobalGetHorCapacity {
my ($self) = @_;
my $hc = $self->{HC};
return($hc);
}# sub dbGlobalGetHorCapacity

#----------------------------------------------#
sub dbGlobalSetVerCapacity {
my ($self, $vc) = @_;
$self->{VC} =  $vc;
}# sub dbGlobalSetVerCapacity

sub dbGlobalGetVerCapacity {
my ($self) = @_;
my $vc = $self->{VC};
return($vc);
}# sub dbGlobalGetVerCapacity

#----------------------------------------------#
sub dbGlobalSetAnlsScale {
my ($self, $scale) = @_;
$self->{ANLS_Z} =  $scale;
}# sub dbGlobalSetAnlsScale

sub dbGlobalGetAnlsScale {
my ($self) = @_;
my $scale = $self->{ANLS_Z};
return($scale);
}# sub dbGlobalGetAnlsScale


#----------------------------------------------#
sub dbGlobalSetKbfo {
my ($self, @order) = @_;
while ( defined (shift @{$self->{KBFO}} ) ) { }
#print join ", ", @order ;
while (defined ($o = shift @order ) ) { push(@{$self->{KBFO}}, $o); }
}# sub dbGlobalSetKbfo

sub dbGlobalGetKbfo {
my ($self) = @_;
my @order = @{$self->{KBFO}};
return(@order);
}# sub dbGlobalGetKbfo

#----------------------------------------------#
sub dbGlobalSetGuiStatus {
my ($self, $gui) = @_;
   $self->{GUI} = $gui;
}#sub dbGlobalSetGuiStatus


sub dbGlobalGetGuiStatus {
my ($self) = @_;
   my $gui = $self->{GUI};
return($gui);
}#sub dbGlobalGetGuiStatus


#----------------------------------------------#
sub dbGlobalSetMicronFactor {
my ($self, $uf) = @_;
   $self->{uF} = $uf;
}#sub dbGlobalSetMicronFactor


sub dbGlobalGetMicronFactor {
my ($self) = @_;
   my $uf = $self->{uF};
return($uf);
}#sub dbGlobalGetMicronFactor

#-----------------------------------------------#
sub dbGlobalSetRowHeight {
my ($self, $height) = @_;
   $self->{SCH} = $height;
}#sub dbGlobalSetRowHeight


sub dbGlobalGetRowHeight {
my ($self) = @_;
   my $height = $self->{SCH};
return($height);
}#sub dbGlobalGetRowHeight

#-----------------------------------------------#

sub dbfGlobalSetVersion {
my ($self, $ver) = @_;
${$self->{Version}} = $ver;
}#sub dbfGlobalSetVersion

sub dbfGlobalGetVersion {
my ($self) = @_;
my $ver = ${$self->{Version}};
return($ver);
}#sub dbfGlobalGetVersion
#-----------------------------------------------#

sub dbfGlobalSetDBU {
my ($self, $ver) = @_;
$self->{DBU} = $ver;
}#sub dbfGlobalSetDBU

sub dbfGlobalGetDBU {
my ($self) = @_;
my $ver = $self->{DBU};
return($ver);
}#sub dbfGlobalGetDBU
#-----------------------------------------------#

sub dbfGlobalSetGui2micron {
my ($self, $ver) = @_;
$self->{gui2micron} = $ver;
}#sub dbfGlobalSetGui2micron

sub dbfGlobalGetGui2micron {
my ($self) = @_;
my $ver = $self->{gui2micron};
return($ver);
}#sub dbfGlobalGetGui2micron

sub dbfGlobalSetMicron2Gui {
my ($self, $ver) = @_;
$self->{micron2gui} = $ver;
}#sub dbfGlobalSetMicron2Gui

sub dbfGlobalGetMicron2Gui {
my ($self) = @_;
my $ver = $self->{micron2gui};
return($ver);
}#sub dbfGlobalGetMicron2Gui
#-----------------------------------------------#

sub dbfGlobalSetDb2Micron {
my ($self, $ver) = @_;
$self->{DBU} = $ver;
}#sub dbfGlobalSetDb2Micron

sub dbfGlobalGetMicron2Db {
my ($self) = @_;
my $ver = $self->{DBU};
return($ver);
}#sub dbfGlobalGetMicron2Db
#-----------------------------------------------#

sub dbfGlobalSetGui2Db {
my ($self, $ver) = @_;
$self->{gui2db} = $ver;
}#sub dbfGlobalSetGui2Db

sub dbfGlobalSetDb2Gui {
my ($self, $ver) = @_;
$self->{db2gui} = $ver;
}#sub dbfGlobalSetDb2Gui

sub dbfGlobalGetGui2Db {
my ($self) = @_;
my $ver = $self->{gui2db};
return($ver);
}#sub dbfGlobalGetGui2Db

sub dbfGlobalGetDb2Gui {
my ($self) = @_;
my $ver = $self->{db2gui};
return($ver);
}#sub dbfGlobalGetDb2Gui


#-----------------------------------------------#

sub dbfGlobalSetInitializeDB {
my ($self, $ver) = @_;
$self->{InitializeDB} = $ver;
}#sub dbfGlobalSetInitializeDB

sub dbfGlobalGetInitializeDB {
my ($self) = @_;
my $ver = $self->{InitializeDB};
return($ver);
}#sub dbfGlobalGetInitializeDB

#-----------------------------------------------#
sub dbfGlobalSetMapSeed {
my ($self,$ver) = @_;
$self->{map_seed} = $ver;
}#sub dbfGlobalSetMapSeed

sub dbfGlobalGetMapSeed {
my ($self) = @_;
my $is_map_seed = $self->{map_seed};
return($is_map_seed);
}#sub dbfGlobalGetMapSeed
#-----------------------------------------------#
#-----------------------------------------------#
sub dbfGlobalSetDelTmpPlacerFiles {
my ($self,$ver) = @_;
$self->{del_tmp_placer_files} = $ver;
}#sub dbfGlobalSetDelTmpPlacerFiles

sub dbfGlobalGetDelTmpPlacerFiles {
my ($self) = @_;
my $is_map_seed = $self->{del_tmp_placer_files};
return($is_map_seed);
}#sub dbfGlobalGetDelTmpPlacerFiles
#-----------------------------------------------#
sub dbfGlobalSetDesSpacing {
my ($self,$sp) = @_;
$self->{spacing} = $sp;
}#sub dbfGlobalSetDesSpacing

sub dbfGlobalGetDesSpacing {
my ($self) = @_;
my $sp = $self->{spacing};
return($sp);
}#sub dbfGlobalGetDesSpacing
#-----------------------------------------------#
sub dbfGlobalSetGridSize{
my ($self,$grid) = @_;
$self->{gridsize} = $grid;
}#sub dbfGlobalSetGridSize

sub dbfGlobalGetGridSize{
my ($self) = @_;
my $grid = $self->{gridsize};
return($grid);
}#sub dbfGlobalGetGridSize
#-----------------------------------------------#
sub dbfGlobalSetMaxFilledPercent {
my ($self,$max) =@_;
$self->{maxfilledPercent} = $max;
}#sub dbfGlobalSetMaxFilledPercent

sub dbfGlobalGetMaxFilledPercent {
my ($self) =@_;
my $max=$self->{maxfilledPercent};
return($max);
}#sub dbfGlobalGetMaxFilledPercent  
#----------------------------------------------#
sub dbfGlobalSetAlignX{
my ($self,$alignX) =@_;
$self->{align_X} = $alignX;
}#sub dbfGlobalSetAlignX

sub dbfGlobalGetAlignX{
my ($self) = @_;
my $alignX = $self->{align_X};
return($alignX);
}#sub dbfGlobalGetAlignX
#----------------------------------------------# 

sub dbGlobalSetQA_notOASYS {
my ($self, $QAnotOASYS) = @_;
$self->{QAnotOASYS} =  $QAnotOASYS;
}# sub dbGlobalSetQA_notOASYS

sub dbGlobalGetQA_notOASYS {
my ($self) = @_;
my $QAnotOASYS = $self->{QAnotOASYS};
return($QAnotOASYS);
}# sub dbGlobalGetQA_notOASYS

#----------------------------------------------#
sub dbfGlobalSetMaxFlplanID {
my ($self,$flplanId) = @_;
$self->{MaxFlplanID} = $flplanId;
}#sub dbfGlobalSetMaxFlplanID
#----------------------------------------------#
sub dbfGlobalGetMaxFlplanID {
my ($self) = @_;
my $flplanId = $self->{MaxFlplanID};
return($flplanId);
}#sub dbfGlobalGetMaxFlplanID
#----------------------------------------------#
sub dbfGlobalGetNextFlplanID {
my ($self) = @_;
$self->{MaxFlplanID} += 1;
return $self->{MaxFlplanID};
}# sub dbfGlobalGetNextFlplanID
#----------------------------------------------# 
sub dbGlobalSetHRouterStatus {
my ($self, $route) = @_;
   $self->{HROUTE} = $route;
}#sub dbGlobalSetHRouterStatus

#----------------------------------------------# 

sub dbGlobalGetHRouterStatus{
my ($self) = @_;
   my $route = $self->{HROUTE};
return($route);
}#sub dbGlobalGetHRouterStatus

#----------------------------------------------# 
sub dbGlobalSetVerilogArea {
my ($self, $area) = @_;
   $self->{AREA} = $area;
}#sub dbGlobalSetVerilogArea

#----------------------------------------------# 

sub dbGlobalGetVerilogArea{
my ($self) = @_;
   my $area = $self->{AREA};
return($area);
}#sub dbGlobalGetVerilogArea
#----------------------------------------------# 

sub dbGlobalSetRedoUndoCount {
my ($self, $count) = @_;
   $self->{REDO_UNDO_COUNT} = $count;
}#sub dbGlobalSetRedoUndoCount

#----------------------------------------------# 

sub dbGlobalGetRedoUndoCount{
my ($self) = @_;
my $count = $self->{REDO_UNDO_COUNT};
return($count);
}#sub dbGlobalGetRedoUndoCount
#----------------------------------------------# 

sub dbGlobalSetHierLevel {
my ($self, $count) = @_;
   $self->{HIER_LEVELS} = $count;
}#sub dbGlobalSetHierLevel

#----------------------------------------------# 

sub dbGlobalGetHierLevel{
my ($self) = @_;
my $count = $self->{HIER_LEVELS};
return($count);
}#sub dbGlobalGetHierLevel
#----------------------------------------------# 

sub dbGlobalSetMinInstance {
my ($self, $count) = @_;
   $self->{MIN_INSTANCE} = $count;
}#sub dbGlobalSetMinInstance

#----------------------------------------------# 

sub dbGlobalGetMinInstance {
my ($self) = @_;
my $count = $self->{MIN_INSTANCE};
return($count);
}#sub dbGlobalGetHierLevel
#----------------------------------------------# 

sub dbGlobalSetMaxInstance {
my ($self, $count) = @_;
   $self->{MAX_INSTANCE} = $count;
}#sub dbGlobalSetMaxInstance

#----------------------------------------------# 

sub dbGlobalGetMaxInstance {
my ($self) = @_;
my $count = $self->{MAX_INSTANCE};
return($count);
}#sub dbGlobalGetHierLevel
#----------------------------------------------# 

sub dbGlobalSetFlattenSelectively {
my ($self,$count) = @_;
   $self->{IS_FLATTEN_SELECTIVELY} = $count;
}#sub dbGlobalSetFlattenSelectively

#----------------------------------------------# 

sub dbGlobalGetFlattenSelectively {
my ($self) = @_;
my $count = $self->{IS_FLATTEN_SELECTIVELY};
return($count);
}#sub dbGlobalGetHierLevel

#----------------------------------------------# 

sub dbGlobalSetP2pRouterStatus {
my ($self,$count) = @_;
   $self->{P2P_ROUTER_STATUS} = $count;
}#sub dbGlobalSetP2pRouterStatus

#----------------------------------------------# 

sub dbGlobalGetP2pRouterStatus {
my ($self) = @_;
my $count = $self->{P2P_ROUTER_STATUS};
return($count);
}#sub dbGlobalGetP2pRouterStatus

#----------------------------------------------# 

sub dbGlobalSetMinLeafInstForPlacement {
my ($self, $count) = @_;
   $self->{MIN_LEAF_INST_PLACEMENT} = $count;
}#sub dbGlobalSetMinLeafInstForPlacement

#----------------------------------------------# 

sub dbGlobalGetMinLeafInstForPlacement {
my ($self) = @_;
my $count = $self->{MIN_LEAF_INST_PLACEMENT};
return($count);
}#sub dbGlobalGetMinLeafInstForPlacement
#----------------------------------------------# 

sub dbGlobalSetMinHierInstForPlacement {
my ($self, $count) = @_;
   $self->{MIN_HIER_INST_PLACEMENT} = $count;
}#sub dbGlobalSetMinHierInstForPlacement

#----------------------------------------------# 

sub dbGlobalGetMinHierInstForPlacement {
my ($self) = @_;
my $count = $self->{MIN_HIER_INST_PLACEMENT};
return($count);
}#sub dbGlobalGetMinHierInstForPlacement
#----------------------------------------------# 

sub dbGlobalSetMinInstForPlacement {
my ($self, $count) = @_;
   $self->{MIN_INST_PLACEMENT} = $count;
}#sub dbGlobalSetMinInstForPlacement

#----------------------------------------------# 

sub dbGlobalGetMinInstForPlacement {
my ($self) = @_;
my $count = $self->{MIN_INST_PLACEMENT};
return($count);
}#sub dbGlobalGetMinInstForPlacement
#----------------------------------------------# 
sub dbGlobalSetActiveCanvas {
my ($self, $canvas) = @_;
   $self->{CANVAS} = $canvas;
}#sub dbGlobalSetActiveCanvas

#----------------------------------------------# 

sub dbGlobalGetActiveCanvas {
my ($self) = @_;
my $canvas = $self->{CANVAS};
return($canvas);
}#sub dbGlobalGetActiveCanvas
#----------------------------------------------# 
sub dbGlobalSetActiveLibraryTab {
my ($self, $tab) = @_;
   $self->{LIB_TAB} = $tab;
}#sub dbGlobalSetActiveLibraryTab

#----------------------------------------------# 

sub dbGlobalGetActiveLibraryTab {
my ($self) = @_;
my $tab = $self->{LIB_TAB};
return($tab);
}#sub dbGlobalGetActiveLibraryTab

#----------------------------------------------#
sub dbGlobalSetActiveAnalysisTab {
my ($self, $tab) = @_;
   $self->{ANALYSIS_TAB} = $tab;
}#sub dbGlobalSetActiveAnalysisTab

#----------------------------------------------# 
sub dbGlobalGetActiveAnalysisTab {
my ($self) = @_;
my $tab = $self->{ANALYSIS_TAB};
return($tab);
}#sub dbGlobalGetActiveAnalysisTab

#----------------------------------------------#
sub dbGlobalSetActiveDesignStatTab {
my ($self, $tab) = @_;
   $self->{DESIGN_STAT_TAB} = $tab;
}#sub dbGlobalSetActiveDesignStatTab

#----------------------------------------------# 
sub dbGlobalGetActiveDesignStatTab {
my ($self) = @_;
my $tab = $self->{DESIGN_STAT_TAB};
return($tab);
}#sub dbGlobalGetActiveDesignStatTab

#----------------------------------------------#

sub dbGlobalSetGdsDisplayFactor {
my ($self, $fact) = @_;
   $self->{GDS_FACTOR} = $fact;
}#sub dbGlobalSetGdsDisplayFactor
#----------------------------------------------# 
sub dbGlobalGetGdsDisplayFactor {
my ($self) = @_;
my $fact = $self->{GDS_FACTOR};
return($fact);
}#sub dbGlobalGetGdsDisplayFactor
#----------------------------------------------# 
sub dbGlobalSetGdsXYref{
my ($self, $x,$y) = @_;
   @{$self->{XY_REF}} = ($x,$y);
}#sub dbGlobalSetGdsXYref
#----------------------------------------------# 

sub dbGlobalGetGdsXYref{
my ($self) = @_;
my ($x,$y) = @{$self->{XY_REF}};
return($x,$y);
}#sub dbGlobalGetGdsXYref
#----------------------------------------------# 

#-----------------------------------------------#

sub dbfGlobalSetBufForAssign {
my ($self, $buf_for_assign) = @_;
$self->{BUF_FOR_ASSIGN} = $buf_for_assign;
}#sub dbfGlobalSetBufForAssign

sub dbfGlobalGetBufForAssign {
my ($self) = @_;
my $buf_for_assign = $self->{BUF_FOR_ASSIGN};
return($buf_for_assign);
}#sub dbfGlobalGetBufForAssign
#-----------------------------------------------#

#-----------------------------------------------#
sub dbfGlobalSetBufForAssignIn {
my ($self, $buf_for_assign_in) = @_;
$self->{BUF_FOR_ASSIGN_IN} = $buf_for_assign_in;
}#sub dbfGlobalSetBufForAssignIn

sub dbfGlobalGetBufForAssignIn {
my ($self) = @_;
my $buf_for_assign_in = $self->{BUF_FOR_ASSIGN_IN};
return($buf_for_assign_in);
}#sub dbfGlobalGetBufForAssignIn
#-----------------------------------------------#

#-----------------------------------------------#
sub dbfGlobalSetBufForAssignOut {
my ($self, $buf_for_assign_out) = @_;
$self->{BUF_FOR_ASSIGN_OUT} = $buf_for_assign_out;
}#sub dbfGlobalSetBufForAssignOut

sub dbfGlobalGetBufForAssignOut {
my ($self) = @_;
my $buf_for_assign_out = $self->{BUF_FOR_ASSIGN_OUT};
return($buf_for_assign_out);
}#sub dbfGlobalGetBufForAssignOut
#-----------------------------------------------#

#-----------------------------------------------#
sub dbfGlobalSetBufForAssignPower {
my ($self, $buf_for_assign_power) = @_;
$self->{BUF_FOR_ASSIGN_POWER} = $buf_for_assign_power;
}#sub dbfGlobalSetBufForAssignPower

sub dbfGlobalGetBufForAssignPower {
my ($self) = @_;
my $buf_for_assign_power = $self->{BUF_FOR_ASSIGN_POWER};
return($buf_for_assign_power);
}#sub dbfGlobalGetBufForAssignPower
#-----------------------------------------------#

#-----------------------------------------------#
sub dbfGlobalSetBufForAssignGnd {
my ($self, $buf_for_assign_gnd) = @_;
$self->{BUF_FOR_ASSIGN_GND} = $buf_for_assign_gnd;
}#sub dbfGlobalSetBufForAssignGnd

sub dbfGlobalGetBufForAssignGnd {
my ($self) = @_;
my $buf_for_assign_gnd = $self->{BUF_FOR_ASSIGN_GND};
return($buf_for_assign_gnd);
}#sub dbfGlobalGetBufForAssignGnd
#-----------------------------------------------#
sub dbfGlobalAddBufForAssignInstance {
my($self,$inst) = @_;
${$self->{BUF_FOR_ASSIGN_INST}}{$inst} = 1;
}#sub dbfGlobalAddBufForAssignInstance
#-----------------------------------------------#
sub dbfGlobalCheckAssignInstance {
my ($self,$inst) = @_;
if(exists ${$self->{BUF_FOR_ASSIGN_INST}}{$inst}){
return(1);
}else {
return(0);
}
}#sub dbfGlobalCheckAssignInstance
#-----------------------------------------------#
sub dbfGlobalSetWriteAssignAsBuffer {
my ($self, $write_assign_as_buffer) = @_;
$self->{WRITE_ASSIGN_AS_BUFFER} = $write_assign_as_buffer;
}#sub dbfGlobalSetWriteAssignAsBuffer

sub dbfGlobalGetWriteAssignAsBuffer {
my ($self) = @_;
my $write_assign_as_buffer = $self->{WRITE_ASSIGN_AS_BUFFER};
return($write_assign_as_buffer);
}#sub dbfGlobalGetWriteAssignAsBuffer
#-----------------------------------------------#
sub dbfGlobalSetFlyLineMode {
my ($self, $i) = @_;
$self->{FLINE_MODE} = $i;
}#sub dbfGlobalSetFlyLineMode

sub dbfGlobalGetFlyLineMode {
my ($self) = @_;
my $i = $self->{FLINE_MODE};
return($i);
}#sub dbfGlobalGetFlyLineMode

#-----------------------------------------------#

sub dbfGlobalSetCurrCommand {
my ($self, $curr_cmd) = @_;
$self->{CURR_CMD} = $curr_cmd;
}#sub dbfGlobalSetCurrCommand

sub dbfGlobalGetCurrCommand {
my ($self) = @_;
my $curr_cmd = $self->{CURR_CMD};
return($curr_cmd);
}#sub dbfGlobalGetCurrCommand
#-----------------------------------------------#

sub dbfGlobalSetInstancepopup {
my ($self,$ver) = @_;
$self->{open_instance_pop_up} = $ver;
}#sub dbfGlobalSetInstancepopup


sub dbfGlobalGetInstancepopup{
my ($self) = @_;
my $is_map_seed = $self->{open_instance_pop_up};
return($is_map_seed);
}#sub dbfGlobalGetInstancepopup

#-----------------------------------------------#

sub dbfGlobalSetPinRectPopup {
my ($self,$var) = @_;
$self->{open_pinRect_pop_up} = $var;
}#sub dbfGlobalSetPinRectPopup


sub dbfGlobalGetPinRectPopup{
my ($self) = @_;
my $is_map_seed = $self->{open_pinRect_pop_up};
return($is_map_seed);
}#sub dbfGlobalGetPinRectPopup

#-----------------------------------------------#

sub dbfGlobalSetDieCentre {
my ($self,$val) = @_;
$self->{DIE_CENTRE} = $val;
}#sub dbfGlobalSetDieCentre


sub dbfGlobalGetDieCentre{
my ($self) = @_;
my $val = $self->{DIE_CENTRE};
return($val);
}#sub dbfGlobalGetDieCentre

#-----------------------------------------------#
sub dbfGlobalSetProtonHome{
my($self,$val) = @_;
$self->{PROTON_HOME} = $val;
}#sub dbfGlobalSetProtonHome

sub dbfGlobalGetProtonHome {
my ($self) = @_;
my $val = $self->{PROTON_HOME};
return($val);
}#sub dbfGlobalGetProtonHome  
#-----------------------------------------------#

sub dbfGlobalSetPinlayer {
my ($self, $ver) = @_;
$self->{pin_layer} = $ver;
}#sub dbfGlobalSetPinlayer

sub dbfGlobalGetPinlayer {
my ($self) = @_;
my $ver = $self->{pin_layer};
return($ver);
}#sub dbfGlobalGetPinlayer
#-----------------------------------------------#
sub dbfGlobalSetProtonTime {
my ($self ,$time ) = @_;
$self->{runtime} = $time;
}#sub dbfGlobalSetProtonTime
#-----------------------------------------------#
sub dbfGlobalGetProtonTime {
my ($self) = @_;
my $time = $self->{runtime};
return($time);
}#sub dbfGlobalGetProtonTime
#-----------------------------------------------#
#sub dbfGlobalSetMemory {
#my ($self,$mem) = @_;
#$self->{mem} = $mem;
#}#sub dbfGlobalSetMemory 
##-----------------------------------------------#
#sub dbfGlobalGetMemory {
#my($self) = @_;
#my $mem = "";
#my $t = $self->{mem};
#foreach my $tbl (@{$t->table}){ 
#  if($tbl->pid == $$ ){
#     $mem = $tbl->size;
#     return($mem);
#  }
#}
#}#sub dbfGlobalGetMemory
#-----------------------------------------------#
sub dbGlobalSetFlatImageBBox{
my ($self, @bbox) = @_;
   @{$self->{FLAT_IMAGE_BBOX}} = @bbox;
}#sub dbGlobalSetFlatImageBBox
#----------------------------------------------# 

sub dbGlobalGetFlatImageBBox{
my ($self) = @_;
my @bbox = @{$self->{FLAT_IMAGE_BBOX}};
return(@bbox);
}#sub dbGlobalGetFlatImageBBox
#----------------------------------------------#
sub dbfGlobalSetInputType {
my ($self, $i) = @_;
$self->{input_file_type} = $i;
}#sub dbfGlobalSetInputType 

sub dbfGlobalGetInputType {
my ($self) = @_;
my $i = $self->{input_file_type};
return($i);
}#sub dbfGlobalGetInputType
#----------------------------------------------# 
sub dbfGlobalSetFileName {
my ($self,@file_Name) = @_;
push(@{$self->{fileName}},[@file_Name]);
}#sub dbfGlobalSetFileName

sub dbfGlobalGetFileName {
my ($self) = @_;
my @file_Name = @{$self->{fileName}};
return(@file_Name);
}#sub dbfGlobalGetFileName

#----------------------------------------------#
sub dbfGlobalSetGdsDis {
my ($self, $i) = @_;
$self->{gds_display} = $i;
}#sub dbfGlobalSetGdsDis

sub dbfGlobalGetGdsDis {
my ($self) = @_;
my $i = $self->{gds_display};
return($i);
}#sub dbfGlobalGetGdsDis
#----------------------------------------------#
sub dbfGlobalSelectOpeningBracket {
my ($self,$i) = @_;
$self->{select_opening_bracket} = $i;
}#sub dbfGlobalSelectOpeningBracket

sub dbfGlobalGetOpeningBracket {
my ($self) = @_;
my $i = $self->{select_opening_bracket};
return($i);
}#sub dbfGlobalGetOpeningBracket
#----------------------------------------------#
sub dbfGlobalSelectClosingBracket {
my ($self,$i) = @_;
$self->{select_closing_bracket} = $i;
}#sub dbfGlobalSelectClosingBracket

sub dbfGlobalGetClosingBracket {
my($self) = @_;
my $i = $self->{select_closing_bracket};
return($i);
}#sub dbfGlobalGetClosingBracket

#----------------------------------------------#
sub dbfGlobalSetTopHierPath {
my ($self,$i) = @_;
$self->{TOP_HIER_PATH} = $i;
}#sub dbfGlobalSetTopHierPath

sub dbfGlobalGetTopHierPath {
my($self) = @_;
my $i = $self->{TOP_HIER_PATH};
return($i);
}#sub dbfGlobalGetTopHierPath

#----------------------------------------------#
sub dbGlobalSetRtlFiles {
my ($self, @files) = @_;
while (defined ($f = shift @files ) ) { push(@{$self->{RTL_FILES}}, $f); }
}# sub dbGlobalSetRtlFiles

sub dbGlobalGetRtlFiles {
my ($self) = @_;
my @files = @{$self->{RTL_FILES}};
return(@files);
}# sub dbGlobalGetRtlFiles

#----------------------------------------------#
sub dbGlobalSetRtlDir {
my ($self,$i) = @_;
$self->{RTL_DIR} = $i;
}#sub dbGlobalSetRtlDir

sub dbGlobalGetRtlDir {
my($self) = @_;
my $i = $self->{RTL_DIR};
return($i);
}#sub dbGlobalGetRtlDir

#----------------------------------------------#
sub dbGlobalSetLibFiles {
my ($self, @files) = @_;
while (defined ($f = shift @files ) ) { push(@{$self->{LIB_FILES}}, $f); }
}# sub dbGlobalSetLibFiles

sub dbGlobalGetLibFiles {
my ($self) = @_;
my @files = @{$self->{LIB_FILES}};
return(@files);
}# sub dbGlobalGetLibFiles

#----------------------------------------------#
sub dbGlobalSetTechLef {
my ($self,$i) = @_;
$self->{TECH_LEF} = $i;
}#sub dbGlobalSetTechLef

sub dbGlobalGetTechLef {
my($self) = @_;
my $i = $self->{TECH_LEF};
return($i);
}#sub dbGlobalGetTechLef

#----------------------------------------------#
sub dbGlobalSetLefFiles {
my ($self, @files) = @_;
while (defined ($f = shift @files ) ) { push(@{$self->{LEF_FILES}}, $f); }
}# sub dbGlobalSetLefFiles

sub dbGlobalGetLefFiles {
my ($self) = @_;
my @files = @{$self->{LEF_FILES}};
return(@files);
}# sub dbGlobalGetLefFiles

#----------------------------------------------#
sub dbGlobalSetVerilogModels {
my ($self, @files) = @_;
while (defined ($f = shift @files ) ) { push(@{$self->{V_MODELS}}, $f); }
}# sub dbGlobalSetVerilogModels

sub dbGlobalGetVerilogModels {
my ($self) = @_;
my @files = @{$self->{V_MODELS}};
return(@files);
}# sub dbGlobalGetVerilogModels

#-----------------------------------------------#
sub dbGlobalSetCoreBBox{
my ($self, @bbox) = @_;
   @{$self->{CORE_BBOX}} = @bbox;
}#sub dbGlobalSetCoreBBox

sub dbGlobalGetCoreBBox{
my ($self) = @_;
my @bbox = @{$self->{CORE_BBOX}};
return(@bbox);
}#sub dbGlobalGetCoreBBox
#----------------------------------------------#


1;
