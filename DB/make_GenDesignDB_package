package GenDesignDB;

# TPS timing path staistics
# ColumnIndex : array with instance names representing columns
# RowIndex : array with instance names representing rows
# NetCount : number of nets in the design
# InstCount : number of instances in the design
# MaxInstCount : maximumNumber of instance to be achieved in the design
# MaxRow : max row num
# MaxColumn : max col num
# FFCount
# InCount
# OutCount

sub new {
my $dd = {
          TPS => {},
          ColumnIndex => [],
          RowIndex => [],
          NetCount => 0,
          InstCount => 0,
          MaxInstCount => 0,
          MaxRow => 0,
          MaxColumn => 0,
          FFCount => 0,
          InCount => 0,
          OutCount => 0,
          };
bless $dd, 'GenDesignDB';
return $dd;
}# sub new

sub dbGenDesignInit_new {
my ($self,$row,$col)  = @_;
$self->{MaxRow} = $row;
$self->{MaxColumn} = $col;
}#sub dbGenDesignInit_new

sub dbGenDesignInit {
my ($self,$row,$col)  = @_;
############# init the conn map ################
$a = [];
for( my $xx = 0; $xx < $row; $xx++ ) {
        $b = [];
        for ( my $yy = 0; $yy < $col; $yy++ ) {
        push(@{$b},0); 
                                              }
        push(@{$a},$b); 
                                     }
$self->{TPS} = $a;
############# init the row array ##############
$a = [];
for( my $xx = 0; $xx < $row; $xx++ ) {
        push(@{$a},0);
                                     }
$self->{RowIndex} = $a;

########### init the column array ############
$a = [];
for( my $xx = 0; $xx < $col; $xx++ ) {
        push(@{$a},0);
                                     }
$self->{ColumnIndex} = $a;

}#sub dbGenDesignInit

sub dbgGenDesignGetTpath {
my($self) = @_;
   for(my $xx = 0 ; $xx < $self->{MaxRow}; $xx++ ) {
      for ( my $yy = 0 ; $yy < $self->{MaxColumn}; $yy++ ) {
            my $index = $xx*$self->{MaxColumn} + $yy;
   if ( exists $self->{TPS}{$index} ) {
$val = ${$self->{TPS}{$index}};
                                      }
else { $val = 0 ; }
            print "$val ";
                                                           }# for all columns
            print "\n";
                                                   }# for all rows
}#sub dbgGenDesignGetTpath


sub dbGenDesignSetTpathVal_new {
my ($self,$row,$col,$val)  = @_;
my $temp = $self->{MaxColumn};
my $index = $row*$temp + $col;
${$self->{TPS}{$index}} = $val;
}#sub dbGenDesignSetTpathVal_new

sub dbGenDesignGetTpathVal_new {
my ($self,$row,$col)  = @_;
my $val = 0;
my $index = $row*$self->{MaxColumn} + $col;
   if ( exists $self->{TPS}{$index} ) {
$val = ${$self->{TPS}{$index}};
                                      }
else { $val = 0 ; }
return($val);
}#sub dbGenDesignGetTpathVal_new

sub dbGenDesignSetColumn {
my ($self,$col,$name)  = @_;
$self->{ColumnIndex}[$col] = $name;
}#sub dbGenDesignSetColumn

sub dbGenDesignGetColumn {
my ($self,$col)  = @_;
my $val = $self->{ColumnIndex}[$col];
return($val);
}#sub dbGenDesignGetColumn

sub dbGenDesignSetRow {
my ($self,$row,$name)  = @_;
$self->{RowIndex}[$row] = $name;
}# sub dbGenDesignSetRow

sub dbGenDesignGetRow {
my ($self,$row)  = @_;
my $val = $self->{RowIndex}[$row];
return($val);
}#sub dbGenDesignGetRow

sub dbGenDesignGetTotalFanInPaths_new {
my ($self,$row)  = @_;
my $count = 0;
my $temp = $self->{MaxColumn};
for ( my $xx = 0 ; $xx < $temp ; $xx++ ) {
      my $index = $row*$temp + $xx;
      if ( exists $self->{TPS}{$index} ) {
           my $val = ${$self->{TPS}{$index}};
           $count = $count + ${$self->{TPS}{$index}};
                                         }
                                         }# for
return($count);
}#sub dbGenDesignGetTotalFanInPaths_new



sub dbGenDesignCreateInst {
my ( $self) = @_;
my $num = $self->{InstCount};
if ( $num =~ /.*000\b/ ) { print "Added $num components\n"; }
my $instName = "nu".$num;
$self->{InstCount} = $num + 1;
return($instName);
}#sub dbGenDesignCreateInst

sub dbGenDesignCreateNet {
my ( $self) = @_;
my $num = $self->{NetCount};
my $netName = N.$num;
$self->{NetCount} = $num + 1;
return($netName);
}#sub dbGenDesignCreateNet

sub dbGenDesignGetMaxRow {
my ( $self) = @_;
my $num = $self->{MaxRow};
return($num);
}#sub dbGenDesignGetMaxRow

sub dbGenDesignGetMaxCol {
my ( $self) = @_;
my $num = $self->{MaxColumn};
return($num);
}#sub dbGenDesignGetMaxCol

1;
