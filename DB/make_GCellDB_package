use Getopt::Long qw(GetOptionsFromString);

my ($gcellSizeX, $gcellSizeY);
my ($help, $debug, $verbose);

sub make_gcellDB {
  my (@args) = @_;

  &init(@args);
  if ($help) {
    &usage();
  } else {
    &gen_gcellDB();
  } #if...else
  &finish();
} #sub make_gcellDB

sub init {
  my ($args) =  @_;
  if (!defined($args)) {
    $args = "";
  }
  my $parseResult = Getopt::Long::GetOptionsFromString($args , 
						       "gx=d"       => \$gcellSizeX,
						       "gy=d"       => \$gcellSizeY,
						       "h"          => \$help,
						       "help"       => \$help,
						       "debug"      => \$debug,
						       "verbose"    => \$verbose,
						      );
} #sub init

sub finish() {
}

########################################################################
sub gen_gcellDB {
  ## divides the chip into gcells
  ## the last row and column of gcells may be truncated

  ##my ($llx, $lly, $urx, $ury) = (0,0,2.5,2);
  my ($llx, $lly, $urx, $ury) = @{$DIE_ALREADY{dieArea}};
  my ($x, $y) = ($llx, $lly);
  my ($numX, $numY) = (0,0);
  my ($x1, $y1);

  while ($y < $ury) {
    $y1 = $y + $gcellSizeY;
    if ($y1 > $ury) {$y1 = $ury;}
    while ($x < $urx) {
      $x1 = $x + $gcellSizeX;
      if ($x1 > $urx) {$x1 = $urx;}
      $GCellArray[$numX][$numY] = new GCell;
      $GCellArray[$numX][$numY]->dbgGcellSetBBox($x,$y, $x1,$y1);
      print "Creating new Gcell [$numX][$numY] at ($x,$y) ($x1,$y1)\n" if ($debug);
      $x = $x1; $numX++;
    } #while
    $y = $y1; $numY++;
    $x = $llx; $numX = 0;
  } #while
} #sub


1;
