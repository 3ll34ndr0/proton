package NetsAttrDB;

# T : type 
#      signal = 0;
#      power  = 1;
#      ground = 2;
#      analog = 3;
#F: fanout number for a net

sub new {
my $net = {
                T => 0,
		F => 0,
		S => 0,
                    };
bless $net, 'NetsAttrDB';
return $net;
}#sub new

####################################################
sub dbNadbSetNetFanout {
my ($self,$fanout) =@_;
$self->{F}=$fanout;
}# sub dbNadbSetNetFanout

sub dbNadbGetNetFanout {
my ($self,$fanout) =@_;
 $fanout = $self->{F};
return($fanout);
}# sub dbNadbGetNetFanout

####################################################
sub dbNadbSetNetType {
my ($self,$type) =@_;
$self->{T}=$type;
}# sub dbNadbSetNetType

sub dbNadbGetNetType {
my ($self,$type) =@_;
 $type = $self->{T};
return($type);
}# sub dbNadbGetNetType

sub dbgNadbGetNetType {
my ($self) =@_;
my $type = $self->{T};
print "$type\n";
}# sub dbgNadbGetNetType

####################################################
sub dbNadbSetCompareDefState {
my ($self,$state) =@_;
$self->{S}=$state;
}# sub dbNadbSetCompareDefState

sub dbNadbGetCompareDefState {
my ($self) =@_;
my $state = $self->{S};
return($state);
}# sub dbNadbGetCompareDefState

sub dbgNadbGetCompareDefState {
my ($self) =@_;
my $state = $self->{S};
print "$state\n";
}# sub dbgNadbGetCompareDefState

1;
