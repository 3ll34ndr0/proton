package PortDB;

####  explanation of database ####
##    STATUS is status : LOCKED = 4 : PLACED = 2 : FIXED = 3 : UNPLACED = 1 : FLOATING = 0
##    D is direction
##    L is location
##    C is connection , the netName port is connected to
##    ST is signal type : 0 - ground, 1 - power, 2(default) - signal, 3 - clock,
##    SB is single or bus and if bus .. the bus number
##    M is metal layer
##    S is the pin size
##    O is orientation or side on which the pin is 
##      legal orientations of ports are N, S, E, W, C
##    STATUS : one of (3)FIXED| (2)PLACED| (1)UNPLACED| (0)FLOATING
##    T : transition
##    DrCell : Driving cell on the input port
##    LOAD : load in terms of capacitance value in pF for output ports
##    dly : timing delay from constraint
##    Clk : Timing constraint clock for specifying delays
##    NodeNum : used to identify the node in read and write graph routines
##    OrgL  : Original location of the port

sub new {
my $portInst = {
                    D => 0,
                    L => [0,0],
                    C => [],
                    ST => 2,
                    SB => 0,
                    M => 0,
                    S => [],
                    STATUS => 0,
                    STATE => 0,
                    O => "W",
                    T => -1,
		    DrCell => "UND",
                    LOAD => 0,
                    dly => 0,
		    Clk => "UND",
                    NodeNum => "UND",
                    OrgL => [],
                    };
bless $portInst, 'PortDB';
return $portInst;
}#sub new

#---------------------------------------------------------#
sub dbPortSetClk {
my ($self,$clk) = @_;
$self->{Clk} = $clk;
}#sub dbPortSetClk

sub dbPortGetClk {
my ($self) = @_;
my $clk = $self->{Clk};
return($clk);
}#sub dbPortGetClk

sub dbPortSetDrivingCell {
my ($self,$drcell) = @_;
$self->{DrCell} = $drcell;
}#sub dbPortSetDrivingCell

sub dbPortGetDrivingCell {
my ($self) = @_;
my $drcell = $self->{DrCell};
return($drcell);
}#sub dbPortGetTran

sub dbPortSetTran {
my ($self,$tran) = @_;
$self->{T} = $tran;
}#sub dbPortSetTran

sub dbPortGetTran {
my ($self) = @_;
my $tran = $self->{T};
return($tran);
}#sub dbPortGetTran

sub dbPortSetLoad {
my ($self,$load) = @_;
$self->{LOAD} = $load;
}#sub dbPortSetLoad

sub dbPortGetLoad {
my ($self) = @_;
my $load = $self->{LOAD};
return($load);
}#sub dbPortGetLoad

sub dbPortSetDelay {
my ($self,$dly) = @_;
$self->{dly} = $dly;
}#sub dbPortSetDelay

sub dbPortGetDelay {
my ($self) = @_;
my $dly = $self->{dly};
return($dly);
}#sub dbPortGetDelay


#---------------------------------------------------------#
sub dbPortSetStatus {
my ($self,$status) = @_;
if ( $status eq "FIXED" ) { $self->{STATUS} = 3; }
elsif ( $status eq "PLACED" ) { $self->{STATUS} = 2; }
elsif ( $status eq "UNPLACED" ) { $self->{STATUS} = 1; }
elsif ( $status eq "FLOATING" ) { $self->{STATUS} = 0; }
else { print "ERR : 001 : invalid status is being set on the port $self\n"; }
}#sub dbPortSetStatus

sub dbPortGetStatus {
my ($self) = @_;
my $status =  $self->{STATUS};
return($status);
}#sub dbPortGetStatus

sub dbgPortGetStatus {
my ($self) = @_;
my $status =  $self->{STATUS};
if ( $status == 3 ) { print "FIXED\n"; }
elsif ( $status == 2 ) { print "PLACED\n"; }
elsif ( $status == 1 ) { print "UNPLACED\n"; }
elsif ( $status == 0 ) { print "FLOATING\n"; }
else { print "ERR : 001 : invalid status is returned on the port $self\n"; }

}#sub dbgPortGetStatus

#-----------------------Layer-------------------------------------#
sub dbPortSetLayer {
my ($self,$z) = @_;
   $self->{M} = $z;
}# sub dbPortSetLayer

sub dbPortGetLayer {
my ($self) = @_;
my $z = $self->{M};
return($z);
}#sub dbPortGetLayer

#------------------------Side------------------------------------#

sub dbPortSetSide {
my ($self,$side) = @_;
   $self->{O} = $side; 
}# sub dbPortSetSide

#---------------------Size---------------------------------------#
sub dbPortSetSize {
my ($self,$x,$y) = @_;
   $self->{S}[0] =  $x;
   $self->{S}[1] =  $y;
}#sub dbPortSetSize

#------------------------------------------------------------#
sub dbPortSetDir {
my ($self,$dir) = @_;
    if ( $dir eq "output" || $dir eq "OUTPUT" ) { $self->{D} = 1;}
    elsif ( $dir eq "input"  || $dir eq "INPUT") { $self->{D} = 0;}
    elsif ( $dir eq "inout" || $dir eq "INOUT" ) {$self->{D} = 2; }
    else { print "WARN : unrecognised direction for port $self\n"; } 
}#sub dbPortSetDir 

sub dbPortSetConn {
my ($self,$conn) = @_;
   push(@{$self->{C}}, $conn);
}#sub dbPortSetConn

sub dbPortSetLoc {
my ($self,$x,$y) = @_;
   $self->{L}[0] =  $x;
   $self->{L}[1] =  $y;
}# sub dbPortSetLoc

sub dbPortSetSignal {
my ($self,$signal) = @_;
    if ( $signal eq "POWER" ) { $self->{ST} = 1;}
    elsif ( $signal eq "GROUND" ) { $self->{ST} = 0;}
    elsif ( $signal eq "SIGNAL" ) {$self->{ST} = 2; }
    elsif ( $signal eq "CLOCK" ) {$self->{ST} = 3; }
    else { print "WARN : unrecognised signal $signal type for port $self\n"; } 
}# sub dbPortSetSignal


sub dbPortSetBus {
my ($self,$bus) = @_;
    if ( $bus == "-1" ) { $self->{SB} = -1;}
    elsif ( $bus >= 0 ) { $self->{SB} = $bus;}
    else { print "WARN : unrecognised bus width for port $self\n"; } 
}# sub dbPortSetBus


################################ Query database ##########################
sub dbPortGetSize {
my ($self) = @_;
my @size = @{$self->{S}};
return(@size);
}#sub dbPortGetSize

sub dbgPortGetSide {
my ($self) = @_;
   my $side = $self->{O}; 
   print "$side\n";
}# sub dbgPortGetSide

sub dbPortGetSignal {
my ($self) = @_;
   my $signal = $self->{ST}; 
   if ( $signal == 1 ) { $sig = "POWER" ; }
   elsif ( $signal == 0 ) { $sig = "GROUND" ; }
   elsif ( $signal == 2 ) { $sig = "SIGNAL" ; }
   elsif ( $signal == 3 ) { $sig = "CLOCK" ; }
   else { print "WARN : unkown signal type stored in DB\n"; }
return($sig);
}# sub dbPortGetSignal

sub dbPortGetSide {
my ($self) = @_;
   my $side = $self->{O}; 
return($side);
}# sub dbPortGetSide

sub dbPortGetDir {
my ($self) = @_;
my $dir = $self->{D};
my $dirName = "";
   if( $dir == 1 ) { $dirName = "output";}
   elsif ( $dir == 0 ) { $dirName = "input"; }
   elsif ( $dir == 2 ) { $dirName = "inout";}
   else { print "WARN : unkown direction stored in DB\n"; }
return($dirName);
}# sub dbPortGetDir

sub dbPortGetConn {
my ($self) = @_;
my @connList  = @{$self->{C}};
return(@connList);
}# sub dbPortGetConn

sub dbPortGetLoc {
my ($self) = @_;
my @location  = @{$self->{L}};
my $len = @location;
if ($len <1 ) { print "WARN : 001 : location of port is not set\n"; }
return(@location);
}# sub dbPortGetLoc

sub dbgPortGetLoc {
my ($self) = @_;
my @location  = @{$self->{L}};
print join ", ", @location;
print "\n";
}# sub dbgPortGetLoc

#-----------------------------------#
sub dbPortSetNodeNum {
my ($self,$node) = @_;
    $self->{NodeNum} = $node;
}#sub dbPortSetNodeNum

sub dbPortGetNodeNum {
my ($self) = @_;
  my $node =  $self->{NodeNum};
return($node);
}#sub dbPortGetNodeNum
#-----------------------------------#

sub dbPortSetorigLoc {
my ($self,$x,$y) = @_;
   $self->{OrgL}[0] =  $x;
   $self->{OrgL}[1] =  $y;
}# sub dbPortSetorigLoc

sub dbPortGetorigLoc {
my ($self) = @_;
my @location  = @{$self->{OrgL}};
my $len = @location;
if ($len <1 ) { print "WARN : 001 : location of port is not set\n"; }
return(@location);
}# sub dbPortGetorigLoc

#-----------------------------------#
sub dbPortSetCompareDefState {
my ($self,$state) = @_;
    $self->{STATE} = $state;
}#sub dbPortSetCompareDefState

sub dbPortGetCompareDefState {
my ($self) = @_;
  my $state =  $self->{STATE};
return($state);
}#sub dbPortGetCompareDefState

#-----------------------------------#

1;
