package RTLDB_BLOCK;


sub createEmpty {
my $blk = {
          };
bless $blk, 'RTLDB_BLOCK';
return $blk;
}# sub createEmpty



sub new {
my $blkRef = {
             type => "",
             block_list => RTLDB_BLOCK::createEmpty(),
             block_seq_list => [],
             number_of_blocks => 0,
             condition => "",
             register_assign_list => [],
             condition_expression => "",
             begin_found => "0",
             };
bless $blkRef, 'RTLDB_BLOCK';
return $blkRef;
}#sub new
#-----------------------------------------------------------------------------------------------------------------------#
sub dbRTLDB_BLOCK_Add_Block {
my ($self, $blk) = @_;
my $new_block_name = "block"."_".$self->{number_of_blocks};
$self->{block_list}{$new_block_name} =  $blk;
push(@{$self->{block_seq_list}},$blk);
$self->{number_of_blocks}++;
}#sub dbRTLDB_BLOCK_Add_Block

sub dbRTLDB_BLOCK_Get_Block {
my ($self) = @_;
my @blk = @{$self->{block_seq_list}};
return(@blk);
}#sub dbRTLDB_BLOCK_Get_Block
#--------------------------------------------------------------------#
sub dbRTLDB_BLOCK_Set_BLK_Type {
my ($self,$type) = @_;
$self->{type} = $type;
}#sub dbRTLDB_BLOCK_Set_BLK_Type 

sub dbRTLDB_BLOCK_Get_BLK_Type {
my ($self) = @_;
my $type = $self->{type};
return($type);
}#sub dbRTLDB_BLOCK_Get_BLK_Type  
#-----------------------------------------------------------------#
sub dbRTLDB_BLOCK_Set_BLK_Condition {
my($self,$cond) = @_;
$self->{condition} = $cond;
}#sub dbRTLDB_BLOCK_Set_BLK_Condition

sub dbRTLDB_BLOCK_Get_BLK_Condition {
my ($self) = @_;
my $cond = $self->{condition};
return($cond);
}#sub dbRTLDB_BLOCK_Get_BLK_Condition
#----------------------------------------------------------------------#
sub dbRTLDB_BLOCK_Add_BLK_Reg_Assign_List {
my ($self,$register_assign) =@_;
push(@{$self->{register_assign_list}},$register_assign);
}#sub dbRTLDB_BLOCK_Add_BLK_Reg_Assign_List

sub dbRTLDB_BLOCK_Get_BLK_Reg_Assign_List {
my ($self) = @_;
my @temp_register_assign_list = @{$self->{register_assign_list}};
return(@temp_register_assign_list);
}#sub dbRTLDBGet_BLK_Reg_Assign_List
#----------------------------------------------------------------------------#
sub dbRTLDB_BLOCK_Add_condition_expression {
my ($self,$temp_condition_expression) = @_;
$self->{condition_expression} = $temp_condition_expression;
}#sub dbRTLDB_BLOCK_Add_condition_expression

sub dbRTLDB_BLOCK_Get_condition_expression {
my ($self) = @_;
my $temp_condition_expression = $self->{condition_expression};
return($temp_condition_expression);
}#sub dbRTLDB_BLOCK_Get_condition_expression
#----------------------------------------------------------------------------#
sub dbRTLDB_BLOCK_Set_Begin {
my ($self,$begin_found) = @_;
$self->{begin_found} = $begin_found;
}#sub dbRTLDB_BLOCK_Set_Begin

sub dbRTLDB_BLOCK_Get_Begin {
my ($self) = @_;
my $beginfound = $self->{begin_found};
return($beginfound);
}#sub dbRTLDB_BLOCK_Get_Begin
#----------------------------------------------------------------------------#
1;
