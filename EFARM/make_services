

sub start_slave_daemon {

#****f* /start_slave_daemon
# NAME
#     start_slave_daemon
# FUNCTION
#         runs the deamon on host and report the status of load on it to the master machine.             
# SYNOPSIS
#         start_slave_daemon -host<hostname> -user<username> -passwd<password> -master<mastername>.
# INPUTS
#      options :
#                -host<hostname> \n";
#                -user<username> \n";
#                -passwd<password> \n";
#                -master<mastername> \n";
# OUTPUTS
#
#****
my $noOfArguments = @_;
if ($noOfArguments < 8 || $_[0] eq '-h') {
                         print "Usage : start_slave_daemon -host<hostname> \n";
                         print "                           -user<username> \n";
                         print "                           -passwd<password> \n";
                         print "                           -master<mastername> \n";
                                           }#if no. of arg not eq
else {#correct no of arguments
my $hostname;
my $username;
my $passwd;
my $mastername;

for(my $i = 0; $i < $noOfArguments; $i++){
   if($_[$i] eq "-host")   {$hostname = $_[$i+1];}
elsif($_[$i] eq "-user")   {$username = $_[$i+1];}
elsif($_[$i] eq "-passwd") {$passwd = $_[$i+1];}
elsif($_[$i] eq "-master") {$mastername = $_[$i+1];}
                                         }#for no of arg

if (($hostname eq "") || ($username eq "") || ($passwd eq "") || ($mastername eq "")){ 
                         print "Usage : start_slave_daemon -host<hostname> \n";
                         print "                           -user<username> \n";
                         print "                           -passwd<password> \n";
                         print "                           -master<mastername> \n";
                         return; 
                                                 }#if any field is empty

$path2eq = $GLOBAL->dbfGlobalGetProtonHome;

print "INFO-EFRM-STRT_SLV_DEMON : 001 : starting daemon on $hostname by invoking $path2eq\/d2\.exe\n";
       ##$forked_process_id = fork();
       ##if (!$forked_process_id) {
               system("$path2eq/d2.exe $hostname $username $passwd $path2eq/tesReportd $mastername &");
               #system("$path2eq/runDaemonsOnHosts.pl $hostname $username $passwd $path2eq/reporter_example1.pl $mastername &");
       ##        exit();
       ##}
       ##print "$forked_process_id is child process ID\n";
                       }#correct no of arguments
}#sub start_slave_daemon


sub stop_slave_daemon {
my $noOfArguments = @_;
if ($noOfArguments < 8 || $_[0] eq '-h') {
                         print "Usage : stop_slave_daemon  -host<hostname> \n";
                         print "                           -user<username> \n";
                         print "                           -passwd<password> \n";
                         print "                           -master<mastername> \n";
                                           }#if no. of arg not eq
else {#correct no of arguments
my $hostname;
my $username;
my $passwd;
my $mastername;

for(my $i = 0; $i < $noOfArguments; $i++){

   if($_[$i] eq "-host")   {$hostname = $_[$i+1];}
elsif($_[$i] eq "-user")   {$username = $_[$i+1];}
elsif($_[$i] eq "-passwd") {$passwd = $_[$i+1];}
elsif($_[$i] eq "-master") {$mastername = $_[$i+1];}
                                         }#for no of arg

if (($hostname eq "") || ($username eq "") || ($passwd eq "") || ($mastername eq "")){ 
                         print "Usage : stop_slave_daemon -host<hostname> \n";
                         print "                           -user<username> \n";
                         print "                           -passwd<password> \n";
                         print "                           -master<mastername> \n";
                         return; 
                                                 }#if any field is empty

print "INFO-EFRM : 001 : stop the slave $hostname \n";
$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
print "INFO-EFRM : 002 : stop the slave $hostname \n";
system("$path2eq/d2.exe $hostname $username $passwd $path2eq/tesControld $mastername &");

                          }#correct no of arguments
}#sub stop_slave_daemon


sub start_master_daemon {
my $noOfArguments = @_;
if ($noOfArguments < 6 || $_[0] eq '-h') {
                         print "Usage : start_master_daemon -host<hostname> \n";
                         print "                            -user<username> \n";
                         print "                            -passwd<password> \n";
                                           }#if no. of arg not eq
else {#correct no of arguments
my $hostname;
my $username;
my $passwd;

for(my $i = 0; $i < $noOfArguments; $i++){

   if($_[$i] eq "-host")   {$hostname = $_[$i+1];}
elsif($_[$i] eq "-user")   {$username = $_[$i+1];}
elsif($_[$i] eq "-passwd") {$passwd = $_[$i+1];}
                                         }#for no of arg

if (($hostname eq "") || ($username eq "") || ($passwd eq "")){ 
                         print "Usage : start_master_daemon -host<hostname> \n";
                         print "                            -user<username> \n";
                         print "                            -passwd<password> \n";
                                                 }#if any field is empty

$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
print "INFO-EFRM-STRT_MSTR_DEMON : 001 : start master daemon on $hostname\n";
system("$path2eq/d2.exe $hostname $username $passwd $path2eq/tesControld &");
#system("$path2eq/runDaemonsOnHosts.pl $hostname $username $passwd $path2eq/chooser_example1.pl &");

                          }#correct no of arguments

}# sub start_master_daemon


sub stop_control_daemon {

my $master = $_[0];
print "INFO-EFRM : 001 : stop master $master\n";

}#sub stop_control_daemon


#sub get_best_machine {
#$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
#
#
#}#sub get_best_machine

sub start_scheduler1 {
#print " starting the scheduler daemon on the local machine\n";
#my $path2eq = $GLOBAL->dbfGlobalGetProtonHome;
#system("$path2eq/schedulerd -sqldb \"$KB_DATABASE\" -sqluser $KB_ADMIN -sqlpasswd $KB_PASSWD -luser $Q_ADMIN -lpasswd $Q_PASSWD &");
}#sub start_scheduler1

sub start_scheduler {
#print " starting the scheduler daemon on the local machine\n";
#my $path2eq = $GLOBAL->dbfGlobalGetProtonHome;
#system("$path2eq/schedulerd -sqldb \"$KB_DATABASE\" -sqluser $KB_ADMIN -sqlpasswd $KB_PASSWD -luser $Q_ADMIN -lpasswd $Q_PASSWD &");

use POSIX qw(setsid);


my $chooosenMachine;
my $SQLDB ;
my $SQLU ;
my $SQLP ;
my $noOfArguments = @_;
print "MSG-EFRM-STRT_SCHE : 001 : $noOfArguments\n";
if($_[0] eq "-h" || $noOfArguments < 6)  {
        print "Usage :  scheduler\n";
        print "                       -sqldb <sql database in qoutes>\n";
        print "                              example \"DB\;aditya.lnx4.com\"\n";
        print "                       -sqluser <uername authorised to access SQL database>\n";
        print "                       -sqlpasswd <password>\n";
        print "                       -luser <username which will launch qa jobs>\n";
        print "                       -lpasswd <password>\n";
        print "                       <-debug>\n";

  }
  else {
  for(my $i = 0; $i < $noOfArguments; $i++){
  if($_[$i] eq "-sqldb"){ $SQLDB = $_[$i+1]; }
  if($_[$i] eq "-sqluser"){ $SQLU = $_[$i+1]; }
 if($_[$i] eq "-sqlpasswd"){ $SQLP = $_[$i+1]; }
  if($_[$i] eq "-luser"){ $User = $_[$i+1]; }
  if($_[$i] eq "-lpasswd"){ $Passwd = $_[$i+1]; }
                                           }#for all arguments


chdir '/'                 or die "Can't chdir to /: $!";
umask 0;
open STDIN, '/dev/null'   or die "Can't read /dev/null: $!";
#open STDOUT, '>/home/adityap/mac.rpt' or die "Can't write to /dev/null: $!";
#open STDOUT, '/dev/null' or die "Can't write to /dev/null: $!";
open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";
defined(my $pid = fork)   or die "Can't fork: $!";
exit if $pid;
setsid                    or die "Can't start a new session: $!";

$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
#while(1) {
sleep(2);
my $waitTime = 300;
my $estRunTime = 1500;


#----------------------------------------------#
#query SQL data base for testcases             # 
#----------------------------------------------#
my $dbh = DBI->connect( "dbi:mysql:$KB_DATABASE",$SQLU,$SQLP ) || die "Cannot connect: $DBI::errstr";

$sth = $dbh->prepare( "SELECT Status, TestPath, TestName, node, nodeLock  FROM designStat WHERE RID=0 ");
$sth->execute;
my @jobQueue = ();
my $count = 0;
while (($status,$tp,$t,$nd,$nl) = $sth->fetchrow_array) {
                                                           $count = $count+1;
                                                        my $str = $t." ".$tp." ".$status." ".$nd." ".$nl ;
                                                        print "$str\n";
                                                        print "INFO-EFRM-STRT_SCHE : 002 : count $count\n"; 
                                                        push(@tests,$str); }
my $len = @tests;
print "INFO-EFRM-STRT_SCHE : 003 : scheduler running through $len testcases\n";
my $count1 = 0;
while ( defined ($str = shift @tests )) {
                                          $count1 = $count1 +1;
                                          print "INFO-EFRM-STRT_SCHE : 004 : count1 $count1\n";
                                          my ($t , $tp , $status, $nd, $nl ) = ( split(/\s+/,$str))[0,1,2,3,4];
                                          print "INFO-EFRM-STRT_SCHE : 005 :scheduler $t : $tp : $status : $nd : $nl\n";
if ( $status == 0 ) {
		#----------------------------------------------#
		# get status of machines                       #
		#----------------------------------------------#
		print "INFO-EFRM-STRT_SCHE : 006 :scheduler get the best machine\n";
		#my $chooosenMachine = qx/$path2eq\/tesStatusd/;
                   if ($nl ==1){
                                 $chooosenMachine = $nd;
                                   }#if node lock
                  else {
                            #use Schedule::Load::Hosts;
                             my $hosts = Schedule::Load::Hosts->fetch();
                                foreach my $host ($hosts->hosts_sorted) {
                                        print $host->hostname," is on our network\n";
                                                                                 }#for each machine

                          # Choose hosts
                            #use Schedule::Load::Schedule;
                             my $scheduler = Schedule::Load::Schedule->fetch();
                             print "INFO-EFRM-STRT_SCHE : 007 : Best host for a new job: ", $scheduler->best(), "\n";
                                $chooosenMachine = $scheduler->best();
                            }#if no node lock

                    print " $chooosenMachine\n";
		    chomp($chooosenMachine);
		    print "INFO-EFRM-STRT_SCHE : 008 : scheduler system choose $chooosenMachine\n";
		#-------------------------------------------------------------------------------------------------------------------#
                    print "INFO-EFRM-STRT_SCHE : 009 : scheduler preparing to execute $t on $chooosenMachine\n";
                    push(@jobQueue,$t);
                    print "INFO-EFRM-STRT_SCHE : 010 : scheduler Launching a job on the machine $chooosenMachine as $User:$Passwd and dir $tp ....\n";
                    system("$path2eq/tesLauncher -host $chooosenMachine -luser $User -lpasswd $Passwd -path $tp &");

                    sleep($waitTime);
                    print "INFO-EFRM-STRT_SCHE : 011 : scheduler finished job ....\n";
                    $jobcount ++;
                    $sth1 = $dbh->prepare( "UPDATE designStat SET Status = '2' WHERE TestName='$t'" );
                    $sth1->execute;
                    print "INFO-EFRM-STRT_SCHE : 012 : scheduler Setting the status of test case $t as 2 : in process of execution\n";
                    }
$status = -1;
                                                  }# while
$sth->finish;

#----------------------------------------------#
#send email of successful job execution        # 
#----------------------------------------------#
#}# while
                   }#if correct arguments



}# sub start_scheduler

sub get_best_machine {
#****f* /get_best_machine
# NAME
#     get_best_machine
# FUNCTION
#         it select the most lightly loaded machine in our network
# SYNOPSIS

# INPUTS
#      options :

# OUTPUTS

#****
  #use Schedule::Load::Hosts;
  my $hosts = Schedule::Load::Hosts->fetch();
  foreach my $host ($hosts->hosts_sorted) {
      print $host->hostname," is on our network\n";
                                          }

  # Choose hosts
  #use Schedule::Load::Schedule;
  my $scheduler = Schedule::Load::Schedule->fetch();
  print "INFO-EFRM-GT_BST_MH : 001 : Best host for a new job: ", $scheduler->best(), "\n";
}#sub get_best_machine


sub reset_testcase_everyday {
@id_filename = 0;
$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
system("$path2eq/setStatus &");
open(READ,"$path2eq/test.dat");
while(<READ>){
    print $_, "\n";
}
#@id_filename = <READ>;
#print "@id_filename\n";
close(READ);

}#reset_testcase_everyday


1;
