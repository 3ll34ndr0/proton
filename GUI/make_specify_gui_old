sub prepare_specify_tab{
   my $specifyBook = $tab12->NoteBook(-tabpady=>0,-tabpadx=>0,-relief=>"raised",-font=> "Times 10 italic")->pack(-side=>"top",-fill=>'both',-expand=>1);
   $blockTab = $specifyBook->add( "Sheet 1", -label=>"Block",-justify => "center" );
   $netTab = $specifyBook->add( "Sheet 2", -label=>"netConn",-justify => "center" );
   &create_block_specify_table;
   &create_net_specify_table;
}#sub prepare_specify_tab

#############################################################################################
########################## subroutine to make specify table for blocks ######################
#############################################################################################

sub create_block_specify_table{
use Tk::TableMatrix::Spreadsheet;

my ($max_row, $max_col) = (30, 10);
my $specify_table_topFrame = $blockTab->Frame()->pack(-side=>"top");
$specify_table_middleFrame = $blockTab->Frame()->pack(-side=>"top");
my $specify_table_bottomFrame = $blockTab->Frame()->pack(-side=>"top");

my $arrayVar = {};
my @headersNames = ("blockName", "parentName", "instanceName", "size", "loc", "ff's", "i/o", "TC", "RC");
my $col_count = 0;
foreach my $headersName (@headersNames){
  $col_count++;
  $arrayVar->{"0,$col_count"} = $headersName;
}

$block_specify_table = $specify_table_middleFrame->Scrolled('Spreadsheet', 
                                          -rows => $max_row, -cols => $max_col, 
                                          -width => $max_col, -height => 20,
                                          -variable => $arrayVar,
                                          -selectmode => 'extended',
                                          -resizeborders => 'both',
                                          -titlerows => 1,
                                          -titlecols => 1,
                                          -bg => 'white',
                                         )->pack();
$block_specify_table->tagConfigure('active', -bg => 'gray90', -relief => 'sunken');
$block_specify_table->tagConfigure('title', -bg => 'gray85', -fg => 'black', -relief =>'sunken');

#############################################################################################
#my @headersNames = ("blockName", "ff", "in", "out", "area", "TC", "RC", "PWC", "genGlue"); 
#my $col_count = -1;
#foreach my $headersName (@headersNames){
#  $col_count++;
#  $arrayVar->{"0,$col_count"} = $headersName;
#  my $tmp_label = $block_specify_table->Label(-text =>$headersName , -relief =>'solid');
#  $block_specify_table->windowConfigure("0,$col_count", -sticky=>'nsew', -window=>$tmp_label);
#}
#############################################################################################

for(my $row = 1; $row < $max_row; $row++){
  $col_count = 0; 
  foreach my $headersName (@headersNames){
    $col_count++;
    if($headersName eq "genGlue"){
       my $tmp_checkBox = $table_frame->Checkbutton(-text=>"yes/no", -variable=>\${"ck_cell_value".$row});
       $block_specify_table->windowConfigure("$row,$col_count", -sticky=>'nsew', -window=>$tmp_checkBox);
    }  
   }
}

my $write_button = $specify_table_bottomFrame->Button(-text => 'Write', -command=>sub{&create_popup_toWrite_dataFile;})->pack(-side=>"left");
my $write_button = $specify_table_bottomFrame->Button(-text => 'Create Design', -command=>sub{&run_pseudo_commands;})->pack(-side=>"left");
my $write_button = $specify_table_bottomFrame->Button(-text => 'UpdateFromHier', -command=>sub{&add_rows_in_specify_table;&update_specify_table("",2);&editModule("-module", $GLOBAL->dbfGlobalGetTOP);})->pack(-side=>"left");
my $exit_button = $specify_table_bottomFrame->Button(-text => 'Refresh', -command=>sub{&refresh_table;})->pack(-side=>"left");
my $exit_button = $specify_table_bottomFrame->Button(-text => 'Refresh genGlue', -command=>sub{&add_button_in_genGlue_col($table_frame);})->pack(-side=>"left");

my $read_xls_button = $specify_table_topFrame->Button(-text => 'Load xls', -command=>sub{&call_read_xls_andLoadData();})->pack(-side=>"left");
my $write_xls_button = $specify_table_topFrame->Button(-text => 'Write xls', -command=>sub{&call_write_specify_xls;})->pack(-side=>"left");

}# sub create_block_specify_table

######################################################################################################
############################### subroutine to write data file ########################################
######################################################################################################
sub create_popup_toWrite_dataFile{
my $fileName =$_;
my @types = (["Config Files", '.txt'],
             ["All Files", "*"]);

$fileName = $top->getSaveFile(-filetypes =>\@types,
                              -defaultextension => '.txt'); 
          
&write_data_file($fileName);
}#sub create_popup_toWrite_dataFile

sub write_data_file {
my $fileName = $_[0];
if($fileName eq ""){$fileName = "data.txt";}

#($val_0, $val_1, $val_2, $val_3, $val_4, $val_5, $val_6, $val_7, $val_8) = ("blockName","ff","in","out","area","TC","RC","PWC","genGlue");
($val_1, $val_2, $val_3, $val_4, $val_5, $val_6, $val_7, $val_8, $val_9) = ("","","","","","","","","");

open(MYFILE,">$fileName") or die "Can't open up myfile: $!\n";

my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);
#format MYFORMAT_TOP =
#blockName        ff        in        out        area        TC        RC        PWC        genGlue
#---------    ---------   -------   -------    ---------   -------   -------  ---------   ------------
#.

format MYFORMAT = 
@<<<<<<<<<   @<<<<<<<<    @<<<<<<<  @<<<<<    @<<<<<<<    @<<<<<<<   @<<<<<<<   @<<<<<<     @<<<<<<<
$val_1       $val_2       $val_3    $val_4    $val_5      $val_6     $val_7     $val_8      $val_9    
. 

my $write_end = 0;
my $genGlueColFound = 0;
foreach my $row (0 .. $rows-1){
  foreach my $col (1 .. $cols-1){
     my $headers = $block_specify_table->get("0,$col");
     if($row !=0 && $headers eq "genGlue"){
        my $widget = $block_specify_table->windowCget("$row,$col", -window);
        my $cell_value =  $widget->cget(-variable);
        if($$cell_value == 1){
           ${"val_".$col} = "yes";
        }else{
           ${"val_".$col} = "no";
        }
     }else{
        my $cell_value =  $block_specify_table->get("$row,$col");
        if($col == 1 && $cell_value eq ""){$write_end = 1}
           ${"val_".$col} = $cell_value;
     }
  }
  if($write_end == 1){$write_end =0 ; next;}
  select(MYFILE);
  $~="MYFORMAT";
  write MYFILE;# if($write_end == 0);
}
close (MYFILE);
}#sub write_data_file

######################################################################################################
################################# subroutine to refresh table ########################################
######################################################################################################
sub refresh_table {
my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);
foreach my $row(1 .. $rows-1){
  foreach  my $col(1 .. $cols-1){
    my $headers = $block_specify_table->get("0,$col");
    if($headers eq "genGlue"){
       ${"ck_cell_value".$row} = 0; 
    }else{
       $block_specify_table->set("$row,$col", ""); 
    }
  }
}
}#sub refresh table

######################################################################################################
############################### subroutine to refresh genGlue cell ###################################
######################################################################################################
sub add_button_in_genGlue_col{
my $table_frame = shift;
my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);
my $genGlue_colNum;
   foreach  my $col(1 .. $cols-1){
      my $cell_value =  $block_specify_table->get("0,$col");
      if($cell_value eq "genGlue"){
         $genGlue_colNum = $col;
         last;
      }    
   } 
   if($genGlue_colNum ne ""){
      foreach my $row(1 .. $rows-1){
          #if($block_specify_table->windowCget("$row,$genGlue_colNum", -window)){};
          #my $widget = $block_specify_table->windowNames("");
          #my $widget = $block_specify_table->window();
          #print "widget $widget\n";
          #if($widget eq "" ){ 
             my $tmp_checkBox = $table_frame->Checkbutton(-text=>"yes/no", -variable=>\${"ck_cell_value".$row});
             $block_specify_table->windowConfigure("$row,$genGlue_colNum", -sticky=>'nsew', -window=>$tmp_checkBox);
          #}
      }
   }
}#sub add_button_in_genGlue_col 

######################################################################################################
################################## Subroutine to run pseudo commands #################################
######################################################################################################
sub run_pseudo_commands{
my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);
my ($top_module,$parent_module,$modName,$instName) = ("","","","");
my $current_top = "";
my ($mod_width,$mod_height,$llx,$lly) = (0,0,0,0);
my %MODULE = ();

LOOPA: foreach my $row(1 .. $rows-1){
         foreach  my $col(1 .. $cols-1){
              my $headers = $block_specify_table->get("0,$col");
              my $cell_value = $block_specify_table->get("$row,$col");
              if($headers eq "blockName"){
                 if($cell_value eq ""){last LOOPA;}
                 $modName = $cell_value;
                 $MODULE{$modName} = 1;
              }elsif($headers eq "parentName"){
                 $parent_module = $cell_value;
              }elsif($headers eq "instanceName"){
                 $instName = $cell_value;
              }elsif($headers eq "size"){
                 ($mod_width, $mod_height) = (split(/\,/,$cell_value))[0,1];
              }elsif($headers eq "loc"){
                 ($llx, $lly) = (split(/\,/,$cell_value))[0,1];
              }else{}
         }#foreach column
         my $urx = $llx+$mod_width; 
         my $ury = $lly+$mod_height; 
         if($row == 1){
            $top_module = $modName;
            &createPseudoTopModule("-top", $modName, "-H", $mod_height, "-W", $mod_width);  
            $current_top = $top_module;
         }else{
            if(exists $MODULE{$parent_module}){
               if($parent_module ne $current_top){
                  &commitModule("-module", $current_top);
                  &editModule("-module", $parent_module);
               }                                         
               &createPseudoModule("-top", "$parent_module", "-module", $modName, "-bbox", "{$llx,$lly,$urx,$ury}");
               &createPseudoHierModuleInst("-parent", $parent_module, "-bbox", "{$llx,$lly,$urx,$ury}","-cellref", "$modName", "-inst", "$instName");
            }else{print "WARN: Parent module $parent_module for instance $instName of cell $modName does not exists\n";}
         }#if not top row
         $current_top = $parent_module if($row != 1);
      }#foreach row
      &commitModule("-module", $current_top);
      &editModule("-module", $top_module);
}#sub run_pseudo_commands

######################################################################################################
############################# Subroutine to read and load xls in table ###############################
######################################################################################################
sub call_read_xls_andLoadData {
my $fileName = $_;
my @types = (["Config Files", '.xls'],
             ["All Files", "*"]);

 $fileName = $top->getOpenFile(-filetypes =>\@types,
                               -defaultextension => '.xls'); 
          
 &read_xls_andLoadData($fileName) if($fileName ne "");
}#sub call_read_xls_andLoadData


sub read_xls_andLoadData {
my $fileName = $_[0];
use Spreadsheet::ParseExcel;
use Tk::TableMatrix::Spreadsheet;

my $oExcel = new Spreadsheet::ParseExcel;
my $oBook = $oExcel->Parse($fileName);
my $oWkS = $oBook->{Worksheet}[0];
my @headers = ();
my $max_row = $oWkS->{MaxRow} + 1;
LOOPB: for(my $iR = $oWkS->{MinRow} ;defined $oWkS->{MaxRow} && $iR <= $oWkS->{MaxRow} ;$iR++){
  for(my $iC = $oWkS->{MinCol} ; defined $oWkS->{MaxCol} && $iC <= $oWkS->{MaxCol} ;$iC++) {
      my $oWkC = $oWkS->{Cells}[$iR][$iC];
      if($iR == 0 && defined $oWkC && $oWkC->Value ne ""){
         push(@headers,$oWkC->Value);
      }elsif(($oWkS->{Cells}[$iR][$oWkS->{MinCol}]) eq ""){
         $max_row = $iR;
         last LOOPB;
      }else{}
  }#foreach column
}#foreach row

$block_specify_table->destroy();

my $max_col = @headers+1;
my $table_rows = $max_row;
if($max_row < 30){$table_rows = 30;}
my $arrayVar = {};

my $col_count = 0;
foreach my $header (@headers){
  $col_count++;
  $arrayVar->{"0,$col_count"} = $header;
}

$block_specify_table = $specify_table_middleFrame->Scrolled('Spreadsheet', 
                                          -rows => $table_rows, -cols => $max_col, 
                                          -width => $max_col, -height => 20,
                                          -variable => $arrayVar,
                                          -selectmode => 'extended',
                                          -resizeborders => 'both',
                                          -titlerows => 1,
                                          -titlecols => 1,
                                          -bg => 'white',
                                         )->pack();
$block_specify_table->tagConfigure('active', -bg => 'gray90', -relief => 'sunken');
$block_specify_table->tagConfigure('title', -bg => 'gray85', -fg => 'black', -relief =>'sunken');

foreach my $row_num(1 .. $max_row-1){
   foreach my $col_num(0 .. $max_col-1){
      my $cellHash = $oWkS->{Cells}[$row_num][$col_num]; 
      if($cellHash){
         my $new_col_num = $col_num+1;
         $block_specify_table->set("$row_num,$new_col_num",$cellHash->Value);
      }
   }
}
}#sub read_xls_andLoadData

######################################################################################################
############################ Subroutine to write data from table to xls ##############################
######################################################################################################

sub call_write_specify_xls {
my $fileName =$_;
my @types = (["Config Files", '.xls'],
             ["All Files", "*"]);

  $fileName = $top->getSaveFile(-filetypes =>\@types,
                                -defaultextension => '.xls'); 
            
  &write_specify_xls($fileName) if($fileName ne "");
}#sub call_write_specify_xls


sub write_specify_xls{
use Spreadsheet::WriteExcel;
my $fileName = $_[0];
my $write_end = 0;

my $workbook = Spreadsheet::WriteExcel->new($fileName);
my $sheet_name = $block_specify_table->get("1,1");
my $sheet = $workbook->add_worksheet($sheet_name);
   $sheet->activate($sheet_name);

my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);

foreach my $row (0 .. $rows-1){
  foreach my $col (1 .. $cols-1){
     my $headers = $block_specify_table->get("0,$col");
     if($row !=0 && $headers eq "genGlue"){
        my $widget = $block_specify_table->windowCget("$row,$col", -window);
        my $cell_value =  $widget->cget(-variable);
        if($$cell_value == 1){
           $sheet->write($row, $col-1, "yes");
        }else{
           $sheet->write($row, $col-1, "no");
        }
     }else{
        my $cell_value =  $block_specify_table->get("$row,$col");
        if($col == 1 && $cell_value eq ""){$write_end = 1; last}
           $sheet->write($row, $col-1, $cell_value);
     }
  }
  if($write_end == 1){$write_end =0 ; next;}
}

}#sub write_specify_xls

######################################################################################################
################################# Subroutine to update specify table #################################
######################################################################################################
sub find_total_num_hInst{
   my $moduleName = $_[0];
   $specify_hinst_count = $_[1];
   
   if($moduleName eq ""){
      $moduleName = $GLOBAL->dbfGlobalGetTOP;
   }
   if(exists $PSEUDO_MODULE_ALREADY{$moduleName} ) {
     foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$moduleName}} ) {
         my $cellref = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstCellref;
         if($instance eq "PIN"){ 
         }else{ 
           $specify_hinst_count++;
           if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               &editModule("-module",$cellref);
               &find_total_num_hInst($cellref,$specify_hinst_count);
            }
         }
      }
   }
return $specify_hinst_count
}#sub find_total_num_hInst

sub add_rows_in_specify_table{
   my $num_hinst = &find_total_num_hInst("",0);
   #---- 2 extra rows are needed, one for column name & 2nd for top module ---#
   my $total_num_rows_needed = $num_hinst+2;
   if($total_num_rows_needed > 30){
      $block_specify_table->configure(-rows=>$total_num_rows_needed);
   }
}#sub add_rows_in_specify_table

sub update_specify_table{
   my $moduleName = $_[0];
   $specify_row_cnt = $_[1];
   
   if($moduleName eq ""){
      $moduleName = $GLOBAL->dbfGlobalGetTOP;
   }
   if(exists $PSEUDO_MODULE_ALREADY{$moduleName} ) {
      my @size = $PSEUDO_MODULE_ALREADY{$moduleName}->dbaTstgenGetSize;   
      my $width = abs($size[2]-$size[0]);      
      my $height = abs($size[3]-$size[1]);      
      if($specify_row_cnt == 2){
         $block_specify_table->set("1,1",$moduleName);
         $block_specify_table->set("1,2","self");
         $block_specify_table->set("1,4",$width.",".$height);
      }
      foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$moduleName}} ) {
         my ($inst_locX, $inst_locY, $inst_width, $inst_height);
         my ($RC,$TC,$ff,$in,$out) = ("UND","UND","UND","UND","UND");
         if($instance eq "PIN"){ 
         }else{ 
            my $cellref = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstCellref;
            my @loc = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstRelBbox;
            if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               $RC = $PSEUDO_MODULE_ALREADY{$cellref}->dbaTstgenGetRoutingComplexity;
               $TC = $PSEUDO_MODULE_ALREADY{$cellref}->dbaTstgenGetTimingComplexity;
               $ff = $PSEUDO_MODULE_ALREADY{$cellref}->dbaTstgenGetSeqComps;
               $in = $PSEUDO_MODULE_ALREADY{$cellref}->dbaTstgenGetInCount;
               $out = $PSEUDO_MODULE_ALREADY{$cellref}->dbaTstgenGetOutCount;
            }
            if($loc[0]==0 && $loc[1]==0 && $loc[2]==0 && $loc[3]==0){  
               $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBSetInstStatus("UNPLACED");
            }#if location is (0,0,0,0)
            my $status = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstStatus;
          
            if($status eq "UNPLACED" || $status eq "UND"){
               my @mod_bbox = &return_pseudo_vinst_size($moduleName,$instance);
               $inst_locX = 0;
               $inst_locY = 0;
               $inst_width = sprintf("%.2f",(abs($mod_bbox[2] - $mod_bbox[0])));
               $inst_height = sprintf("%.2f",(abs($mod_bbox[3] - $mod_bbox[1])));
            }else{
               $inst_locX = sprintf("%.2f", ($loc[0]));
               $inst_locY = sprintf("%.2f", ($loc[1]));
               $inst_width = sprintf("%.2f", (abs($loc[2] - $loc[0])));
               $inst_height = sprintf("%.2f", (abs($loc[3] - $loc[1])));
            }
            #my $rows = $block_specify_table->cget(-rows);
            #if ($specify_row_cnt > $rows){
            #    $block_specify_table->insertRows($specify_row_cnt,-1);  
            #}
            $block_specify_table->set("$specify_row_cnt,1",$cellref);
            $block_specify_table->set("$specify_row_cnt,2",$moduleName);
            $block_specify_table->set("$specify_row_cnt,3",$instance);
            $block_specify_table->set("$specify_row_cnt,4",$inst_width.",".$inst_height);
            $block_specify_table->set("$specify_row_cnt,5",$inst_locX.",".$inst_locY);
            $block_specify_table->set("$specify_row_cnt,6",$ff);
            $block_specify_table->set("$specify_row_cnt,7",$in.",".$out);
            $block_specify_table->set("$specify_row_cnt,8",$TC);
            $block_specify_table->set("$specify_row_cnt,9",$RC);
            $specify_row_cnt++;
            if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               &editModule("-module",$cellref);
               &update_specify_table($cellref,$specify_row_cnt);
            }
         }
      }#foreach hier instance
    }#if module exists
}#sub update_specify_table

######################################################################################################
########################### Subroutine to update if Resize/move in Hier-View #########################
######################################################################################################
sub update_specifyTable_ifResizeOrMove_hierInst{
my $instName = $_[0];
my $moduleName = $_[1];
my $bBox = $_[2];
my $operation = $_[3];

my @poly = @$bBox;
my ($inst_col_num,$cellref_col_num,$size_col_num,$loc_col_num,$width, $height);
my @x_coords = ();
my @y_coords = ();

   if(Exists $block_specify_table){
      my $cols = $block_specify_table->cget(-cols);
      my $rows = $block_specify_table->cget(-rows);
      
      foreach  my $col(1 .. $cols-1){
        my $header = $block_specify_table->get("0,$col");
        if($header eq "instanceName"){ $inst_col_num = $col;}
        if($header eq "blockName"){$cellref_col_num = $col;}
        if($header eq "size"){$size_col_num = $col;} 
        if($header eq "loc"){$loc_col_num = $col;} 
      }
      my $loc_x = sprintf("%.2f",($poly[0]));
      my $loc_y = sprintf("%.2f",($poly[1]));
      if($operation eq "resize"){
         for(my $i=0; $i<=$#poly; $i=$i+2){
             push(@x_coords, $poly[$i]);
             push(@y_coords, $poly[$i+1]);
         }
         @x_coords = sort{$a<=>$b}@x_coords;
         @y_coords = sort{$a<=>$b}@y_coords;
         $width = sprintf("%.2f",($x_coords[-1] - $x_coords[0]));
         $height = sprintf("%.2f",($y_coords[-1] - $y_coords[0]));
      }
      foreach my $row(1 .. $rows-1){
         my $inst = $block_specify_table->get("$row,$inst_col_num");
         my $cellRef = $block_specify_table->get("$row,$cellref_col_num");
         if($inst eq $instName && $cellRef eq $moduleName){
            my $size = $block_specify_table->get("$row,$size_col_num");
            my $loc = $block_specify_table->get("$row,$loc_col_num");
            if($size eq "" && $loc eq ""){
            }else{
               $block_specify_table->set("$row,$loc_col_num",$loc_x.",".$loc_y);
               $block_specify_table->set("$row,$size_col_num",$width.",".$height) if($operation eq "resize");
            } 
         }
      }
   }
}#sub update_specifyTable_ifResizeOrMove_hierInst

######################################################################################################
########################## Subroutine to create table for net connectivity ###########################
######################################################################################################

sub create_net_specify_table{
use Tk::TableMatrix::Spreadsheet;

my ($max_row, $max_col) = (30, 8);
my $net_specify_table_topFrame = $netTab->Frame()->pack(-side=>"top");
$net_specify_table_middleFrame = $netTab->Frame()->pack(-side=>"top");
my $net_specify_table_bottomFrame = $netTab->Frame()->pack(-side=>"top");

my $arrayVar = {};
#my @headersNames = ("netName", "parent", "source:pin", "sink:pin", "width", "type", "class");
my @headersNames = ("netName", "parent", "source:pin", "sink:pin", "width", "type");
my $col_count = 0;
foreach my $headersName (@headersNames){
  $col_count++;
  $arrayVar->{"0,$col_count"} = $headersName;
}

$net_specify_table = $net_specify_table_middleFrame->Scrolled('Spreadsheet', 
                                          -rows => $max_row, -cols => $max_col, 
                                          -width => $max_col, -height => 20,
                                          -variable => $arrayVar,
                                          -selectmode => 'extended',
                                          -resizeborders => 'both',
                                          -titlerows => 1,
                                          -titlecols => 1,
                                          -bg => 'white',
                                         )->pack();
$net_specify_table->tagConfigure('active', -bg => 'gray90', -relief => 'sunken');
$net_specify_table->tagConfigure('title', -bg => 'gray85', -fg => 'black', -relief =>'sunken');


#my $write_button = $net_specify_table_bottomFrame->Button(-text => 'Write', -command=>sub{&create_popup_toWrite_dataFile;})->pack(-side=>"left");
my $write_button = $net_specify_table_bottomFrame->Button(-text => 'Create Nets', -command=>sub{&run_pseudo_command_for_nets;})->pack(-side=>"left");
my $write_button = $net_specify_table_bottomFrame->Button(-text => 'UpdateFromHier', -command=>sub{&add_rows_in_net_specify_table;&update_net_specify_table("",1);&editModule("-module", $GLOBAL->dbfGlobalGetTOP);})->pack(-side=>"left");
my $exit_button = $net_specify_table_bottomFrame->Button(-text => 'Refresh', -command=>sub{&refresh_net_table;})->pack(-side=>"left");

my $read_xls_button = $net_specify_table_topFrame->Button(-text => 'Load xls', -command=>sub{&call_read_net_xls_andLoadData();})->pack(-side=>"left");
my $write_xls_button = $net_specify_table_topFrame->Button(-text => 'Write xls', -command=>sub{&call_write_net_specify_xls;})->pack(-side=>"left");

}# sub create_net_specify_table

############################################################################################################
########################### subroutine to read xls contains net connectivity ###############################
############################################################################################################
sub call_read_net_xls_andLoadData {
my $fileName = $_;
my @types = (["Config Files", '.xls'],
             ["All Files", "*"]);

 $fileName = $top->getOpenFile(-filetypes =>\@types,
                               -defaultextension => '.xls'); 
          
 &read_net_xls_andLoadData($fileName) if($fileName ne "");
}#sub call_read_net_xls_andLoadData


sub read_net_xls_andLoadData {
my $fileName = $_[0];
use Spreadsheet::ParseExcel;

my $oExcel = new Spreadsheet::ParseExcel;
my $oBook = $oExcel->Parse($fileName);
my $max_row = 1;
my $filled_row = 0;
my @headers = ();
my $count = $oBook->{SheetCount}; 
for(my $iSheet=0; $iSheet < $oBook->{SheetCount} ; $iSheet++) {
    my $oWkS = $oBook->{Worksheet}[$iSheet];
    $max_row = $max_row+ $oWkS->{MaxRow};
    LOOPB: for(my $iR = $oWkS->{MinRow} ;defined $oWkS->{MaxRow} && $iR <= $oWkS->{MaxRow} ;$iR++){
      for(my $iC = $oWkS->{MinCol} ; defined $oWkS->{MaxCol} && $iC <= $oWkS->{MaxCol} ;$iC++) {
          my $oWkC = $oWkS->{Cells}[$iR][$iC];
          if($iR == 0 && defined $oWkC && $oWkC->Value ne "" && $iSheet==0){
             push(@headers,$oWkC->Value);
          }elsif(($oWkS->{Cells}[$iR][$oWkS->{MinCol}]) eq ""){
             $filled_row = $filled_row + $iR;
             $max_row = $filled_row;
             last LOOPB;
          }else{}
      }#foreach column
    }#foreach row
}#foreach sheet
$net_specify_table->destroy();

my $max_col = @headers+1;
my $table_rows = $max_row;
if($max_row < 30){$table_rows = 30;}
my $arrayVar = {};

my $col_count = 0;
foreach my $header (@headers){
  $col_count++;
  $arrayVar->{"0,$col_count"} = $header;
}

$net_specify_table = $net_specify_table_middleFrame->Scrolled('Spreadsheet', 
                                          -rows => $table_rows, -cols => $max_col, 
                                          -width => $max_col, -height => 20,
                                          -variable => $arrayVar,
                                          -selectmode => 'extended',
                                          -resizeborders => 'both',
                                          -titlerows => 1,
                                          -titlecols => 1,
                                          -bg => 'white',
                                         )->pack();
$net_specify_table->tagConfigure('active', -bg => 'gray90', -relief => 'sunken');
$net_specify_table->tagConfigure('title', -bg => 'gray85', -fg => 'black', -relief =>'sunken');
 
my $new_row_num = 1;  
for(my $iSheet=0; $iSheet < $oBook->{SheetCount} ; $iSheet++) {
    my $oWkS = $oBook->{Worksheet}[$iSheet];
    LOOPC: foreach my $row_num(1 .. $max_row-1){
      foreach my $col_num(0 .. $max_col-1){
         my $cellHash = $oWkS->{Cells}[$row_num][$col_num];
         my $start_col =  $oWkS->{Cells}[$row_num][0];
         if($start_col eq ""){ last LOOPC;}
         if($cellHash){
            my $new_col_num = $col_num+1;
            $net_specify_table->set("$new_row_num,$new_col_num",$cellHash->Value);
         }
      }
      $new_row_num++;
    }
}
}#sub read_net_xls_andLoadData

######################################################################################################
############################# Subroutine to run pseudo commands for nets #############################
######################################################################################################
sub run_pseudo_command_for_nets{
my $cols = $net_specify_table->cget(-cols);
my $rows = $net_specify_table->cget(-rows);
my ($netName,$parent_module,$srcInst, $sinkInst,$srcPin, $sinkPin) = ("","","","","","");
#my ($net_width,$net_type,$class,$srcOpt, $sinkOpt, $not_execute) = (1,"wire","","-pin","-pin", 0);
my ($net_width,$net_type,$srcOpt, $sinkOpt, $not_execute) = (1,"wire","-pin","-pin", 0);
my $top_module = $GLOBAL->dbfGlobalGetTOP;
my $current_top = $GLOBAL->dbfGlobalGetTOP;
my $cnt = 0;
my %MODULE = ();
LOOPA: foreach my $row(1 .. $rows-1){
         foreach  my $col(1 .. $cols-1){
              my $headers = $net_specify_table->get("0,$col");
              my $cell_value = $net_specify_table->get("$row,$col");
              if($headers eq "netName"){
                 if($cell_value eq ""){last LOOPA;}
                 $netName = $cell_value;
              }elsif($headers eq "parent"){
                 $parent_module = $cell_value;
                 if($parent_module eq ""){$parent_module = $top_module;}
              }elsif($headers eq "source:pin"){
                 $cell_value =~ s/\(//;
                 $cell_value =~ s/\)//;
                 ($srcInst, $srcPin) = (split(/\:/,$cell_value))[0,1];
                 if($srcPin eq ""){$srcOpt = "";
                 }else{$srcOpt = "-pin";}
              }elsif($headers eq "sink:pin"){
                 $cell_value =~ s/\(//;
                 $cell_value =~ s/\)//;
                 ($sinkInst, $sinkPin) = (split(/\:/,$cell_value))[0,1];
                 if($sinkPin eq ""){$sinkOpt = "";   
                 }else{$sinkOpt = "-pin";}
              }elsif($headers eq "width"){
                 $net_width = $cell_value;
              }elsif($headers eq "type"){
                 $net_type = $cell_value;
              #}elsif($headers eq "class"){
              #   $class = $cell_value; 
              }else{}
         }#foreach column
         #if(exists $PSEUDO_MODULE_ALREADY{$parent_module}){ 
         #   if($parent_module ne $current_top){
         #      &commitModule("-module", $current_top);
         #      &editModule("-module", $parent_module);
         #   }
         #}else{print"\nWARN: Parent module $parent_module does not exists !"; $not_execute = 1;}
         #if(exists $PSEUDO_VINST_ALREADY{$parent_module}{$srcInst}){
         #}else{print"\nWARN: Source Instance \"$srcInst\" does not exists !"; $not_execute = 1;}
         #if(exists $PSEUDO_VINST_ALREADY{$parent_module}{$sinkInst}){
         #}else{print"\nWARN: Sink Instance \"$sinkInst\" does not exists !"; $not_execute = 1;}
         #&createPseudoNet("-parentModule","$parent_module","-type",$net_type,"-source","$srcInst",$srcOpt,$srcPin ,"-sink","$sinkInst",$sinkOpt, "{$sinkPin}","-prefix", $netName, "-wireWidth", $net_width) if($not_execute == 0);
         if($parent_module ne $current_top){
            &commitModule("-module", $current_top);
            &editModule("-module", $parent_module);
         }
         if($srcInst eq "" || $sinkInst eq ""){
            $cnt++;
            print "aditya $cnt\n"
         }
         &createPseudoNet("-parentModule","$parent_module","-type",$net_type,"-source","$srcInst",$srcOpt,$srcPin ,"-sink","$sinkInst",$sinkOpt, "{$sinkPin}","-prefix", $netName, "-wireWidth", $net_width);
         $current_top = $parent_module;
      }#foreach row
      &commitModule("-module", $current_top);
      &editModule("-module", $top_module);
}#sub run_pseudo_command_for_nets

######################################################################################################
######################## Subroutine to write data from  netconntable to xls ##########################
######################################################################################################
sub call_write_net_specify_xls {
my $fileName =$_;
my @types = (["Config Files", '.xls'],
             ["All Files", "*"]);

  $fileName = $top->getSaveFile(-filetypes =>\@types,
                                -defaultextension => '.xls'); 
            
  &write_net_specify_xls($fileName) if($fileName ne "");
}#sub call_write_net_specify_xls


sub write_net_specify_xls{
use Spreadsheet::WriteExcel;
my $fileName = $_[0];
my $write_end = 0;

my $workbook = Spreadsheet::WriteExcel->new($fileName);
#my $sheet_name = $net_specify_table->get("1,1");
my $sheet = $workbook->add_worksheet("chip connection");
   $sheet->activate("chip connection");

my $cols = $net_specify_table->cget(-cols);
my $rows = $net_specify_table->cget(-rows);

foreach my $row (0 .. $rows-1){
  foreach my $col (1 .. $cols-1){
     my $cell_value =  $net_specify_table->get("$row,$col");
     if($col == 1 && $cell_value eq ""){$write_end = 1; last}
        $sheet->write($row, $col-1, $cell_value);
  }
  if($write_end == 1){$write_end =0 ; next;}
}

}#sub write_net_specify_xls

######################################################################################################
############################# Subroutine to update netconn specify table #############################
######################################################################################################
sub find_total_num_specify_nets{
   my $moduleName = $_[0];
   $specify_net_count = $_[1];
   
   if($moduleName eq ""){
      $moduleName = $GLOBAL->dbfGlobalGetTOP;
   }
   if(exists $PSEUDO_MODULE_ALREADY{$moduleName} ) {
     if(exists $PSEUDO_VNET_ALREADY{$moduleName}){
         foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$moduleName}}) {
           $specify_net_count++;
         }
     } 
     foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$moduleName}} ) {
         my $cellref = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstCellref;
         if($instance eq "PIN"){ 
         }else{ 
           if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               &editModule("-module",$cellref);
               &find_total_num_specify_nets($cellref,$specify_net_count);
            }
         }
      }
   }
return $specify_net_count
}#sub find_total_num_specify_nets

sub add_rows_in_net_specify_table{
   my $num_hinst = &find_total_num_specify_nets("",0);
   #---- 1 extra row is needed for column name  ---#
   my $total_num_rows_needed = $num_hinst+1;
   if($total_num_rows_needed > 30){
      $net_specify_table->configure(-rows=>$total_num_rows_needed);
   }
}#sub add_rows_in_net_specify_table

sub update_net_specify_table{
   my $moduleName = $_[0];
   $net_specify_row_cnt = $_[1];
   
   if($moduleName eq ""){
      $moduleName = $GLOBAL->dbfGlobalGetTOP;
   }
   if(exists $PSEUDO_MODULE_ALREADY{$moduleName} ) {
     if(exists $PSEUDO_VNET_ALREADY{$moduleName}){
         foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$moduleName}}) {
           my @source = $PSEUDO_VNET_ALREADY{$moduleName}->{$net}->dbaTstgenGetPseudoNetSourceFanInList;
           my @sink = $PSEUDO_VNET_ALREADY{$moduleName}->{$net}->dbaTstgenGetPseudoNetSinkFanOutList;
           my $width = $PSEUDO_VNET_ALREADY{$moduleName}->{$net}->dbaTstgenGetPseudoNetWidth;
           my $type = $PSEUDO_VNET_ALREADY{$moduleName}->{$net}->dbaTstgenGetPseudoNetType;   
           $net_specify_table->set("$net_specify_row_cnt,0",$net_specify_row_cnt);
           $net_specify_table->set("$net_specify_row_cnt,1",$net);
           $net_specify_table->set("$net_specify_row_cnt,2",$moduleName);
           $net_specify_table->set("$net_specify_row_cnt,3","($source[0]:$source[1])");
           $net_specify_table->set("$net_specify_row_cnt,4","($sink[0]:$sink[1])");
           $net_specify_table->set("$net_specify_row_cnt,5",$width);
           $net_specify_table->set("$net_specify_row_cnt,6",$type);
           $net_specify_row_cnt++;
         }
     } 
      foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$moduleName}} ) {
         if($instance eq "PIN"){ 
         }else{ 
            my $cellref = $PSEUDO_VINST_ALREADY{$moduleName}{$instance}->dbPimDBGetInstCellref;
            if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               &editModule("-module",$cellref);
               &update_net_specify_table($cellref,$net_specify_row_cnt);
            }
         }
      }#foreach hier instance
   }#if module exists
}#sub update_net_specify_table

######################################################################################################
################################# subroutine to refresh net table ####################################
######################################################################################################
sub refresh_net_table {
my $cols = $block_specify_table->cget(-cols);
my $rows = $block_specify_table->cget(-rows);
foreach my $row(1 .. $rows-1){
  foreach  my $col(1 .. $cols-1){
     $net_specify_table->set("$row,$col", ""); 
  }
}
}#sub refresh_net_table



1;
