sub create_popUpDesignEntryWidget {
#-------------------------------------prep the data for display DLDB -------------------#
&dbfTstGenUpdateDesignLib;
&display_ProtoEleText($design_canvas);
&createPopup_downHier($design_canvas);
&delete_geometry($design_canvas);
&resize_Instance_designCanvas($design_canvas);
&move_Instance_designCanvas($design_canvas);
&addBind_for_pinPlace;
my $popupWindow = MainWindow->new();
$popupWindow->title("Add Design Elements");
$popupWindow->geometry("+1000+0");
$GLOBAL->dbGlobalSetActiveCanvas("design_canvas");
###################################### Notebook and Label #########################################################
my $book = $popupWindow->NoteBook(-tabpady=>0,-tabpadx=>0,-relief=>"raised",-font=> "Times 10 italic", -borderwidth=>2)->pack(-side=>'top', -fill=>'both',-expand=>1);
my $status = $popupWindow->Label(-width => 25,-height => 2,-relief => 'sunken')->pack(-side=>"bottom", -expand=>1, -fill=>'x');

################ Adding multiple tabs #####################
my $tab1 = $book->add( "Sheet 1", -label=>"temp");
my $tab2 = $book->add( "Sheet 2", -label=>"soft");
my $tab3 = $book->add( "Sheet 3", -label=>"hard");
my $tab4 = $book->add( "Sheet 4", -label=>"IPs");
my $tab5 = $book->add( "Sheet 5", -label=>"bool");
my $tab6 = $book->add( "Sheet 6", -label=>"arith");
my $tab7 = $book->add( "Sheet 7", -label=>"param");
my $tab8 = $book->add( "Sheet 8", -label=>"rtls");
my $tab9 = $book->add( "Sheet 9", -label=>"std");
my $tab10 = $book->add( "Sheet 10", -label=>"blocks");
my $tab11 = $book->add( "Sheet 11", -label=>"BBox");

###############################################################################################################################
###################################################  tab1 for temp ########################################################## 
###############################################################################################################################
my $Frame1 = $tab1->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $Frame2 = $tab1->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $Frame3 = $tab1->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');

################################ Frame1 ######################################
$Frame1->Label(-text => "Thickness")->pack(-anchor => 'e',-fill=>'y');
$thickness = 1;
$Frame1->Entry(-textvariable => \$thickness, -width =>8 )->pack(-anchor => 'e');
$drawOption = "create";

$Frame1->Label(-text => "Color")->pack(-anchor => 'n');
$subFrame = $Frame1->Frame()->pack(-anchor => 'n',-expand=>1,-fill=>'x');

my $path2eq = $GLOBAL->dbfGlobalGetProtonHome;
my $bitmap = $popupWindow->Photo(-file       => "$path2eq/ETC/color5a.gif");
$subFrame->Button(-image => $bitmap, -padx=>0, -pady=>0, -command=>sub {&create_color_popup; &fill_canvas_bind;})->pack( -side=>"right");
#$subFrame->Button(text=>"colors", -padx=>0, -pady=>0, -command=>sub {&create_color_popup; &fill_canvas_bind;})->pack( -side=>"right");
$subFrame->Entry(-textvariable => \$fillcolor, -width =>5 )->pack(-side=>'right');

$drawOption = "create";

$Frame1->Radiobutton(-variable => \$drawOption,
                -text => "Draw",
                -value => "create",
                -command => \&dbfGuiResetCanvasBind)->pack(-anchor => 'w');
$Frame1->Radiobutton(-variable => \$drawOption,
                -text => "Resize",
                -value => "resize",
                -command => \&dbfGuiResetCanvasBind)->pack(-anchor => 'w');
#$Frame1->Radiobutton(-variable => \$drawOption,
#                -text => "Delete",
#                -value => "delete",
#                -command => sub{&dbfGuiResetCanvasBind;&delete_geometry})->pack(-anchor => 'w');

################################ Frame2 ###################################### 

my $button1 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_rectangle}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle}
                              })->pack( -side=> 'top');
my $balloon1 = $popupWindow->Balloon(-statusbar => $status);
   $balloon1->attach($button1,
                 -balloonmsg => 'HardBlock',
                 -statusmsg => "You can create HardBlock\n",
                );

my $button2 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_rectangle1}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle1}
                              })->pack( -side=> 'top');
my $balloon2 = $popupWindow->Balloon(-statusbar => $status);
   $balloon2->attach($button2,
                 -balloonmsg => 'BlackBox',
                 -statusmsg => "You can create BlackBox\n",
                );

my $button3 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_square}
                            elsif($drawOption eq "resize"){&resizeOrMove_square}
                               })->pack( -side=> 'top');
my $balloon3 = $popupWindow->Balloon(-statusbar => $status);
   $balloon3->attach($button3,
                 -balloonmsg => 'Square',
                 -statusmsg => "You can draw Square\n",
                );

my $button4 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_trapezoid}
                            elsif($drawOption eq "resize"){&resizeOrMove_trapezoid}
                              })->pack( -side=> 'top');
my $balloon4 = $popupWindow->Balloon(-statusbar => $status);
   $balloon4->attach($button4,
                 -balloonmsg => 'Trapezoid',
                 -statusmsg => "You can draw Trapezoid\n",
                );

my $button5 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_rhombus;}
                            elsif($drawOption eq "resize"){&resizeOrMove_rhombus;}
                                })->pack( -side=> 'top');
my $balloon5 = $popupWindow->Balloon(-statusbar => $status);
   $balloon5->attach($button5,
                 -balloonmsg => 'Rhombus',
                 -statusmsg => "You can draw Rhombus\n",
                );

my $button6 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_parallelogram}
                            elsif($drawOption eq "resize"){&resizeOrMove_parallelogram}
                                })->pack( -side=> 'top');
my $balloon6 = $popupWindow->Balloon(-statusbar => $status);
   $balloon6->attach($button6,
                 -balloonmsg => 'Parallelogram',
                 -statusmsg => "You can draw Parallelogram\n",
                );

my $button7 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_triangle}
                            elsif($drawOption eq "resize"){&resizeOrMove_triangle}
                              })->pack( -side=> 'top');
my $balloon7 = $popupWindow->Balloon(-statusbar => $status);
   $balloon7->attach($button7,
                 -balloonmsg => 'Triangle',
                 -statusmsg => "You can draw Triangle\n",
                );

my $button8 = $Frame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_oval;}
                            elsif($drawOption eq "resize"){&resizeOrMove_oval;}
                              })->pack( -side=> 'top');
my $balloon8 = $popupWindow->Balloon(-statusbar => $status);
   $balloon8->attach($button8,
                 -balloonmsg => 'Oval',
                 -statusmsg => "You can draw Oval\n",
                );

##################################### Frame3 ################################
my $button9 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
                             #  if($drawOption eq "create"){&draw_circle;}
                           # elsif($drawOption eq "resize"){&resizeOrMove_circle;}
                              })->pack( -side=> 'top');
my $balloon9 = $popupWindow->Balloon(-statusbar => $status);
   $balloon9->attach($button9,
                 #-balloonmsg => 'Adder',
                 #-statusmsg => "You can create Adder\n",
                );

my $button10 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_straightLine;}
                            elsif($drawOption eq "resize"){&resizeOrMove_straightLine;}
                              })->pack( -side=> 'top');
my $balloon10 = $popupWindow->Balloon(-statusbar => $status);
   $balloon10->attach($button10,
                 -balloonmsg => 'StraightLine',
                 -statusmsg => "You can create StraightLine\n",
                );

my $button11 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&draw_zLine;}
                            elsif($drawOption eq "resize"){&resizeOrMove_zLine;}
                              })->pack( -side=> 'top');
my $balloon11 = $popupWindow->Balloon(-statusbar => $status);
   $balloon11->attach($button11,
                 -balloonmsg => 'zLine',
                 -statusmsg => "You can draw zLine\n",
                );

my $button12 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
                          #     if($drawOption eq "create"){&draw_mux;}
                          #  elsif($drawOption eq "resize"){&resizeOrMove_mux;}
                              })->pack( -side=> 'top');
my $balloon12 = $popupWindow->Balloon(-statusbar => $status);
   $balloon12->attach($button12,
               #  -balloonmsg => 'MUX',
               #  -statusmsg => "You can create Multiplexer\n",
                );

my $button13 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
               #                if($drawOption eq "create"){&draw_fifo;}
               #             elsif($drawOption eq "resize"){&resizeOrMove_fifo;}
                              })->pack( -side=> 'top');
my $balloon13 = $popupWindow->Balloon(-statusbar => $status);
   $balloon13->attach($button13,
               #  -balloonmsg => 'FIFO',
               #  -statusmsg => "You can create FIFO\n",
                );

my $button14 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{
               #                if($drawOption eq "create"){&draw_flop;}
               #             elsif($drawOption eq "resize"){&resizeOrMove_flop;}
                              })->pack( -side=> 'top');
my $balloon14 = $popupWindow->Balloon(-statusbar => $status);
   $balloon14->attach($button14,
               #  -balloonmsg => 'Flop',
               #  -statusmsg => "You can create Flop\n",
                );

my $button15 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{})->pack( -side=> 'top');
my $balloon15 = $popupWindow->Balloon(-statusbar => $status);
   $balloon15->attach($button15,
                 #-balloonmsg => 'Square',
                 #-statusmsg => "You can draw Square\n",
                );

my $button16 = $Frame3->Button(-bitmap => 'modulebox',-command=>sub{})->pack( -side=> 'top');
my $balloon16 = $popupWindow->Balloon(-statusbar => $status);
   $balloon16->attach($button16,
                 #-balloonmsg => 'Square',
                # -statusmsg => "You can draw Square\n",
                );

###############################################################################################################################
################################################  tab2 the soft modules ####################################################### 
###############################################################################################################################
my $softFrame1 = $tab2->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $softFrame2 = $tab2->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $modFrame = $softFrame2->Frame()->pack(-side => 'top', -fill=>'x');#,-anchor=>'e', -expand=>1, -fill=>'x');
my $instFrame = $softFrame2->Frame()->pack(-side => 'top', -fill=>'x');#,-anchor=>'e', -expand=>1, -fill=>'x');

$lb2 = $softFrame1->Listbox(-selectmode=>'single', -font =>'Arial -9')->pack();
my @cells = ();
my $instName= "";  
foreach $c ( keys %DLDB) {
                         if ($DLDB{$c}->dbDldbGetClass == 0 ) { push(@cells,$c); }
                         }
my @sortedCells = sort(@cells);
$lb2->insert('end', @sortedCells);
$lb2->bind('<Button-1>', sub{$TSTDL = $lb2->get($lb2->curselection);});
my $modLabel = $modFrame->Label(-text =>"ModuleName",-font=> "Times 8",)->pack(-side=>"left");
my $modEntry = $modFrame->Entry(-textvariable => \$TSTDL,)->pack(-side=>"right");
my $instLabel = $instFrame->Label(-text => "InstName",-font=> "Times 8",)->pack(-side=>"left");
my $instEntry = $instFrame->Entry(-textvariable => \$InstName)->pack(-side=>"right");
my $button1 = $softFrame2->Button(-text => 'create',-pady=>0,-command=>sub{
                               if($drawOption eq "create"){&dbTstGUICreateModuleInst($InstName)}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle}
                                  })->pack( -side=> 'top');
#my $balloon1 = $popupWindow->Balloon(-statusbar => $status);
#   $balloon1->attach($button1,
#                 -balloonmsg => 'instantiate module',
#                 -statusmsg => "You can create instance of selected $TSTDL soft module\n",
#                );

###############################################################################################################################
############################################  tab4 the soft rtl IP modules #################################################### 
###############################################################################################################################
my $IpFrame1 = $tab4->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $IpFrame2 = $tab4->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $modFrame = $IpFrame2->Frame()->pack(-side => 'top', -fill=>'x');#,-anchor=>'e', -expand=>1, -fill=>'x');
my $instFrame = $IpFrame2->Frame()->pack(-side => 'top', -fill=>'x');#,-anchor=>'e', -expand=>1, -fill=>'x');

my $lb = $IpFrame1->Listbox(-selectmode=>'single', -font =>'Arial -9')->pack();
my @cells = ();
foreach $c ( keys %DLDB) { 
                         if ($DLDB{$c}->dbDldbGetClass == 8 ) { push(@cells,$c); }
                         }
my @sortedCells = sort(@cells);
$lb->insert('end', @sortedCells);
$lb->bind('<Button-1>', sub{$TSTDL = $lb->get($lb->curselection);});
my $modLabel = $modFrame->Label(-text =>"ModuleName",-font=> "Times 8",)->pack(-side=>"left");
my $modEntry = $modFrame->Entry(-textvariable => \$TSTDL,)->pack(-side=>"right");
my $instLabel = $instFrame->Label(-text => "InstName",-font=> "Times 8",)->pack(-side=>"left");
my $instEntry = $instFrame->Entry(-textvariable => \$InstName)->pack(-side=>"right");
my $button1 = $IpFrame2->Button(-text => 'create',-pady=>0,-command=>sub{
                               if($drawOption eq "create"){&dbTstGUICreateModuleInst($InstName)}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle}
                                  })->pack( -side=> 'top');
###############################################################################################################################
################################################  tab8 the Rtls Modules ####################################################### 
###############################################################################################################################

my $rtlsBottomFrame = $tab8->Frame()->pack(-side => 'bottom');
my $rtlsTopFrame = $tab8->Frame()->pack(-side => 'top', -expand=>1, -fill=>'both');

$rtlsDrawOption = "create_rtls";

$rtlsBottomFrame->Radiobutton(-variable => \$rtlsDrawOption,
                -text => "Draw",
                -value => "create_rtls",
                -command => \&dbfGuiResetCanvasBind)->pack(-side => 'left');
$rtlsBottomFrame->Radiobutton(-variable => \$rtlsDrawOption,
                -text => "Resize",
                -value => "resize_rtls",
                -command => \&dbfGuiResetCanvasBind)->pack(-side => 'left');
#$rtlsBottomFrame->Radiobutton(-variable => \$rtlsDrawOption,
#                -text => "Delete",
#                -value => "delete_rtls",
#                -command => sub{&dbfGuiResetCanvasBind;&delete_geometry})->pack(-side => 'left');
####################################   added button for Adder ##########################################################
my $adderButton = $rtlsTopFrame->Button(-bitmap => 'modulebox',-command=>sub{
                                                                             if($rtlsDrawOption eq "create_rtls"){&draw_circle;}
                                                                          elsif($rtlsDrawOption eq "resize_rtls"){&resizeOrMove_circle;}
                                                                              })->pack( -side=> 'left', -anchor=>'nw');
my $adder_balloon = $popupWindow->Balloon(-statusbar => $status);
   $adder_balloon->attach($adderButton,
                          -balloonmsg => 'Adder',
                          -statusmsg => "You can create Adder\n",
                           );

####################################   added button for MUX #############################################################
my $muxButton = $rtlsTopFrame->Button(-bitmap => 'modulebox',-command=>sub{
                                                                             if($rtlsDrawOption eq "create_rtls"){&draw_mux;}
                                                                          elsif($rtlsDrawOption eq "resize_rtls"){&resizeOrMove_mux;}
                                                                              })->pack( -side=> 'left', -anchor=>'nw');
my $mux_balloon = $popupWindow->Balloon(-statusbar => $status);
   $mux_balloon->attach($muxButton,
                          -balloonmsg => 'MUX',
                          -statusmsg => "You can create MUX\n",
                           );


####################################   added button for FLOP ##########################################################
my $flopButton = $rtlsTopFrame->Button(-bitmap => 'modulebox',-command=>sub{
                                                                             if($rtlsDrawOption eq "create_rtls"){&draw_flop;}
                                                                          elsif($rtlsDrawOption eq "resize_rtls"){&resizeOrMove_flop;}
                                                                              })->pack( -side=> 'left', -anchor=>'nw');
my $flop_balloon = $popupWindow->Balloon(-statusbar => $status);
   $flop_balloon->attach($flopButton,
                          -balloonmsg => 'FLOP',
                          -statusmsg => "You can create FLOP\n",
                           );

####################################   added button to create FIFO ##########################################################
my $fifoButton = $rtlsTopFrame->Button(-bitmap => 'modulebox',-command=>sub{
                                                                             if($rtlsDrawOption eq "create_rtls"){&draw_fifo;}
                                                                          elsif($rtlsDrawOption eq "resize_rtls"){&resizeOrMove_fifo;}
                                                                              })->pack( -side=> 'left', -anchor=>'nw');
my $fifo_balloon = $popupWindow->Balloon(-statusbar => $status);
   $fifo_balloon->attach($fifoButton,
                          -balloonmsg => 'FIFO',
                          -statusmsg => "You can create FIFO\n",
                           );

###############################################################################################################################
#################################################  tab9 the std cells ######################################################### 
###############################################################################################################################
my $stdFrame1 = $tab9->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $stdFrame2 = $tab9->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $modFrame = $stdFrame2->Frame()->pack(-side => 'top', -fill=>'x');#,-anchor=>'e', -expand=>1, -fill=>'x');

my $lb = $stdFrame1->Listbox(-selectmode=>'single', -font =>'Arial -9')->pack();
my @cells = ();
foreach $c ( keys %DLDB) { 
                         if ($DLDB{$c}->dbDldbGetClass == 9 ) { push(@cells,$c); }
                         }
my @sortedCells = sort(@cells);
$lb->insert('end', @sortedCells);
$lb->bind('<Button-1>', sub{$TSTDL = $lb->get($lb->curselection);});
my $modLabel = $modFrame->Label(-text =>"StdCell",-font=> "Times 8",)->pack(-side=>"left");
my $modEntry = $modFrame->Entry(-textvariable => \$TSTDL,)->pack(-side=>"right");
my $button1 = $stdFrame2->Button(-text => 'create',-pady=>0,-command=>sub{
                               if($drawOption eq "create"){&dbTstGUIInstantiateStdCell;}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle}
                                  })->pack( -side=> 'top');
###############################################################################################################################
#################################################  tab10 the Hard Macro ####################################################### 
###############################################################################################################################
my $blkFrame1 = $tab10->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $blkFrame2 = $tab10->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');

my $lb = $blkFrame1->Listbox(-selectmode=>'single', -font =>'Arial -9')->pack();
my @cells = ();
foreach $c ( keys %DLDB) {
                         if ($DLDB{$c}->dbDldbGetClass == 10 ) { push(@cells,$c); }
                         }
my @sortedCells = sort(@cells);
$lb->insert('end', @sortedCells);
$lb->bind('<Button-1>', sub{$TSTDL = $lb->get($lb->curselection);});
my $entry = $blkFrame2->Entry(-textvariable => \$TSTDL)->pack(-side=>top);
my $button1 = $blkFrame2->Button(-bitmap => 'modulebox',-command=>sub{
                               if($drawOption eq "create"){&dbTstGUIInstantiateHardMacro}
                            elsif($drawOption eq "resize"){&resizeOrMove_rectangle}
                              })->pack( -side=> 'top');
my $balloon1 = $popupWindow->Balloon(-statusbar => $status);
   $balloon1->attach($button1,
                 -balloonmsg => 'instantiate hard macro',
                 -statusmsg => "You can add an instance of selected $TSTDL hard macro\n",
                );
###############################################################################################################################


###############################################################################################################################
#################################################  tab11 the blackbox ######################################################### 
###############################################################################################################################
my $blackFrame1 = $tab11->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $blackFrame2 = $tab11->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');

my $lb = $blackFrame1->Listbox(-selectmode=>'single', -font =>'Arial -9')->pack();
my @cells = ();
foreach $c ( keys %DLDB) {
                         if ($DLDB{$c}->dbDldbGetClass == 11 ) { push(@cells,$c); }
                         }
my @sortedCells = sort(@cells);
$lb->insert('end', @sortedCells);

}#sub create_popUpDesignEntryWidget

#############################################################################################################################
#################################### creating popup window to create Top Module #############################################
#############################################################################################################################
sub popUp_dbTstGUICreateTopModule {
#--------------defaults -----------------#
my $topModuleName = 'mychip';
my $chipX = 1000;
my $chipY = 1000;

my $popupWindow = MainWindow->new();
$popupWindow->title("specify top module");
$popupWindow->geometry("400x250");
#$popupWindow->geometry("350x250");
###################################### Notebook and Label #########################################################
my $book = $popupWindow->NoteBook(-tabpady=>0,-tabpadx=>0,-relief=>"raised",-font=> "Times 10 italic", -borderwidth=>2)->pack(-side=>'top', -fill=>'both',-expand=>1);
#my $status = $popupWindow->Label(-width => 25,-height => 2,-relief => 'sunken')->pack(-side=>"bottom", -expand=>1, -fill=>'x');

################ Adding multiple tabs #####################
my $tab1 = $book->add( "Sheet 1", -label=>"Basic");
my $tab2 = $book->add( "Sheet 2", -label=>"Adv");

my $Frame1 = $tab1->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $tab1->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame3 = $tab1->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $tab1->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "Design")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$topModuleName, -width =>8 )->pack(-side=>'right',-fill=>'x',-expand=>1);
$Frame2->Label(-text => "Width")->pack(-side=>'left');
$Frame2->Entry(-textvariable => \$chipX, -width =>8 )->pack(-side=>'right',-fill=>'x',-expand=>1);
$Frame3->Label(-text => "Height")->pack(-side=>'left');
$Frame3->Entry(-textvariable => \$chipY, -width =>8 )->pack(-side=> 'right',-fill=>'x',-expand=>1);
$buttonFrame->Button(-text => 'OK', -padx=>0, -pady=>0, -command=>sub {
                                                               print "DBG-INFO : creating $topModuleName with $chipX,$chipY\n";
                                                               &call_dbTstGUICreateTopModule($topModuleName,$chipX,$chipY);
                                                               $popupWindow->destroy;
                                                               })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$popupWindow->destroy;})->pack( -side=>"left");

}# sub popUp_dbTstGUICreateTopModule

#############################################################################################################################
#################################### creating popup window for connecting Widget ############################################
#############################################################################################################################
sub popUp_CreateConnections {
#--------------defaults -----------------#
my $topModuleName = 'mychip';
my $chipX = 1000;
my $chipY = 1000;

my $popupWindow = MainWindow->new();
$popupWindow->title("Connecting Widget");
#$popupWindow->geometry("+1000+300");
$popupWindow->geometry("400x250");

my ($widthVar, $NetPreVar, $createPVar) = (0, 0, 1);
my ($wire, $bus, $clock, $pg); 
my ($width, $netPrefix) = ("", "");

my $bookFrame = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
my $optionFrame = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
#my $status = $popupWindow->Scrolled('ROText',-wrap=>'none',-relief => 'sunken',-scrollbars=>'')->pack(-side=>"left", -fill=>'both',-expand=>1);
my $status = $popupWindow->Scrolled('ROText',-wrap=>'word',-relief => 'sunken',-scrollbars=>'')->pack(-side=>"left", -fill=>'both',-expand=>1);
###################################### bookFrame #########################################################
my $book = $bookFrame->NoteBook(-tabpady=>0,-tabpadx=>0,-relief=>"raised",-font=> "Times 10 italic", -borderwidth=>2)->pack(-side=>'top', -fill=>'both',-expand=>1);

my $tab1 = $book->add( "Sheet 1", -label=>"Wire");
my $tab2 = $book->add( "Sheet 2", -label=>"Bus");
my $tab3 = $book->add( "Sheet 3", -label=>"Clock");
my $tab4 = $book->add( "Sheet 4", -label=>"PG");
my $tab5 = $book->add( "Sheet 5", -label=>"Bump");
my $tab6 = $book->add( "Sheet 6", -label=>"Spl");

my $wireFrame = $tab1->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
   $wireFrame->Radiobutton(-text => "ZWire", -variable =>\$wire, -value => "zWire",
                           -command=> sub {&dbTstGUICreateZWires($netPrefix,$width,$wire);
                                           &display_connections_help($status,"ZWire");
                                           })->pack(-side =>"left");

   $wireFrame->Radiobutton(-text => "StraightWire", -variable =>\$wire, -value=> "straightWire",
                           -command=> sub {&dbTstGUICreateStraightWires($netPrefix,$width,$wire);
                                           &display_connections_help($status,"StraightWire");
                                           })->pack(-side =>"left");
   $wireFrame->Radiobutton(-text => "RoutingWire", -variable =>\$wire, -value=> "routingWire",
                           -command=> sub {&dbTstGUICreateRoutingWires($netPrefix,$width,$wire);
                                           &display_connections_help($status,"RoutingWire");
                                           })->pack(-side =>"left");

my $busFrame = $tab2->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
   $busFrame->Radiobutton(-text => "ZBus", -variable =>\$bus, -value => "zBus",
                          -command=> sub {&dbTstGUICreateZBus($netPrefix, $width,$bus)
                                          &display_connections_help($status,"ZBus");
                                          })->pack(-side =>"left");
   $busFrame->Radiobutton(-text => "StraightBus", -variable =>\$bus, -value=> "straightBus",
                          -command=> sub {&dbTstGUICreateStraightBus($netPrefix,$width,$bus);
                                          &display_connections_help($status,"StraightBus");
                                          })->pack(-side =>"left");
   $busFrame->Radiobutton(-text => "RoutingBus", -variable =>\$bus, -value=> "routingBus",
                          -command=> sub {&dbTstGUICreateRoutingBus($netPrefix,$width,$bus);
                                          &display_connections_help($status,"RoutingBus");
                                          })->pack(-side =>"left");

my $clockFrame = $tab3->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
   $clockFrame->Radiobutton(-text => "ClockConnection", -variable =>\$clock, -value => "clock",
                            -command=> sub {&dbTstGUICreateClock;
                                            &display_connections_help($status,"ClockConnection");
                                            })->pack(-side =>"left");
   $clockFrame->Radiobutton(-text => "GlueConnection", -variable =>\$clock, -value=> "glue", 
                            -command=> sub {&dbTstGUICreateGlueConn;
                                            &display_connections_help($status,"GlueConnection");
                                            })->pack(-side =>"left");

my $pgFrame = $tab4->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
   $pgFrame->Radiobutton(-text => "PWR", -variable =>\$pg, -value => "tieHi",-command=> sub {&dbTstGUICreateTieHi($netPrefix,$width);&display_connections_help($status,"PWR");}
                                          )->pack(-side =>"left");
   $pgFrame->Radiobutton(-text => "GND", -variable =>\$pg, -value=> "tieLo", -command=> sub {&dbTstGUICreateTieLow($netPrefix,$width);&display_connections_help($status,"GND");}
                                          )->pack(-side =>"left");
   $pgFrame->Radiobutton(-text => "HiLowBus", -variable =>\$pg, -value=> "tiHiLow", -command=> sub {&dbTstGUICreateTieLowHi($netPrefix,$width);&display_connections_help($status,"HiLowBus");}
                                          )->pack(-side =>"left");

my $bumpFrame = $tab5->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
   $bumpFrame->Checkbutton(-text => "Bump", -variable =>\$bump, -onvalue => "bump",-command=> sub {&dbTstGUICreateBump($netPrefix,$width);&display_connections_help($status,"Bump");}
                                          )->pack(-side =>"left");
##################################### Option Frame #############################################################
my $Frame1 = $optionFrame->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $optionFrame->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame3 = $optionFrame->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');

$widthEntry = $Frame1->Entry(-textvariable => \$width, -width =>8, -state=>"disabled" )->pack(-side=>'right');
$Frame1->Checkbutton(-text=>'Width', -pady =>0, -padx=>0,-variable =>\$widthVar,
                     -command=> sub{ if($widthVar == 1){$widthEntry->destroy;
                                        $widthEntry = $Frame1->Entry(-textvariable => \$width, -width =>8, -state=>"normal" )->pack(-side=>'right');
                                     }else{$widthEntry->destroy;
                                           $width = "";
                                           $widthEntry = $Frame1->Entry(-textvariable => \$width, -width =>8, -state=>"disabled")->pack(-side=>'right');

                                     }
                            })->pack(-side=>"left", -anchor=>'w');


$netPreEntry = $Frame2->Entry(-textvariable => \$netPrefix, -width =>8, -state=>"disabled")->pack(-side=>'right');
$Frame2->Checkbutton(-text=>'NetPrefix', -pady =>0, -padx=>0,-variable =>\$NetPreVar,
                     -command=> sub{ if($NetPreVar == 1) {$netPreEntry->destroy; 
                                        $netPrefix = "";
                                        $netPreEntry = $Frame2->Entry(-textvariable => \$netPrefix, -width =>8, -state=>"normal")->pack(-side=>'right');
                                     }else{$netPreEntry->destroy; 
                                           $netPreEntry = $Frame2->Entry(-textvariable => \$netPrefix, -width =>8, -state=>"disabled")->pack(-side=>'right');
                                     }
                           })->pack(-side=>"left", -anchor=>'w');

$Frame3->Checkbutton(-text=>'Create Ports On Module', -pady =>0, -padx=>0,-variable =>\$createPVar,
                     -command=> sub{ 
                                      })->pack(-side=>"left", -anchor=>'w');

}# sub popUp_CreateConnections

#############################################################################################################################
####################################### creating popup window to edit Module ################################################
#############################################################################################################################
sub call_popup_edit_module {
my $moduleName = $_[0];
my $fplan = $_[1];
my $popupWindow = MainWindow->new();
$popupWindow->title("Edit Module");
my $Frame1 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "Module    ")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$moduleName, -width =>12 )->pack(-side=>'right');
$Frame2->Label(-text => "Floorplan")->pack(-side=>'left');
$Frame2->Entry(-textvariable => \$fplan, -width =>12 )->pack(-side=>'right');
$buttonFrame->Button(-text => 'Edit', -padx=>0, -pady=>0, 
                     -command=>sub {&editModule("-module",$moduleName,"-floorplan",$fplan);
                                    $popupWindow->destroy;
                                    })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$popupWindow->destroy;})->pack( -side=>"left");

}#sub call_popup_edit_module

#############################################################################################################################
#################################### creating popup window to display downHier ##############################################
#############################################################################################################################
sub call_popup_downHier {
my $parent = $TOP_MODULE;
my $instName = $_[0];
my $floorplan = "";
my $popupWindow = MainWindow->new();
$popupWindow->title("Descend Hierarchy");
my $Frame1 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame3 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "Parent    ")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$parent, -width =>12 )->pack(-side=>'right');
$Frame2->Label(-text => "Instance  ")->pack(-side=>'left');
my $instEntry = $Frame2->Entry(-textvariable => \$instName, -width =>12 )->pack(-side=>'right');
$Frame3->Label(-text => "Floorplan")->pack(-side=>'left');
$Frame3->Entry(-textvariable => \$floorplan, -width =>12 )->pack(-side=>'right');
$buttonFrame->Button(-text => 'Go', -padx=>0, -pady=>0, 
                     -command=>sub {&downHier("-parent",$parent,"-inst",$instEntry->get(),"-floorplan", $floorplan);
                                    $hier_canvas->delete('all');&display_hierarchy;$hier_canvas->CanvasBind('<1>' =>"");
                                    $popupWindow->destroy;
                                    })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$hier_canvas->delete("TEMP_HIGHLIGHT");$hier_canvas->CanvasBind('<1>' =>"");$popupWindow->destroy;})->pack(-side=>"left");

#------------------------ select the instance name by click LMB at instance ---------#
$hier_canvas->CanvasBind('<1>', => sub{
               my @xy = $hier_canvas->eventLocation();
               my $x = $xy[0];
               my $y = $xy[1];
               my @id      = $hier_canvas->find(qw/withtag current/);
               my @tagList = $hier_canvas->gettags($id[0]);
               my @coords  = $hier_canvas->coords($id[0]);
               $hier_canvas->delete("TEMP_HIGHLIGHT");
               if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}){
                  $instEntry->configure(-textvariable =>$tagList[1]) if(Exists $instEntry);
                  #$hier_canvas->createRectangle(@coords, -outline=>"white", -tags=>"TEMP_HIGHLIGHT");
                  my $fill_color = $hier_canvas->itemcget($tagList[1],-fill);
                  my $stipple = $hier_canvas->itemcget($tagList[1],-stipple);
                  $hier_canvas->createPolygon(@coords,-outline=>"white",-fill=>$fill_color,-stipple=>$stipple,-tags=>"TEMP_HIGHLIGHT");

               }}); 
#-------------------------------------------------------------------------------------#

}#sub call_popup_downHier

#############################################################################################################################
#################################### creating popup window to display upHier ##############################################
#############################################################################################################################
sub call_popup_upHier {
my $modName = $TOP_MODULE;
my @parent = ();
if(exists $MODULE_ALREADY{$TOP_MODULE}){
   @parent = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetParent;
}
my $parentModule = $parent[0];

my $popupWindow = MainWindow->new();
$popupWindow->title("Acending Hierarchy");
my $Frame1 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "Module")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$modName, -width =>12 )->pack(-side=>'right');
$Frame2->Label(-text => "Parent")->pack(-side=>'left');
$Frame2->Entry(-textvariable => \$parentModule, -width =>12 )->pack(-side=>'right');
$buttonFrame->Button(-text => 'Go', -padx=>0, -pady=>0, 
                     -command=>sub {&upHier("-module",$modName,"-parent", $parentModule);
                                    $hier_canvas->delete('all');&display_hierarchy;
                                    $popupWindow->destroy;
                                    })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$popupWindow->destroy;})->pack(-side=>"left");

}#sub call_popup_upHier

#############################################################################################################################
####################################### creating popup window to commit Module ################################################
#############################################################################################################################
sub call_popup_commit_module {
my $popupWindow = MainWindow->new();
$popupWindow->title("Commit Module");

my $moduleName = $_[0];
my $floorplan = $_[1];
if($moduleName eq ""){
   $moduleName = $TOP_MODULE;
}
my $Frame1 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "Module   ")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$moduleName, -width =>12 )->pack(-side=>'right');
$Frame2->Label(-text => "floorplan")->pack(-side=>'left');
$Frame2->Entry(-textvariable => \$floorplan, -width =>12 )->pack(-side=>'right');
$buttonFrame->Button(-text => 'Commit', -padx=>0, -pady=>0, 
                     -command=>sub {&commitModule("-module", $moduleName, "-floorplan", $floorplan);
                                    $popupWindow->destroy;
                                    })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$popupWindow->destroy;})->pack( -side=>"left");

}#sub call_popup_commit_module

#############################################################################################################################
####################################### creating popup window to write Verilog ##############################################
#############################################################################################################################
sub create_popup_write_verilog {
my $moduleName = $TOP_MODULE;
my $popupWindow = MainWindow->new();
   $popupWindow->title("Write Verilog");
my $image = $popupWindow->Getimage('folder');
my $fileName = "";
my $mode = "--hier";
my $switch = 0;
my $Frame1 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $Frame2 = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'x');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');



$Frame1->Label(-text => "VerilogFile")->pack(-side=>'left');
$Frame1->Entry(-textvariable => \$fileName, -width =>12 )->pack(-side=>'left');
$Frame1->Button(-image=>$image,-command =>sub {$fileName = &call_popup_write_verilog;})->pack(-side => 'right');

$Frame2->Checkbutton(-variable =>\$switch,-onvalue=>"--overwrite",-offvalue=>0,-text => "OverWrite")->pack(-side =>"left"); 
$Frame2->Radiobutton(-variable =>\$mode, -value => "--flat",-text => "Flat")->pack(-side =>"right");
$Frame2->Radiobutton(-variable =>\$mode,-value => "--hier",-text => "Hier")->pack(-side =>"right");

$buttonFrame->Button(-text => 'Write', -padx=>0, -pady=>0, 
                     -command=>sub {
                                    &write_verilog("-output",$fileName,$switch,$mode);
                                    $popupWindow->destroy;
                                    })->pack( -side=>"left");
$buttonFrame->Button(-text => 'Cancel', -padx=>0, -pady=>0, -command=>sub {$popupWindow->destroy;})->pack( -side=>"left");

}#sub create_popup_write_verilog

sub call_popup_write_verilog{
my $fileName =$_;
my @types = (["Config Files", '.v'],
             ["All Files", "*"]);

$fileName = $top->getSaveFile(-filetypes =>\@types,
                              -defaultextension => '.v'); 
}#sub call_popup_write_verilog

#############################################################################################################################
############################### creating popup window to create Floorplan Widget ############################################
#############################################################################################################################
sub popupToCreateFloorplanWidget{
my $popupWindow = MainWindow->new();
   $popupWindow->title("Floorplan Widget");
my $path2eq = $GLOBAL->dbfGlobalGetProtonHome;
my $topFrame = $popupWindow->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');
my $bottomFrame = $popupWindow->Frame()->pack(-side => 'bottom');

my $cut_image = $topFrame->Photo(-file       => "$path2eq/ETC/cut.gif");
my $cutButton = $topFrame->Button(-image=> $cut_image,-command=>sub{&rectilinearCut_widget($hier_canvas);})->pack(-side=>'left',-anchor=>'nw');
my $cut_baloon = $topFrame->Balloon();
   $cut_baloon->attach($cutButton, -balloonmsg => 'rectilinear cut');

my $move_image = $topFrame->Photo(-file       => "$path2eq/ETC/move.gif");               
my $moveButton = $topFrame->Button(-image=> $move_image,-command=>sub{ my $active_canvas = $GLOBAL->dbGlobalGetActiveCanvas;
                                                                       if($active_canvas eq "flat_view"){
                                                                          &move_flat_inst($design_worldcanvas);
                                                                       }elsif($active_canvas eq "hier_view"){
                                                                          &moveResizeInstance_widget($hier_canvas);
                                                                       }else {}     
                                     })->pack(-side=>'left',-anchor=>'nw');
my $move_baloon = $topFrame->Balloon();
   $move_baloon->attach($moveButton, -balloonmsg => 'move/resize');

my $undo_image = $topFrame->Photo(-file       => "$path2eq/ETC/undo.gif");               
my $undoButton = $topFrame->Button(-image=> $undo_image,-command=>sub{&perform_redo_undo("undo",$hier_canvas);})->pack(-side=>'left',-anchor=>'nw');
my $undo_baloon = $topFrame->Balloon();
   $undo_baloon->attach($undoButton, -balloonmsg => 'Undo');

my $redo_image = $topFrame->Photo(-file       => "$path2eq/ETC/redo.gif");               
my $redoButton = $topFrame->Button(-image=> $redo_image,-command=>sub{&perform_redo_undo("redo",$hier_canvas);})->pack(-side=>'left',-anchor=>'nw');
my $redo_baloon = $topFrame->Balloon();
   $redo_baloon->attach($redoButton, -balloonmsg => 'Redo');

my $exitButton = $bottomFrame->Button(-text=>"Exit",-pady=>0,-command=>sub{&resetCanvasBinding($hier_canvas);$popupWindow->destroy;})->pack();
}#sub popupToCreateFloorplanWidget

#############################################################################################################################
############################### creating popup window to create Routing Blockage ############################################
#############################################################################################################################
sub popup_createRoutingBlkg {
my $popupWindow = MainWindow->new();
   $popupWindow->title("Create Routing Blockage");
   $popupWindow->geometry(); 
my $RtFrame = $popupWindow->Frame()->pack(-side => 'right',-anchor=>'e', -expand=>1, -fill=>'y');
my $LtFrame = $popupWindow->Frame()->pack(-side => 'right',-anchor=>'n', -expand=>1, -fill=>'both');

my @Layers = sort hashValueAscendingNum (keys(%RML));
my @RLayers = ();
my $currentFrame;
foreach(@Layers){
     my $type = $PTDB{$_}->dbTechGetLayerType;
     if($type eq "ROUTING"){
        push(@RLayers,$_)  
     }#if routing layer
}#foreach layer

my $layerName = $RLayers[0];
my $lb = $RtFrame->Listbox(-selectmode=>'single', -font =>'Arial -9', -width=>0, -height=>6)->pack();
   $lb->insert('end', @RLayers);
   $lb->bind('<Button-1>', sub{$layerName = $lb->get($lb->curselection);});
my $Entry = $LtFrame->Entry(-textvariable =>\$layerName,-width=>10)->pack(-side=>"top"); 
my $Button = $LtFrame->Button(-text=>"Create",-padx=>0,-pady=>0,-command=>sub{&dbfTstGUICreateRoutingBlockage($layerName);})->pack(-side=>"bottom");
}#popup_createRoutingBlkg

########################################################################################################
###################### Connection Help window for Widgets in RHS of Design Canvas ######################
########################################################################################################
sub create_help_forConnection_widgets{
my $widget = $_[0];
my $popupWindow = MainWindow->new();
$popupWindow->title("Help");
#$popupWindow->geometry("400x250");

my $Frame = $popupWindow->Frame()->pack(-side => 'top');
my $buttonFrame = $popupWindow->Frame()->pack(-side => 'bottom');

my $status = $Frame->Scrolled('ROText',-wrap=>'word',-relief => 'sunken',-scrollbars=>'')->pack(-side=>"left", -fill=>'both',-expand=>1);
$buttonFrame->Button(-text=>'Exit', -command=>sub{$popupWindow->destroy;})->pack(-side=>'left');

&create_help_text_for_connecting_widgets($status,$widget);

}#sub create_help_forConnection_widgets

########################################################################################################

1;
