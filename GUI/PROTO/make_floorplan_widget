########################################################################################################
############################ subroutine to reset hier canvas binding ###################################
########################################################################################################
sub resetCanvasBinding{
my $canvas = $_[0];
$canvas->CanvasBind('<1>' =>"");
$canvas->CanvasBind('<B1-Motion>' =>"");
$canvas->CanvasBind('<B1-ButtonRelease>' =>"");
}#sub resetCanvasBinding

########################################################################################################
######################### subroutine to resize hierarical instances in hierview ########################
########################################################################################################
#sub resizeInstance_widget{
#my $canvas = $_[0];
#&resetCanvasBinding($canvas);
#my $dx   = 0;
#my $dy   = 0;
#my $inst = "";
#$canvas->CanvasBind('<1>', => sub{
#               &dbfGuiResetCanvasBind;
#               $inst = "";
#               $dx = 0; $dy = 0;     
#               my @xy = $canvas->eventLocation();
#               my $x = $xy[0];
#               my $y = $xy[1];
#               my @id      = $canvas->find(qw/withtag current/);
#               my @tagList = $canvas->gettags($id[0]);
#               if($tagList[0] ne "HIER_MOD"){return;
#               }else{
#                  if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}){
#                     my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}->dbPimDBGetInstCellref;
#                     my $class = $DLDB{$cellref}->dbDldbGetClass if(exists $DLDB{$cellref});
#                     return if($class == 10);#if hardMacro
#                     my @coords  = $canvas->coords($tagList[1]);
#                     my $width   = $coords[2] - $coords[0];
#                     my $height  = $coords[3] - $coords[1];
#
#                        if($x < $coords[0] + 0.3 * $width) {$dx =  1;}
#                     elsif($x > $coords[2] - 0.3 * $width) {$dx = -1;}
#                     else {$dx = 0;}
#
#                        if($y < $coords[1] + 0.3 * $height) {$dy =  1;}
#                     elsif($y > $coords[3] - 0.3 * $height) {$dy = -1;}
#                     else {$dy = 0;}
#                     #$inst = $id[0];
#                     if    ($dx == -1 && $dy ==  0){$canvas->configure(-cursor => 'right_side');
#                     }elsif($dx ==  1 && $dy ==  0){$canvas->configure(-cursor => 'left_side');
#                     }elsif($dx == -1 && $dy == -1){$canvas->configure(-cursor => 'top_right_corner');
#                     }elsif($dx == -1 && $dy ==  1){$canvas->configure(-cursor => 'bottom_right_corner');
#                     }elsif($dx ==  1 && $dy == -1){$canvas->configure(-cursor => 'top_left_corner');
#                     }elsif($dx ==  1 && $dy ==  1){$canvas->configure(-cursor => 'bottom_left_corner');
#                     }elsif($dx ==  0 && $dy == -1){$canvas->configure(-cursor => 'bottom_side');
#                     }elsif($dx ==  0 && $dy ==  1){$canvas->configure(-cursor => 'top_side');
#                     }else{$canvas->configure(-cursor => 'top_left_arrow');}
#                     $inst = $tagList[1];
#                     $canvas->createRectangle(@coords,
#                                                   -outline => 'green',
#                                                   -tags    => ['TEMP'],
#                                                   );
#                  }else{return;}
#               }#if not TopModule
#     });
#$canvas->CanvasBind('<B1-Motion>' => sub {
#                    my @xy = $canvas->eventLocation();
#                    my $x = $xy[0];
#                    my $y = $xy[1];
#                        my @coords = $canvas->coords('TEMP');
#                        if    ($dx ==  1) { $coords[0] = $x }
#                        elsif ($dx == -1) { $coords[2] = $x }
#                        else{}
#
#                        if    ($dy ==  1) { $coords[1] = $y }
#                        elsif ($dy == -1) { $coords[3] = $y }
#                        else{}
#                        $canvas->coords('TEMP', @coords);
#     });
#$canvas->CanvasBind('<B1-ButtonRelease>' => sub {
#        my @coords = $canvas->coords('TEMP');
#        # Delete the rectangle.
#        $canvas->delete('TEMP');
#        $canvas->coords($inst => @coords);
#        my @ll = dbfWGuiWGui2Micron($coords[0],$coords[1]);
#        my @ur = dbfWGuiWGui2Micron($coords[2],$coords[3]);
#        &setPseudoInstBox("-inst", $inst, "-bBox", "{$ll[0],$ll[1],$ur[0],$ur[1]}");
#        $canvas->configure(-cursor => 'top_left_arrow');
#     });
#}#sub resizeInstance_widget

########################################################################################################
######################### subroutine to move hierarical Instances in HierView  #########################
########################################################################################################
#sub moveInstance_widget{
#my $canvas = $_[0];
#&resetCanvasBinding($canvas);
#my $oldx   = 0;
#my $oldy   = 0;
#my $inst = "";
#my $moving_start = 0;
#$canvas->CanvasBind('<1>', => sub{
#               &dbfGuiResetCanvasBind;
#               $moving_start = 0;
#               $inst = "";
#               my @xy = $canvas->eventLocation();
#               my $x = $xy[0];
#               my $y = $xy[1];
#               my @id      = $canvas->find(qw/withtag current/);
#               my @tagList = $canvas->gettags($id[0]);
#               if($tagList[0] ne "HIER_MOD"){return;
#               }else{
#                  $canvas->configure(-cursor => 'diamond_cross');
#                  $oldx = $x;
#                  $oldy = $y;
#                  $inst = $tagList[1];   
#                  $moving_start = 1;
#               }#if not TopModule 
#  });
#$canvas->CanvasBind('<B1-Motion>' => sub {
#                    my @xy = $canvas->eventLocation();
#                    my $x = $xy[0];
#                    my $y = $xy[1];
#                    if($moving_start == 1){
#                       $canvas->move($inst => $x - $oldx, $y - $oldy);
#                       $oldx = $x;
#                       $oldy = $y;
#                    }
#  });
#$canvas->CanvasBind('<B1-ButtonRelease>' => sub {
#        my @coords = $canvas->coords($inst);
#        my @ll = dbfWGuiWGui2Micron($coords[0],$coords[1]);
#        my @ur = dbfWGuiWGui2Micron($coords[2],$coords[3]);
#        &movePseudoInst("-inst", $inst, "-toLoc", "{$ll[0],$ll[1]}");
#        $canvas->configure(-cursor => 'top_left_arrow');
#        $moving_start = 0;
#    });
#}#sub moveInstance_widget

########################################################################################################
###################### subroutine to move/resize hierarical Instances in HierView  #####################
########################################################################################################
#sub moveResizeInstance_widget{
#my $canvas = $_[0];
#&resetCanvasBinding($canvas);
#my $dx   = 0;
#my $dy   = 0;
#my $oldx   = 0;
#my $oldy   = 0;
#my $inst = "";
#my $moving_start = 0;
#my $proceed = 0;
#$canvas->CanvasBind('<1>', => sub{
#               $moving_start = 0;
#               $proceed = 0;
#               $inst = "";
#               $dx = 0; $dy = 0;     
#               my @xy = $canvas->eventLocation();
#               my $x = $xy[0];
#               my $y = $xy[1];
#               my @id      = $canvas->find(qw/withtag current/);
#               my @tagList = $canvas->gettags($id[0]);
#               if($tagList[0] ne "HIER_MOD"){return;
#               }else{
#                  if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}){
#                     my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}->dbPimDBGetInstCellref;
#                     my $class = $DLDB{$cellref}->dbDldbGetClass if(exists $DLDB{$cellref});
#                     return if($class == 10);
#                     my @coords  = $canvas->coords($tagList[1]);
#                     my $width   = $coords[2] - $coords[0];
#                     my $height  = $coords[5] - $coords[1];
#                     $inst = $tagList[1];   
#
#                        if($x < $coords[0] + 0.3 * $width) {$dx =  1;}
#                     elsif($x > $coords[2] - 0.3 * $width) {$dx = -1;}
#                     else {$dx = 0;}
#
#                        if($y < $coords[1] + 0.3 * $height) {$dy =  1;}
#                     elsif($y > $coords[5] - 0.3 * $height) {$dy = -1;}
#                     else {$dy = 0;}
#
#                     if    ($dx == -1 && $dy ==  0){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'right_side');
#                                                    $proceed = 1;
#                     }elsif($dx ==  1 && $dy ==  0){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'left_side');
#                                                    $proceed = 1;
#                     }elsif($dx == -1 && $dy == -1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'top_right_corner');
#                                                    $proceed = 1;
#                     }elsif($dx == -1 && $dy ==  1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'bottom_right_corner');
#                                                    $proceed = 1;
#                     }elsif($dx ==  1 && $dy == -1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'top_left_corner');
#                                                    $proceed = 1;
#                     }elsif($dx ==  1 && $dy ==  1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'bottom_left_corner');
#                                                    $proceed = 1;
#                     }elsif($dx ==  0 && $dy == -1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'bottom_side');
#                                                    $proceed = 1;
#                     }elsif($dx ==  0 && $dy ==  1){return if($class == 10);#if hardMacro
#                                                    $canvas->configure(-cursor => 'top_side');
#                                                    $proceed = 1;
#                     }else{$canvas->configure(-cursor => 'diamond_cross');
#                           $oldx = $x;
#                           $oldy = $y;
#                           $moving_start = 1;
#                           $proceed = 1;
#                     }
#                       
#                     $canvas->createPolygon(@coords,
#                                                   -outline => 'green',
#                                                   -tags    => ['TEMP'],
#                                                   )if($moving_start == 0);
#                     $canvas->createPolygon(@coords,
#                                                   -outline => 'white',
#                                                   -tags    => ['TEMP'],
#                                                   )if($moving_start == 1);
#                  }else{return;}
#               }#if not TopModule
#     });
#$canvas->CanvasBind('<B1-Motion>' => sub {
#                 if($proceed == 1){
#                    my @xy = $canvas->eventLocation();
#                    my $x = $xy[0];
#                    my $y = $xy[1];
#                    if($moving_start == 1){
#                       $canvas->move($inst => $x - $oldx, $y - $oldy);
#                       $canvas->move("TEMP" => $x - $oldx, $y - $oldy);
#                       $oldx = $x;
#                       $oldy = $y;
#                    }else{
#                        my @coords = $canvas->coords('TEMP');
#                        if    ($dx ==  1) { $coords[0] = $x }
#                        elsif ($dx == -1) { $coords[2] = $x }
#                        else{}
#
#                        if    ($dy ==  1) { $coords[1] = $y }
#                        elsif ($dy == -1) { $coords[5] = $y }
#                        else{}
#                        $canvas->coords('TEMP', @coords);
#                    }
#                 }else{return;}
#     });
#$canvas->CanvasBind('<B1-ButtonRelease>' => sub {
#     if($proceed == 1){
#        if($moving_start == 1){
#           my @coords = $canvas->coords($inst);
#           my @poly_coords = ();
#           for(my $i=0; $i<=$#coords; $i=$i+2){
#               my @xy = dbfWGuiWGui2Micron($coords[$i],$coords[$i+1]);
#               push(@poly_coords, @xy);
#           }
#           &create_popup_toSetStatusIfMoving($inst, \@poly_coords);
#           $moving_start = 0;
#        }else{
#           my @coords = $canvas->coords('TEMP');
#           $canvas->coords($inst => @coords);
#           my @ll = dbfWGuiWGui2Micron($coords[0],$coords[1]);
#           my @ur = dbfWGuiWGui2Micron($coords[2],$coords[3]);
#           &create_popup_toSetStatusIfResizing($inst,\@ll,\@ur);
#        }   
#        $canvas->configure(-cursor => 'top_left_arrow');
#        # Delete the rectangle.
#        $canvas->delete('TEMP');
#     }
#  });
#}#sub moveResizeInstance_widget

sub moveResizeInstance_widget{
my $canvas = $_[0];
&resetCanvasBinding($canvas);
my $proceed = 0;
my $instance = "";
my $stretch_rect = "";
my ($oldx, $oldy) = (0, 0);
$canvas->CanvasFocus;
$canvas->CanvasBind('<Double-1>', => sub{
               $canvas->delete("BL","B","BR","R","TR","T","TL","L");
               $instance = "";
               $proceed = 0;
               my @id      = $canvas->find(qw/withtag current/);
               if(@id >= 1){
                  my @tagList = $canvas->gettags($id[0]);
                  $instance = $tagList[1];
                  if($tagList[0] ne "HIER_MOD"){return;
                  }else{
                     if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}){
                        my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}->dbPimDBGetInstCellref;
                        my $class = $DLDB{$cellref}->dbDldbGetClass if(exists $DLDB{$cellref});
                        return if($class == 10 || $class == 9);

                        my @coords  = $canvas->coords($tagList[1]);
                        my @x_coord_array = ();
                        my @y_coord_array = ();
                        for(my $i=0; $i<=$#coords; $i=$i+2){
                            push(@x_coord_array, $coords[$i]);
                            push(@y_coord_array, $coords[$i+1]);
                        }
                        @x_coord_array = sort{$a<=>$b}@x_coord_array; 
                        @y_coord_array = sort{$a<=>$b}@y_coord_array;
                        my $minx = $x_coord_array[0];
                        my $miny = $y_coord_array[0];
                        my $maxx = $x_coord_array[-1];
                        my $maxy = $y_coord_array[-1];
                        my $rect_ext = 4;
                        if(($maxx-$minx) < 24 || ($maxy-$miny) < 24){
                           $rect_ext = ($maxx-$minx)/6 if(($maxx-$minx) <= ($maxy-$miny));          
                           $rect_ext = ($maxy-$miny)/6 if(($maxx-$minx) > ($maxy-$miny));          
                        } 
                        my $bl_rect = $canvas->createRectangle($minx-$rect_ext,$miny-$rect_ext,$minx+$rect_ext,$miny+$rect_ext, -fill=>'white',-outline=>'white');  
                        $canvas->itemconfigure($bl_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("BL" , "withtag", $bl_rect);
                        $canvas->bind("BL","<Enter>"=> sub{$canvas->itemconfigure("BL",-fill=>'green')});
                        $canvas->bind("BL","<Leave>"=> sub{ $canvas->itemconfigure("BL",-fill=>'white');});

                        my $b_rect = $canvas->createRectangle(($minx+$maxx)/2-$rect_ext,$miny-$rect_ext,($minx+$maxx)/2+$rect_ext,$miny+$rect_ext, -fill=>'white',-outline=>'white'); 
                        $canvas->itemconfigure($b_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("B" , "withtag", $b_rect);
                        $canvas->bind("B","<Enter>"=> sub{$canvas->itemconfigure("B",-fill=>'green')});
                        $canvas->bind("B","<Leave>"=> sub{ $canvas->itemconfigure("B",-fill=>'white');});
 
                        my $br_rect = $canvas->createRectangle($maxx-$rect_ext,$miny-$rect_ext,$maxx+$rect_ext,$miny+$rect_ext, -fill=>'white',-outline=>'white'); 
                        $canvas->itemconfigure($br_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("BR" , "withtag", $br_rect);
                        $canvas->bind("BR","<Enter>"=> sub{$canvas->itemconfigure("BR",-fill=>'green')});
                        $canvas->bind("BR","<Leave>"=> sub{ $canvas->itemconfigure("BR",-fill=>'white');});
 
                        my $r_rect = $canvas->createRectangle($maxx-$rect_ext,($miny+$maxy)/2-$rect_ext,$maxx+$rect_ext,($miny+$maxy)/2+$rect_ext, -fill=>'white',-outline=>'white'); 
                        $canvas->itemconfigure($r_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("R" , "withtag", $r_rect);
                        $canvas->bind("R","<Enter>"=> sub{$canvas->itemconfigure("R",-fill=>'green')});
                        $canvas->bind("R","<Leave>"=> sub{ $canvas->itemconfigure("R",-fill=>'white');});
 
                        my $tr_rect = $canvas->createRectangle($maxx-$rect_ext,$maxy-$rect_ext,$maxx+$rect_ext,$maxy+$rect_ext, -fill=>'white',-outline=>'white');  
                        $canvas->itemconfigure($tr_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("TR" , "withtag", $tr_rect);
                        $canvas->bind("TR","<Enter>"=> sub{$canvas->itemconfigure("TR",-fill=>'green')});
                        $canvas->bind("TR","<Leave>"=> sub{ $canvas->itemconfigure("TR",-fill=>'white');});

                        my $t_rect = $canvas->createRectangle(($minx+$maxx)/2-$rect_ext,$maxy-$rect_ext,($minx+$maxx)/2+$rect_ext,$maxy+$rect_ext, -fill=>'white',-outline=>'white');  
                        $canvas->itemconfigure($t_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("T" , "withtag", $t_rect);
                        $canvas->bind("T","<Enter>"=> sub{$canvas->itemconfigure("T",-fill=>'green')});
                        $canvas->bind("T","<Leave>"=> sub{ $canvas->itemconfigure("T",-fill=>'white');});

                        my $tl_rect = $canvas->createRectangle($minx-$rect_ext,$maxy-$rect_ext,$minx+$rect_ext,$maxy+$rect_ext, -fill=>'white',-outline=>'white');  
                        $canvas->itemconfigure($tl_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("TL" , "withtag", $tl_rect);
                        $canvas->bind("TL","<Enter>"=> sub{$canvas->itemconfigure("TL",-fill=>'green')});
                        $canvas->bind("TL","<Leave>"=> sub{ $canvas->itemconfigure("TL",-fill=>'white');});

                        my $l_rect = $canvas->createRectangle($minx-$rect_ext,($miny+$maxy)/2-$rect_ext,$minx+$rect_ext,($miny+$maxy)/2+$rect_ext, -fill=>'white',-outline=>'white');  
                        $canvas->itemconfigure($l_rect, -tags =>'STRETCH_RECT' );
                        $canvas->addtag("L" , "withtag", $l_rect);
                        $canvas->bind("L","<Enter>"=> sub{$canvas->itemconfigure("L",-fill=>'green')});
                        $canvas->bind("L","<Leave>"=> sub{ $canvas->itemconfigure("L",-fill=>'white');});
                        $proceed = 1;
                     }#if exists in pseudo db
                  }#if hier instance found
               }#if id found
               my $moving_start = 0;  
               $canvas->CanvasBind('<1>' => sub{
                           if($proceed == 1){
                              my @xy = $canvas->eventLocation();
                              my $x = $xy[0];
                              my $y = $xy[1];
                              $stretch_rect = "";
                              my @id      = $canvas->find(qw/withtag current/);
                              if(@id >= 1 ) {
                                my @tagList = $canvas->gettags($id[0]);
                                $stretch_rect = $tagList[1];
                              }
                              $oldx = $x;
                              $oldy = $y;
                            }#if resize possible
                    });
               $canvas->CanvasBind('<B1-Motion>' => sub {
                           if($proceed == 1 && $stretch_rect ne ""){
                              my @xy = $canvas->eventLocation();
                              my $x = $xy[0];
                              my $y = $xy[1];
                              my @coords = $canvas->coords($instance);
                              my @x_coord_array = ();   
                              my @y_coord_array = ();   
                              my $x_diff = $x-$oldx;
                              my $y_diff = $y-$oldy;
                              for(my $i=0; $i<=$#coords; $i=$i+2){
                                  push(@x_coord_array, $coords[$i]);
                                  push(@y_coord_array, $coords[$i+1]);
                              }
                              @x_coord_array = sort{$a<=>$b}@x_coord_array; 
                              @y_coord_array = sort{$a<=>$b}@y_coord_array;
                              my $minx = $x_coord_array[0];
                              my $miny = $y_coord_array[0];
                              my $maxx = $x_coord_array[-1];
                              my $maxy = $y_coord_array[-1];
                              my $width = $maxx - $minx; 
                              my $height = $maxy - $miny; 
                              if($stretch_rect eq "T"){
                                 $canvas->configure(-cursor => 'top_side');
                                 my @opp_coords = $canvas->coords("B");
                                 if($y <= $opp_coords[3]){return}
                                 my $mid_point = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("T","TL","TR","L","R");
                                 my $new_height = $height+$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_point == $coords[$i+1]){
                                     }else{
                                        $coords[$i+1] = $miny + ($coords[$i+1] -$miny)*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move = ($miny+(($st_rect_coords[1]+$st_rect_coords[3])/2 -$miny)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => 0, $move);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "R"){
                                 $canvas->configure(-cursor => 'right_side');
                                 my @opp_coords = $canvas->coords("L");
                                 if($x <= $opp_coords[2]){return}
                                 my $mid_point = ($opp_coords[0]+$opp_coords[2])/2;
                                 my @moving_st_rect = ("T","TR","R","BR","B");
                                 my $new_width = $width+$x_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_point == $coords[$i]){
                                     }else{
                                        $coords[$i] = $minx + ($coords[$i] -$minx)*$new_width/$width;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move = ($minx+(($st_rect_coords[0]+$st_rect_coords[2])/2 -$minx)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      $canvas->move("$st_rect" => $move,0);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "B"){
                                 $canvas->configure(-cursor => 'bottom_side');
                                 my @opp_coords = $canvas->coords("T");
                                 if($y >= $opp_coords[1]){return}
                                 my $mid_point = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("B","BL","BR","L","R");
                                 my $new_height = $height-$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_point == $coords[$i+1]){
                                     }else{
                                        $coords[$i+1] = $maxy - ($maxy-$coords[$i+1])*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move = ($maxy-($maxy-($st_rect_coords[1]+$st_rect_coords[3])/2)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => 0, $move);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "L"){
                                 $canvas->configure(-cursor => 'left_side');
                                 my @opp_coords = $canvas->coords("R");
                                 if($x >= $opp_coords[0]){return}
                                 my $mid_point = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("BL","B","T","TL","L");
                                 my $new_width = $width-$x_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_point == $coords[$i]){
                                     }else{
                                        $coords[$i] = $maxx - ($maxx-$coords[$i])*$new_width/$width;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move = ($maxx-($maxx-($st_rect_coords[0]+$st_rect_coords[2])/2)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      $canvas->move("$st_rect" => $move,0);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "TL"){
                                 $canvas->configure(-cursor => 'top_left_corner');
                                 my @opp_coords = $canvas->coords("BR");
                                 if($x >= $opp_coords[0] || $y <= $opp_coords[3]){return}
                                 my $mid_x = ($opp_coords[0]+$opp_coords[2])/2;
                                 my $mid_y = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("B", "BL", "L", "TL", "T", "TR", "R");
                                 my $new_width = $width-$x_diff;
                                 my $new_height = $height+$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_x == $coords[$i] && $mid_y == $coords[$i+1]){
                                     }else{
                                        $coords[$i] = $maxx - ($maxx-$coords[$i])*$new_width/$width;
                                        $coords[$i+1] = $miny + ($coords[$i+1] -$miny)*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move_x = ($maxx-($maxx-($st_rect_coords[0]+$st_rect_coords[2])/2)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      my $move_y = ($miny+(($st_rect_coords[1]+$st_rect_coords[3])/2 -$miny)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => $move_x, $move_y);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "TR"){
                                 $canvas->configure(-cursor => 'top_right_corner');
                                 my @opp_coords = $canvas->coords("BL");
                                 if($x <= $opp_coords[2] || $y <= $opp_coords[3]){return}
                                 my $mid_x = ($opp_coords[0]+$opp_coords[2])/2;
                                 my $mid_y = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("B", "BR", "R", "TR", "T", "TL", "L");
                                 my $new_width = $width+$x_diff;
                                 my $new_height = $height+$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_x == $coords[$i] && $mid_y == $coords[$i+1]){
                                     }else{
                                        $coords[$i] = $minx + ($coords[$i] - $minx)*$new_width/$width;
                                        $coords[$i+1] = $miny + ($coords[$i+1] -$miny)*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move_x = ($minx+(($st_rect_coords[0]+$st_rect_coords[2])/2 -$minx)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      my $move_y = ($miny+(($st_rect_coords[1]+$st_rect_coords[3])/2 -$miny)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => $move_x, $move_y);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "BL"){
                                 $canvas->configure(-cursor => 'bottom_left_corner');
                                 my @opp_coords = $canvas->coords("TR");
                                 if($x >= $opp_coords[0] || $y >= $opp_coords[1]){return}
                                 my $mid_x = ($opp_coords[0]+$opp_coords[2])/2;
                                 my $mid_y = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("B", "BL", "L", "TL", "T", "BR", "R");
                                 my $new_width = $width-$x_diff;
                                 my $new_height = $height-$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_x == $coords[$i] && $mid_y == $coords[$i+1]){
                                     }else{
                                        $coords[$i] = $maxx - ($maxx-$coords[$i])*$new_width/$width;
                                        $coords[$i+1] = $maxy - ($maxy-$coords[$i+1])*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move_x = ($maxx-($maxx-($st_rect_coords[0]+$st_rect_coords[2])/2)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      my $move_y = ($maxy-($maxy-($st_rect_coords[1]+$st_rect_coords[3])/2)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => $move_x, $move_y);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq "BR"){
                                 $canvas->configure(-cursor => 'bottom_right_corner');
                                 my @opp_coords = $canvas->coords("TL");
                                 if($x <= $opp_coords[2] || $y >= $opp_coords[1]){return}
                                 my $mid_x = ($opp_coords[0]+$opp_coords[2])/2;
                                 my $mid_y = ($opp_coords[1]+$opp_coords[3])/2;
                                 my @moving_st_rect = ("B", "BL", "L", "TR", "T", "BR", "R");
                                 my $new_width = $width+$x_diff;
                                 my $new_height = $height-$y_diff;
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     if($mid_x == $coords[$i] && $mid_y == $coords[$i+1]){
                                     }else{
                                        $coords[$i] = $minx + ($coords[$i] - $minx)*$new_width/$width;
                                        $coords[$i+1] = $maxy - ($maxy-$coords[$i+1])*$new_height/$height;
                                     }
                                   }
                                   foreach my $st_rect (@moving_st_rect){
                                      my @st_rect_coords = $canvas->coords($st_rect);
                                      my $move_x = ($minx+(($st_rect_coords[0]+$st_rect_coords[2])/2 -$minx)*$new_width/$width)-($st_rect_coords[0]+$st_rect_coords[2])/2;
                                      my $move_y = ($maxy-($maxy-($st_rect_coords[1]+$st_rect_coords[3])/2)*$new_height/$height)-($st_rect_coords[1]+$st_rect_coords[3])/2;
                                      $canvas->move("$st_rect" => $move_x, $move_y);
                                   }
                                   $canvas->coords($instance => @coords);
                                   $oldx = $x;
                                   $oldy = $y;
                              }elsif($stretch_rect eq $instance){
                                   $moving_start = 1;   
                                   $canvas->configure(-cursor => 'diamond_cross');
                                   $canvas->move($instance => $x - $oldx, $y - $oldy);
                                   $canvas->move("L" => $x - $oldx, $y - $oldy);
                                   $canvas->move("R" => $x - $oldx, $y - $oldy);
                                   $canvas->move("T" => $x - $oldx, $y - $oldy);
                                   $canvas->move("B" => $x - $oldx, $y - $oldy);
                                   $canvas->move("TL" => $x - $oldx, $y - $oldy);
                                   $canvas->move("TR" => $x - $oldx, $y - $oldy);
                                   $canvas->move("BL" => $x - $oldx, $y - $oldy);
                                   $canvas->move("BR" => $x - $oldx, $y - $oldy);
                                   $oldx = $x;
                                   $oldy = $y;
                              }             
                           }#if resize possible 
                    });
               $canvas->CanvasBind('<B1-ButtonRelease>' => sub {
                           if($proceed == 1 && $stretch_rect ne ""){
                              my @coords = $canvas->coords($instance);
                              $canvas->configure(-cursor => 'top_left_arrow');
                              if($moving_start == 1){
                                  my @poly_coords = ();
                                  for(my $i=0; $i<=$#coords; $i=$i+2){
                                      my @xy = dbfWGuiWGui2Micron($coords[$i],$coords[$i+1]);
                                      push(@poly_coords, @xy);
                                  }
                                  &create_popup_toSetStatusIfMoving($instance, \@poly_coords);
                                  $moving_start = 0;
                              }else{ 
                                 my @x_coords = ();
                                 my @y_coords = ();
                                 for(my $i=0; $i<=$#coords; $i=$i+2){
                                     push(@x_coords, $coords[$i]);
                                     push(@y_coords, $coords[$i+1]);
                                 }
                                 @x_coords = sort{$a<=>$b}@x_coords;
                                 @y_coords = sort{$a<=>$b}@y_coords;
                                 my @ll = dbfWGuiWGui2Micron($x_coords[0],$y_coords[0]);
                                 my @ur = dbfWGuiWGui2Micron($x_coords[-1],$y_coords[-1]);
                                 &create_popup_toSetStatusIfResizing($instance,\@ll,\@ur);    
                                 #&setPseudoInstBox("-inst", $instance, "-bBox", "{$ll[0],$ll[1],$ur[0],$ur[1]}");
                                 #----------------updating specify table ---------------------------------------#
                                 my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
                                 my @poly_coords = (@ll, @ur);
                                 &update_specifyTable_ifResizeOrMove_hierInst($instance, $cellref,\@poly_coords,"resize");
                               }
                            }
                    });
     });
}#sub moveResizeInstance_widget

########################################################################################################
##################### subroutine to make rectilinear cuts in hierarical Instances ######################
########################################################################################################
#sub rectilinearCut_widget{
#my $canvas = $_[0];
#&resetCanvasBinding($canvas);
#
#my @MODCOORDS = ();
#my @tempcoords = ();
#my @newCoords = ();
#
#my $setRectCut = 0;
#my $inst = "";
#my $rect;
#my $startX = 0;
#my $startY = 0;
#my $canx = 0;
#my $cany = 0;
#$canvas->CanvasBind('<1>' => sub {
#                 my @xy = $canvas->eventLocation();
#                 my $x = $xy[0];
#                 my $y = $xy[1];
#                 $canx = $xy[0];
#                 $cany = $xy[1];
#                 my @id      = $canvas->find(qw/withtag current/);
#                 my @tagList = $canvas->gettags($id[-1]);
#                 $inst = $tagList[1]; 
#                 @MODCOORDS  = $canvas->coords($id[-1]);
#                 $startX = 0; $startY = 0;
#                 $setRectCut = 0;
#                 my $final;
#                 if($tagList[0] eq "HIER_MOD"){
#                    if($#MODCOORDS == 3){
#                       @MODCOORDS = ($MODCOORDS[0],$MODCOORDS[1],$MODCOORDS[0],$MODCOORDS[3],$MODCOORDS[2],$MODCOORDS[3],$MODCOORDS[2],$MODCOORDS[1]);
#                    }
#                    for(my $i=0; $i<=$#MODCOORDS; $i=$i+2){
#                        if($i == ($#MODCOORDS -1)){$final = $MODCOORDS[0];
#                        }else {$final = $MODCOORDS[$i+2];}      
#                        if((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1)){
#                            $canvas->configure(-cursor => 'top_left_corner');
##print "x $x,y $y\n";
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
#                        }elsif((($MODCOORDS[$i] -$x)<=5 && ($MODCOORDS[$i] -$x)>=1)&& (($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1)){
#                            $canvas->configure(-cursor => 'top_right_corner');
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
#                        }elsif((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($y -$MODCOORDS[$i+1])<=5 && ($y -$MODCOORDS[$i+1])>=1)){
#                           $canvas->configure(-cursor => 'bottom_left_corner');
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
#                        }elsif((($MODCOORDS[$i]-$x)<=5 && ($MODCOORDS[$i]-$x)>=1) && (($y-$MODCOORDS[$i+1])<=5 && ($y-$MODCOORDS[$i+1])>=1)){
#                            $canvas->configure(-cursor => 'bottom_right_corner');
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
#                        }elsif((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($y - $MODCOORDS[$i+1])>5 && ($MODCOORDS[$i+3]-$y)>5)){
#                            $canvas->configure(-cursor => 'left_side');
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $y; 
#                        }elsif((($MODCOORDS[$i]-$x)<=5 && ($MODCOORDS[$i]-$x)>=1) && (($MODCOORDS[$i+1]-$y)>5 && ($y - $MODCOORDS[$i+3])>5)){
#                            $canvas->configure(-cursor => 'right_side');
#                            $setRectCut = 1;
#                            $startX = $MODCOORDS[$i]; $startY = $y; 
#                        }elsif((($y - $MODCOORDS[$i+1])<=5 && ($y - $MODCOORDS[$i+1])>=1) && (($x - $final)>5 && ($MODCOORDS[$i]-$x)>5)){
#                            $canvas->configure(-cursor => 'bottom_side');
#                            $setRectCut = 1;
#                            $startX = $x; $startY = $MODCOORDS[$i+1]; 
#                        }elsif((($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1) && (($x - $MODCOORDS[$i])>5 && ($MODCOORDS[$i+2]-$x)>5)){
#                            $canvas->configure(-cursor => 'top_side');
#                            $setRectCut = 1;
#                            $startX = $x; $startY = $MODCOORDS[$i+1]; 
#                        }else{} 
#                     }      
#                     if($setRectCut == 1){
#                        @tempcoords = ($startX, $startY, $startX, $startY);  
#                        $rect= $canvas->createRectangle(@tempcoords,
#                                                        -outline => 'green',
#                                                        -tags    => ['TEMP'],
#                                                         );
#                     }else{return;$canvas->configure(-cursor => 'top_left_arrow');}
#                 }else{return;$canvas->configure(-cursor => 'top_left_arrow');}     
#});
#
#$canvas->CanvasBind('<B1-Motion>' => sub {
#         if($setRectCut == 1){
#            my @xy = $canvas->eventLocation();
#            my $x = $xy[0];
#            my $y = $xy[1];
#            my $overlapllx = $x - 1 ;
#            my $overlaplly = $y - 1 ;
#            my $overlapurx = $x + 1 ;
#            my $overlapury = $y + 1 ;
#            my @id = $canvas->find("overlapping", $overlapllx, $overlaplly, $overlapurx, $overlapury);
#            my @tagList = $canvas->gettags($id[0]);
#            if($tagList[1] ne $inst){
#               $canvas->configure(-cursor => 'top_left_arrow');
#               $canvas->delete('TEMP');
#               $setRectCut = 0;
#               return;
#            }else{
#               @tempcoords[2,3] = ($x,$y);
#               $canvas->coords($rect => @tempcoords);
#            }
#         }else{return;}
#});
#
#$canvas->CanvasBind('<B1-ButtonRelease>' => sub {
#         if($setRectCut == 1){
#           my $x = $canx; my $y = $cany;
#           my $final; 
#           if($tempcoords[1] >= $tempcoords[3]){
#              my $tval= $tempcoords[1];
#              $tempcoords[1] = $tempcoords[3];
#              $tempcoords[3] = $tval;
#           }
#           if($tempcoords[0] >= $tempcoords[2]){
#              my $tval= $tempcoords[0];
#              $tempcoords[0] = $tempcoords[2];
#              $tempcoords[2] = $tval;
#           }
#           
#           for(my $i=0; $i<=$#MODCOORDS; $i=$i+2){
#
#               if($i == ($#MODCOORDS -1)){$final = $MODCOORDS[0];
#               }else {$final = $MODCOORDS[$i+2];}
#      
#               if((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1)){
#                  push(@newCoords,$tempcoords[0],$tempcoords[1],$tempcoords[2],$tempcoords[1],$tempcoords[2],$tempcoords[3]);
#               }elsif((($MODCOORDS[$i] -$x)<=5 && ($MODCOORDS[$i] -$x)>=1)&& (($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1)){
#                  push(@newCoords,$tempcoords[0],$tempcoords[3],$tempcoords[0],$tempcoords[1],$tempcoords[2],$tempcoords[1]);
#               }elsif((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($y -$MODCOORDS[$i+1])<=5 && ($y -$MODCOORDS[$i+1])>=1)){
#                  push(@newCoords,$tempcoords[2],$tempcoords[1],$tempcoords[2],$tempcoords[3],$tempcoords[0],$tempcoords[3]);
#               }elsif((($MODCOORDS[$i]-$x)<=5 && ($MODCOORDS[$i]-$x)>=1) && (($y-$MODCOORDS[$i+1])<=5 && ($y-$MODCOORDS[$i+1])>=1)){
#                  push(@newCoords,$tempcoords[2],$tempcoords[3],$tempcoords[0],$tempcoords[3],$tempcoords[0],$tempcoords[1]);
#               }elsif((($x - $MODCOORDS[$i])<=5 && ($x - $MODCOORDS[$i])>=1) && (($y - $MODCOORDS[$i+1])>5 && ($MODCOORDS[$i+3]-$y)>5)){
#                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
#                  push(@newCoords,$tempcoords[0],$tempcoords[1],$tempcoords[2],$tempcoords[1],$tempcoords[2],$tempcoords[3],$tempcoords[0],$tempcoords[3]);
#               }elsif((($MODCOORDS[$i]-$x)<=5 && ($MODCOORDS[$i]-$x)>=1) && (($MODCOORDS[$i+1]-$y)>5 && ($y - $MODCOORDS[$i+3])>5)){
#                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
#                  push(@newCoords,$tempcoords[2],$tempcoords[3],$tempcoords[0],$tempcoords[3],$tempcoords[0],$tempcoords[1],$tempcoords[2],$tempcoords[1]);
#               }elsif((($y - $MODCOORDS[$i+1])<=5 && ($y - $MODCOORDS[$i+1])>=1) && (($x - $final)>5 && ($MODCOORDS[$i]-$x)>5)){
#                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
#                  push(@newCoords,$tempcoords[2],$tempcoords[1],$tempcoords[2],$tempcoords[3],$tempcoords[0],$tempcoords[3],$tempcoords[0],$tempcoords[1]);
#               }elsif((($MODCOORDS[$i+1]-$y)<=5 && ($MODCOORDS[$i+1]-$y)>=1) && (($x - $MODCOORDS[$i])>5 && ($MODCOORDS[$i+2]-$x)>5)){
#                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
#                  push(@newCoords,$tempcoords[0],$tempcoords[3],$tempcoords[0],$tempcoords[1],$tempcoords[2],$tempcoords[1],$tempcoords[2],$tempcoords[3]);
#               }else{push(@newCoords, $MODCOORDS[$i],$MODCOORDS[$i+1]);} 
#           }#for      
#          # Delete the rectangle.
#           $canvas->configure(-cursor => 'top_left_arrow');
#           $canvas->delete('TEMP');
#           my $fill_color = $canvas->itemcget($inst, -fill);
#           my $outline_color = $canvas->itemcget($inst, -outline);
#           $canvas->delete($inst);
#           my $inst_rect = $canvas->createPolygon(@newCoords, -outline=>$outline_color, -fill=>$fill_color, -stipple=>"gray12");
#           $canvas->itemconfigure($inst_rect, -tags =>'HIER_MOD' );
#           $canvas->addtag($inst , "withtag", $inst_rect);
#
#           @newCoords = (); 
#           @tempcoords = ();
#           @MODCOORDS = ();
#           $setRectCut = 0;
#         }else{return;}
#    });
#
#}#sub rectilinearCut_widget

sub rectilinearCut_widget{
my $canvas = $_[0];
&resetCanvasBinding($canvas);

my @MODCOORDS = ();
my @tempcoords = ();
my @newCoords = ();

my $setRectCut = 0;
my $inst = "";
my $rect;
my $startX = 0;
my $startY = 0;
my $canx = 0;
my $cany = 0;
my $x_margin = 0;
my $y_margin = 0;
$canvas->CanvasBind('<1>' => sub {
                 my @xy = $canvas->eventLocation();
                 my $x = $xy[0];
                 my $y = $xy[1];
                 $canx = $xy[0];
                 $cany = $xy[1];
                 my @id      = $canvas->find(qw/withtag current/);
                 if(@id >=1 ){
                    my @tagList = $canvas->gettags($id[-1]);
                    $inst = $tagList[1]; 
                    @MODCOORDS  = $canvas->coords($id[-1]);
                    $startX = 0; $startY = 0;
                    $setRectCut = 0;
                    my @x_coords = ();  
                    my @y_coords = ();  
                    $x_margin = 0;   
                    $y_margin = 0;   
                    my $final;

                    if($tagList[0] eq "HIER_MOD"){
                       if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}){
                          my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$tagList[1]}->dbPimDBGetInstCellref;
                          my $class = $DLDB{$cellref}->dbDldbGetClass if(exists $DLDB{$cellref});
                          return if($class == 10);#if hardMacro

                          for(my $xx=0; $xx<=$#MODCOORDS; $xx=$xx+2){
                              push(@x_coords, $MODCOORDS[$xx]);               
                              push(@y_coords, $MODCOORDS[$xx+1]);
                          }                   
                          @x_coords = sort{$a<=>$b}@x_coords;
                          @y_coords = sort{$a<=>$b}@y_coords;
                          $x_margin = ($x_coords[-1] - $x_coords[0])/15;
                          $y_margin = ($x_coords[-1] - $x_coords[0])/15;

                          if($#MODCOORDS == 3){
                             @MODCOORDS = ($MODCOORDS[0],$MODCOORDS[1],$MODCOORDS[2],$MODCOORDS[1],$MODCOORDS[2],$MODCOORDS[3],$MODCOORDS[0],$MODCOORDS[3]);
                          }
                          for(my $i=0; $i<=$#MODCOORDS; $i=$i+2){
                              if($i == ($#MODCOORDS -1)){$final = $MODCOORDS[1];
                              }else {$final = $MODCOORDS[$i+1];}      
                              if((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=0) && (($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=0)){
                                  $canvas->configure(-cursor => 'top_left_corner');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
                              }elsif((($MODCOORDS[$i] -$x)<=$x_margin && ($MODCOORDS[$i] -$x)>=0)&& (($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=0)){
                                  $canvas->configure(-cursor => 'top_right_corner');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
                              }elsif((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=0) && (($y -$MODCOORDS[$i+1])<=$y_margin && ($y -$MODCOORDS[$i+1])>=0)){
                                 $canvas->configure(-cursor => 'bottom_left_corner');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
                              }elsif((($MODCOORDS[$i]-$x)<=$x_margin && ($MODCOORDS[$i]-$x)>=0) && (($y-$MODCOORDS[$i+1])<=$y_margin && ($y-$MODCOORDS[$i+1])>=0)){
                                  $canvas->configure(-cursor => 'bottom_right_corner');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $MODCOORDS[$i+1]; 
                              }elsif((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=0) && (($MODCOORDS[$i+1] - $y)>$y_margin && ($y - $final)>$y_margin)){
                                  $canvas->configure(-cursor => 'left_side');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $y; 
                              }elsif((($MODCOORDS[$i]-$x)<=$x_margin && ($MODCOORDS[$i]-$x)>=0) && (($y - $MODCOORDS[$i+1])>$y_margin && ($MODCOORDS[$i+3] - $y)>$y_margin)){
                                  $canvas->configure(-cursor => 'right_side');
                                  $setRectCut = 1;
                                  $startX = $MODCOORDS[$i]; $startY = $y; 
                              }elsif((($y - $MODCOORDS[$i+1])<=$y_margin && ($y - $MODCOORDS[$i+1])>=0) && (($x - $MODCOORDS[$i])>$x_margin && ($MODCOORDS[$i+2]-$x)>$x_margin)){
                                  $canvas->configure(-cursor => 'bottom_side');
                                  $setRectCut = 1;
                                  $startX = $x; $startY = $MODCOORDS[$i+1]; 
                              }elsif((($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=0) && (($MODCOORDS[$i]-$x)>$x_margin && ($x-$MODCOORDS[$i+2])>$x_margin)){
                                  $canvas->configure(-cursor => 'top_side');
                                  $setRectCut = 1;
                                  $startX = $x; $startY = $MODCOORDS[$i+1]; 
                              }else{} 
                           }      
                           if($setRectCut == 1){
                              @tempcoords = ($startX, $startY, $startX, $startY);  
                              $rect= $canvas->createRectangle(@tempcoords,
                                                              -outline => 'green',
                                                              -tags    => ['TEMP'],
                                                               );
                           }else{return;$canvas->configure(-cursor => 'top_left_arrow');}
                       }#if not a hard macro
                    }else{return;$canvas->configure(-cursor => 'top_left_arrow');}     
                 }#if id found 
});

$canvas->CanvasBind('<B1-Motion>' => sub {
         if($setRectCut == 1){
            my @xy = $canvas->eventLocation();
            my $x = $xy[0];
            my $y = $xy[1];
            my $overlapllx = $x - 1 ;
            my $overlaplly = $y - 1 ;
            my $overlapurx = $x + 1 ;
            my $overlapury = $y + 1 ;
            my @id = $canvas->find("overlapping", $overlapllx, $overlaplly, $overlapurx, $overlapury);
            my @tagList = $canvas->gettags($id[0]);
            if($tagList[1] ne $inst){
               $canvas->configure(-cursor => 'top_left_arrow');
               $canvas->delete('TEMP');
               $setRectCut = 0;
               return;
            }else{
               @tempcoords[2,3] = ($x,$y);
               $canvas->coords($rect => @tempcoords);
            }
         }else{return;}
});

$canvas->CanvasBind('<B1-ButtonRelease>' => sub {
         if($setRectCut == 1){
           my $x = $canx; my $y = $cany;
           my $final; 
           if($tempcoords[1] >= $tempcoords[3]){
              my $tval= $tempcoords[1];
              $tempcoords[1] = $tempcoords[3];
              $tempcoords[3] = $tval;
           }
           if($tempcoords[0] >= $tempcoords[2]){
              my $tval= $tempcoords[0];
              $tempcoords[0] = $tempcoords[2];
              $tempcoords[2] = $tval;
           }
           for(my $i=0; $i<=$#MODCOORDS; $i=$i+2){
               if($i == ($#MODCOORDS -1)){$final = $MODCOORDS[1];
               }else {$final = $MODCOORDS[$i+1];}

               if((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=1) && (($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=1)){
                  push(@newCoords,$tempcoords[2],$tempcoords[3],$tempcoords[2],$tempcoords[1],$tempcoords[0],$tempcoords[1]);
               }elsif((($MODCOORDS[$i] -$x)<=$x_margin && ($MODCOORDS[$i] -$x)>=1)&& (($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=1)){
                  push(@newCoords,$tempcoords[2],$tempcoords[1],$tempcoords[0],$tempcoords[1],$tempcoords[0],$tempcoords[3]);
               }elsif((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=1) && (($y -$MODCOORDS[$i+1])<=$y_margin && ($y -$MODCOORDS[$i+1])>=1)){
                  push(@newCoords,$tempcoords[0],$tempcoords[3],$tempcoords[2],$tempcoords[3],$tempcoords[2],$tempcoords[1]);
               }elsif((($MODCOORDS[$i]-$x)<=$x_margin && ($MODCOORDS[$i]-$x)>=1) && (($y-$MODCOORDS[$i+1])<=$y_margin && ($y-$MODCOORDS[$i+1])>=1)){
                  push(@newCoords,$tempcoords[0],$tempcoords[1],$tempcoords[0],$tempcoords[3],$tempcoords[2],$tempcoords[3]);
               }elsif((($x - $MODCOORDS[$i])<=$x_margin && ($x - $MODCOORDS[$i])>=1) && (($MODCOORDS[$i+1] - $y)>$y_margin && ($y - $final)>$y_margin)){ #left
                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
                  push(@newCoords,$tempcoords[0],$tempcoords[3],$tempcoords[2],$tempcoords[3],$tempcoords[2],$tempcoords[1],$tempcoords[0],$tempcoords[1]);
               }elsif((($MODCOORDS[$i]-$x)<=$x_margin && ($MODCOORDS[$i]-$x)>=1) && (($y - $MODCOORDS[$i+1])>$y_margin && ($MODCOORDS[$i+3] - $y)>$y_margin)){#right
                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
                  push(@newCoords,$tempcoords[2],$tempcoords[1],$tempcoords[0],$tempcoords[1],$tempcoords[0],$tempcoords[3],$tempcoords[2],$tempcoords[3]);
               }elsif((($y - $MODCOORDS[$i+1])<=$y_margin && ($y - $MODCOORDS[$i+1])>=1) && (($x - $MODCOORDS[$i])>$x_margin && ($MODCOORDS[$i+2]-$x)>$x_margin)){#bottom
                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
                  push(@newCoords,$tempcoords[0],$tempcoords[1],$tempcoords[0],$tempcoords[3],$tempcoords[2],$tempcoords[3],$tempcoords[2],$tempcoords[1]);
               }elsif((($MODCOORDS[$i+1]-$y)<=$y_margin && ($MODCOORDS[$i+1]-$y)>=1) && (($MODCOORDS[$i]-$x)>$x_margin && ($x-$MODCOORDS[$i+2])>$x_margin)){#top
                  push(@newCoords,$MODCOORDS[$i],$MODCOORDS[$i+1]);
                  push(@newCoords,$tempcoords[2],$tempcoords[3],$tempcoords[2],$tempcoords[1],$tempcoords[0],$tempcoords[1],$tempcoords[0],$tempcoords[3]);
               }else{push(@newCoords, $MODCOORDS[$i],$MODCOORDS[$i+1]);} 
           }#for      
            
          # Delete the rectangle.
           $canvas->configure(-cursor => 'top_left_arrow');
           $canvas->delete('TEMP');
           my $fill_color = $canvas->itemcget($inst, -fill);
           my $outline_color = $canvas->itemcget($inst, -outline);
           $canvas->delete($inst);
           my $inst_rect = $canvas->createPolygon(@newCoords, -outline=>$outline_color, -fill=>$fill_color, -stipple=>"gray12");
           $canvas->itemconfigure($inst_rect, -tags =>'HIER_MOD' );
           $canvas->addtag($inst , "withtag", $inst_rect);

           @newCoords = (); 
           @tempcoords = ();
           @MODCOORDS = ();
           $setRectCut = 0;
         }else{return;}
    });

}#sub rectilinearCut_widget

########################################################################################################
############################## subroutine to create RedoUndo Array #####################################
########################################################################################################
sub create_RedoUndo_array{
my @bbox_old = ();
my @bbox = ();
my $inst = $_[0];
$bbox_old[0] = $_[1];
$bbox_old[1] = $_[2];
$bbox_old[2] = $_[3];
$bbox_old[3] = $_[4];
$bbox[0] = $_[5];
$bbox[1] = $_[6];
$bbox[2] = $_[7];
$bbox[3] = $_[8];

push(@REDO_UNDO_ARRAY,[$inst,$bbox_old[0],$bbox_old[1],$bbox_old[2],$bbox_old[3],$bbox[0],$bbox[1],$bbox[2],$bbox[3]]);
$GLOBAL->dbGlobalSetRedoUndoCount($#REDO_UNDO_ARRAY);

}#sub create_RedoUndo_array

sub perform_redo_undo{
my $action = $_[0];
my $canvas = $_[1];
my @bbox = ();
my $inst = "";
my $parent = $TOP_MODULE;
my $count = $GLOBAL->dbGlobalGetRedoUndoCount;

 if($REDO_UNDO_ARRAY[$count]){
    my $arg = $REDO_UNDO_ARRAY[$count];  
    $inst    = @$arg[0];
      if($action eq "undo"){
         $bbox[0] = 20 + @$arg[1]*$MICRONFACTOR;
         $bbox[1] = 20 + @$arg[2]*$MICRONFACTOR;
         $bbox[2] = 20 + @$arg[3]*$MICRONFACTOR;
         $bbox[3] = 20 + @$arg[4]*$MICRONFACTOR;
         print "moved $inst from @$arg[5],@$arg[6],@$arg[7],@$arg[8] to @$arg[1],@$arg[2],@$arg[3],@$arg[4]\n";
         $PSEUDO_VINST_ALREADY{$parent}{$inst}->dbPimDBSetInstRelBbox(@$arg[1],@$arg[2],@$arg[3],@$arg[4]) if ( exists $PSEUDO_VINST_ALREADY{$parent}{$inst} );
         $count = $count-1;
         if($count < 0){$count = 0;}
      }else{
         $bbox[0] = 20 + @$arg[5]*$MICRONFACTOR;
         $bbox[1] = 20 + @$arg[6]*$MICRONFACTOR;
         $bbox[2] = 20 + @$arg[7]*$MICRONFACTOR;
         $bbox[3] = 20 + @$arg[8]*$MICRONFACTOR;
         print "moved $inst from @$arg[1],@$arg[2],@$arg[3],@$arg[4] to @$arg[5],@$arg[6],@$arg[7],@$arg[8]\n";
         $PSEUDO_VINST_ALREADY{$parent}{$inst}->dbPimDBSetInstRelBbox(@$arg[5],@$arg[6],@$arg[7],@$arg[8]) if ( exists $PSEUDO_VINST_ALREADY{$parent}{$inst} );
         $count = $count+1;
         if($count > $#REDO_UNDO_ARRAY){$count = $#REDO_UNDO_ARRAY;}
      }
    my $fill_color = $canvas->itemcget($inst, -fill);
    my $outline_color = $canvas->itemcget($inst, -outline);
    $canvas->delete($inst);
    my $inst_rect = $canvas->createRectangle($bbox[0],$bbox[1],$bbox[2],$bbox[3], -outline=>$fill_color, -fill=>$outline_color, -stipple=>"gray12");
    $canvas->itemconfigure($inst_rect, -tags =>'HIER_MOD' );
    $canvas->addtag($inst , "withtag", $inst_rect);
    $GLOBAL->dbGlobalSetRedoUndoCount($count) if($REDO_UNDO_ARRAY[$count]);
 }
}#sub perform_redo_undo

########################################################################################################
sub create_popup_toSetStatusIfMoving {
my $inst = $_[0];
my @coords = @{$_[1]};
my $popWin = MainWindow->new();
$popWin->title("Set Instance Status");
$popWin->geometry("200x200");

my $status = "PLACED";
#----------------updating specify table ---------------------------------------#
my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$inst}->dbPimDBGetInstCellref;
#------------------------------------------------------------------------------#

my $frame1 = $popWin->Frame()->pack(-side=>"top", -expand=>1, -fill=>"x");
my $frame2 = $popWin->Frame()->pack(-side=>"top");

$frame1->Radiobutton(-variable => \$status,-text => "FIXED",-value => "FIXED")->pack(-side => 'top');
$frame1->Radiobutton(-variable => \$status,-text => "FIRM",-value => "FIRM")->pack(-side => 'top');
$frame1->Radiobutton(-variable => \$status,-text => "PLACED",-value => "PLACED")->pack(-side => 'top');

$frame2->Button(-text=>"Ok", -command=>sub{&movePseudoHierInst("-inst", $inst, -status=>$status, "-coords", "{@coords}");
                                           &update_specifyTable_ifResizeOrMove_hierInst($inst, $cellref,\@coords,"move");
                                           #&resetCanvasBinding($hier_canvas);
                                           $popWin->destroy;})->pack(-side=>"left");
$frame2->Button(-text=>"Cancel", -command=>sub{$popWin->destroy;})->pack(-side=>"left");
}#sub  create_popup_toSetStatusIfMoving


sub create_popup_toSetStatusIfResizing {
my $inst = $_[0];
my @ll = @{$_[1]};
my @ur = @{$_[2]};
my $popWin = MainWindow->new();
$popWin->title("Set Instance Status");
$popWin->geometry("200x200");

my $status = "PLACED";
#----------------updating specify table ---------------------------------------#
my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$inst}->dbPimDBGetInstCellref;
my @poly_coords = (@ll,@ur);
#------------------------------------------------------------------------------#
my $frame1 = $popWin->Frame()->pack(-side=>"top", -expand=>1, -fill=>"x");
my $frame2 = $popWin->Frame()->pack(-side=>"top");

$frame1->Radiobutton(-variable => \$status,-text => "FIXED",-value => "FIXED")->pack(-side => 'top');
$frame1->Radiobutton(-variable => \$status,-text => "FIRM",-value => "FIRM")->pack(-side => 'top');
$frame1->Radiobutton(-variable => \$status,-text => "PLACED",-value => "PLACED")->pack(-side => 'top');

$frame2->Button(-text=>"Ok", -command=>sub{&setPseudoInstBox("-inst", $inst, -status=>$status, "-bBox", "{$ll[0],$ll[1],$ur[0],$ur[1]}");           
                                            &update_specifyTable_ifResizeOrMove_hierInst($inst, $cellref,\@poly_coords,"resize");    
                           
                                           #&resetCanvasBinding($hier_canvas);
                                           $popWin->destroy;})->pack(-side=>"left");
$frame2->Button(-text=>"Cancel", -command=>sub{$popWin->destroy;})->pack(-side=>"left");
}#sub  create_popup_toSetStatusIfResizing

sub get_floorPlan_name{
my $curr_parent_module = $_[0];
my $inst_parent_module = $_[1];
my $instance = $_[2];
my $floorplan = $_[3];
if(exists $MODULE_ALREADY{$curr_parent_module}){
   my @hierInsts = $MODULE_ALREADY{$curr_parent_module}->dbVNOMGetHierInst;
   foreach my $inst(sort @hierInsts){
     my $cellref = $MODULE_ALREADY{$curr_parent_module}->dbVNOMGetHierInstCell($inst);
     my $flplan = $floorplan."/".$inst; 
     if($inst_parent_module eq $curr_parent_module && $instance eq $inst){
       return($flplan);
     }else{
       $flplan = &get_floorPlan_name($cellref,$inst_parent_module,$instance,$flplan);
       if($flplan ne ""){
         return $flplan;
       }
     }
   }#foreach instance
}
return "";
}#sub get_floorPlan_name


1;


