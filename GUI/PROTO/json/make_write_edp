#
########################################################################################################
################### write dia for diagramo def file display first code added by aditya ###################
##########################################################################################################
sub write_edp_dia_old {
    my $out_file = $_[0];
    my $out_str = "";
    my $sub_out_str = "";
    my $glue_str = "";
    my %INST_CONN_POINTS = ();
    open(WRITE,">$out_file");
    if(exists $PSEUDO_MODULE_ALREADY{$TOP_MODULE} ) {
       #print "$TOP_MODULE is the current top module\n";
       my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       my $width = $size[2] - $size[0];
       my $height = $size[3] - $size[1];
       $out_str = $out_str."{\"c\":{\"width\":$width,\"height\":$height,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
      
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          $out_str = $out_str."\"s\":{\"figures\":["; #figure block start
       }
       my $cnt = 0;
       my $connPointIdCnt = 0;
       foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}} ) {
         if($instance eq "PIN"){ 
         }else{ 
            my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
            my @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
            my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;
            #print "INSTANCE: $instance  CELL: $cellref LOC: @loc  STATUS:$status\n";
            if(@loc == 4){
               @loc = ($loc[0], $loc[1], $loc[2], $loc[1], $loc[2], $loc[3], $loc[0], $loc[3]);
            }
            $out_str = $out_str."{\"id\":$cnt,\"name\":\"hardMacro\",";
            $out_str = $out_str."\"primitives\":["; #primitives block start 

            $out_str = $out_str."{\"points\":["; #points block start
            my $midX = ($loc[0] + $loc[4])/2;
            my $midY = ($loc[1] + $loc[5])/2;
            my $vectorURY = $midY - 6; ###### midy -fontSize/2
            for(my $i=0; $i<=$#loc; $i=$i+2){
                my $xx = $loc[$i];
                my $yy = $loc[$i+1];
                $out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }

            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end

            $out_str = $out_str. "{\"str\":\"$instance\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

            $out_str = $out_str."],"; #primitives block end 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#008000\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
          
            ################################# Making connectionPoints string for connectors ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();

            ##--------bottom points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------top points ----------##
            $connXX = $midX-$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$midX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at top 
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------right points ----------##
            my $connYY =  $midY-$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at right side 
            $connPointIdCnt++;
            $connYY =  $midY+$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------left points ----------##
            $connYY =  $midY-$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle point id at left side
            $connPointIdCnt++;
            $connYY =  $midY+$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ########################################################################################################################

            $cnt++; 
         }#if instance is not PIN
       }#for each instance
       $out_str =~ s/\,$//; #removing extra comma in last point
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          my $num_net = keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}};
          my $currentId = $cnt + $num_net;
          $out_str = $out_str."],\"groups\":[],\"currentId\":$currentId,\"idToIndex\":[0],\"oType\":\"Stack\"},"; #figure block end
       }

       ############################################# Net display ###########################################################
       $out_str = $out_str."\"m\":{"; #connectivity block start
                  $out_str = $out_str."\"connectors\":["; #connector block start
                  if($GLOBAL->dbGlobalGetHRouterStatus == 1){
                     my $dbu = $GLOBAL->dbfGlobalGetDBU;
                     foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
                       my @netCoords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords;
                       foreach my $rect (@netCoords){
                          my @routeBox = @$rect;
                          my $llx = $routeBox[0]/$dbu;
                          my $lly = $routeBox[1]/$dbu;
                          my $urx = $routeBox[2]/$dbu;
                          my $ury = $routeBox[3]/$dbu;
                          my $layer = $routeBox[4];
                          #print "router coords $llx, $lly, $urx, $ury\n";
                       }#foreach rect
                     }#foreach net
                  }else{
                     foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
                       my @coords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetCoords; 
                       my @extcoords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords; 
                       my $type = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetType;
                       my $wireWidth = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetWidth;
                       $wireWidth = $wireWidth*0.2; ### we have assumed width "1 = 0.2" in diagramo
                       my @source = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSourceFanInList;
                       my @sink = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSinkFanOutList;
                       #print "NET: $net TYPE: $type  SRC: @source SINK: @sink\n";
                       if($#coords >= 3){
                          my @src_inst_coords = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$source[0]}->dbPimDBGetInstRelBbox;
                          my @sink_inst_coords = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$sink[0]}->dbPimDBGetInstRelBbox;
                          my ($text_llx, $text_lly, $text_urx, $text_ury) = ("null", "null", "null", "null");
                          my ($stID, $endID);
                          if($#src_inst_coords > 3){
                             @src_inst_coords = ($src_inst_coords[0], $src_inst_coords[1], $src_inst_coords[4], $src_inst_coords[5]);
                          }
                          if($#sink_inst_coords > 3){
                             @sink_inst_coords = ($sink_inst_coords[0], $sink_inst_coords[1], $sink_inst_coords[4], $sink_inst_coords[5]);
                          }
                          if((($coords[0] == $sink_inst_coords[0] || $coords[0] == $sink_inst_coords[2] || $coords[1] == $sink_inst_coords[1] || $coords[1] == $sink_inst_coords[3]) &&  ($coords[-2] == $src_inst_coords[0] || $coords[-2] == $src_inst_coords[2] || $coords[-1] == $src_inst_coords[1] || $coords[-1] == $src_inst_coords[3])) || (($coords[0] == $src_inst_coords[0] || $coords[0] == $src_inst_coords[2] || $coords[1] == $src_inst_coords[1] || $coords[1] == $src_inst_coords[3]) &&  ($coords[-2] == $sink_inst_coords[0] || $coords[-2] == $sink_inst_coords[2] || $coords[-1] == $sink_inst_coords[1] || $coords[-1] == $sink_inst_coords[3]))){ 
                             #print "no change \n";
                             #WARN: Currently, we are using vector: x=null & y=null . We should calculate coordinates ($text_llx, $text_lly, $text_urx, $text_ury) later
                             if($coords[0] == $sink_inst_coords[0]){ 
                                $stID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
                             }elsif($coords[0] == $sink_inst_coords[2]){ 
                                $stID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
                             }elsif($coords[1] == $sink_inst_coords[1]){ 
                                $stID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
                             }elsif($coords[1] == $sink_inst_coords[3]){ 
                                $stID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
                             }elsif($coords[0] == $src_inst_coords[0]){ 
                                $stID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left
                             }elsif($coords[0] == $src_inst_coords[2]){ 
                                $stID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right
                             }elsif($coords[1] == $src_inst_coords[1]){ 
                                $stID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom
                             }elsif($coords[1] == $src_inst_coords[3]){ 
                                $stID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top
                             }

                             if($coords[-2] == $src_inst_coords[0]){ 
                                $endID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left
                             }elsif($coords[-2] == $src_inst_coords[2]){ 
                                $endID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right
                             }elsif($coords[-1] == $src_inst_coords[1]){ 
                                $endID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom
                             }elsif($coords[-1] == $src_inst_coords[3]){ 
                                $endID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top
                             }elsif($coords[-2] == $sink_inst_coords[0]){ 
                                $endID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
                             }elsif($coords[-2] == $sink_inst_coords[2]){ 
                                $endID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
                             }elsif($coords[-1] == $sink_inst_coords[1]){ 
                                $endID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
                             }elsif($coords[-1] == $sink_inst_coords[3]){ 
                                $endID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
                             }

                          }else{
                             if($sink_inst_coords[2] < $src_inst_coords[0]){ #sink is at LHS
                                @coords = ($sink_inst_coords[2], ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[2]+20, ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[2]+20,($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[0]-20, ($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[0], ($src_inst_coords[1]+$src_inst_coords[3])/2);
                                $text_llx = $coords[2] + rand($coords[6] - $coords[4]); 
                                $text_lly = $coords[3];
                                $text_urx = $text_lly;
                                $text_ury = $text_lly - 20;

                                $stID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
                                $endID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left

                             }elsif($sink_inst_coords[0] > $src_inst_coords[2]){ #sink is at RHS
                                @coords = ($sink_inst_coords[0], ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[0]-20, ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[0]-20,($src_inst_coords[1]+$src_inst_coords[3])/2,$src_inst_coords[2]+20, ($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[2], ($src_inst_coords[1]+$src_inst_coords[3])/2);
                                $text_llx = $coords[6] - rand($coords[6] - $coords[4]); 
                                $text_lly = $coords[7];
                                $text_urx = $text_llx;
                                $text_ury = $text_lly - 20;

                                $stID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
                                $endID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right

                             }elsif($sink_inst_coords[3] < $src_inst_coords[1]){ #sink is at bottom
                                @coords = (($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[3], ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[3]+20, ($sink_inst_coords[0]+$sink_inst_coords[2])/2,$src_inst_coords[1]-20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[1]-20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[1]);
                                $text_llx = $coords[0]; 
                                $text_lly = $coords[1] + 0.5;
                                $text_urx = $text_llx;
                                $text_ury = $coords[3] + 0.5;

                                $stID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
                                $endID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom

                             }else{ #sink is at top
                                @coords = (($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[1], ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[1]-20, ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $src_inst_coords[3]+20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[3]+20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[3]);
                                $text_llx = $coords[0]; 
                                $text_lly = $coords[1] - 0.5;
                                $text_urx = $text_llx;
                                $text_ury = $coords[3] - 0.5;

                                $stID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
                                $endID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top

                             }
                          }  
                          #print "  wire coords @coords\n";
                          $out_str = $out_str."{";
                          $out_str = $out_str."\"id\":$cnt,";
                          $out_str = $out_str."\"turningPoints\":["; #turningPoints block start
                          for(my $i=0; $i<=$#coords; $i=$i+2){
                              $out_str = $out_str."{\"x\":$coords[$i],\"y\":$coords[$i+1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                          }
                          $out_str =~ s/\,$//; #removing extra comma at last 
                          $out_str = $out_str."],"; #turningPoints block end
                          $out_str = $out_str."\"type\":\"jagged\","; #wire type block
                          $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"lineWidth\":$wireWidth,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
                          $out_str = $out_str."\"middleText\":{";
                                     $out_str = $out_str."\"str\":\"$net\",\"font\":\"Arial\",\"size\":10,\"lineSpacing\":2.5,\"align\":\"center\",\"valign\":\"middle\","; #middle text sring block
                                     $out_str = $out_str."\"vector\":[{\"x\":$text_llx,\"y\":$text_lly,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$text_urx,\"y\":$text_ury,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #middle text vector block
                                     $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #middle text style block
                                     $out_str = $out_str."\"bounds\":{"; #middle text bounds block start
                                                $out_str = $out_str."\"points\":["; #bounds points block start
                                                for(my $j=0; $j<=3; $j++){ #currently we are putting bounds coordinates value = null
                                                    $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                                                }
                                                $out_str =~ s/\,$//; #removing extra comma in last point
                                                $out_str = $out_str."],"; #bounds point block end 
                                                $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #bounds style block 
                                     $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
                          $out_str = $out_str."\"debug\":false,\"oType\":\"Text\",\"bgStyle\":\"#ffffff\"},"; #middleText block end
                          if($wireWidth > 0.2){
                             $out_str = $out_str."\"properties\":[{\"name\":\"Bus\",\"property\":\"middleText.str\",\"type\":\"Text\"},{\"name\":\"Bus width\",\"property\":\"style.lineWidth\",\"type\":\"BusWidth\"}],"; #properties block
                          }else{
                             $out_str = $out_str."\"properties\":[{\"name\":\"Wire\",\"property\":\"middleText.str\",\"type\":\"Text\"}],"; #properties block
                          }
                          $out_str = $out_str."\"startStyle\":\"Normal\",\"endStyle\":\"Normal\",\"activeConnectionPointId\":-1,\"visualDebug\":false,\"oType\":\"Connector\"},";#Connector  block end

                       ########################## Making connectionPoints string ############################
                       $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[0],\"y\":$coords[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
                       $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
                       $connPointIdCnt++;

                       $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[-2],\"y\":$coords[-1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
                       $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
                       $connPointIdCnt++;
                       ######################################################################################

                       }
                       if($#extcoords >= 0){
                          #print "  ext wire coords @extcoords\n";
                       }#if extended wire found
                       $cnt++; 
                     }#foreach net
                  }#else
                  $out_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str."],"; #connector block end

                  $out_str = $out_str."\"connectionPoints\":["; #connectionPoints block start
                             $sub_out_str =~ s/\,$//; #removing extra comma in last point
                             $out_str = $out_str.$sub_out_str;
                  $out_str = $out_str."],"; #connectionPoints block end

                  $out_str = $out_str."\"connectionPointCurrentId\":$connPointIdCnt,"; #connectionPointCurrentId block 
                  
                  $out_str = $out_str."\"glues\":["; #glues block start
                             $glue_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str.$glue_str."]"; #glues block end
                  
       $out_str = $out_str."}"; #connectivity block end

       $out_str =~ s/\,$//; #removing extra comma in last point
       $out_str = $out_str."}"; #canvas block end 
    }#if top module exists
    print WRITE "$out_str\n";
    close WRITE;
}#sub write_edp_dia_old

###########################################################################################################
##################################### write dia for diagramo def file display real code####################
###########################################################################################################
sub write_edp_dia_real{
  my $noOfArguments = @_;
  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : -output <fileName>\n";
                                          print "      : -W <width>\n";
                                          print "      : -H <height>\n";
                                         }
  else{
    my $out_file;
    my $out_str = "";
    my $sub_out_str = "";
    my $glue_str = "";
    my %INST_CONN_POINTS = ();
    my $edp_width;
    my $edp_height;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-output"){$out_file = $_[$i+1];}
      if($_[$i] eq "-W"){$edp_width = $_[$i+1];}
      if($_[$i] eq "-H"){$edp_height = $_[$i+1];}
    }#for
    open(WRITE,">$out_file");
    if(exists $PSEUDO_MODULE_ALREADY{$TOP_MODULE} ) {
       #print "$TOP_MODULE is the current top module\n";
       my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       my $chip_width = $size[2]-$size[0];
       my $chip_height = $size[3]-$size[1];
       #--------------------------------------------------------------------------------------#
       my $multiFactorX = $edp_width/$chip_width;
       my $multiFactorY = $edp_height/$chip_height;
       my $new_chip_width =  $chip_width*$multiFactorX;
       my $new_chip_height =  $chip_height*$multiFactorY;
       #--------------------------------------------------------------------------------------#
       #$out_str = $out_str."{\"c\":{\"width\":$width,\"height\":$height,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
       $out_str = $out_str."{\"c\":{\"width\":$new_chip_width,\"height\":$new_chip_height,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
      
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          $out_str = $out_str."\"s\":{\"figures\":["; #figure block start
       }
       my $cnt = 0;
       my $connPointIdCnt = 0;
       foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}} ) {
         if($instance eq "PIN"){ 
         }else{ 
            my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
            my @loc = ();
            @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
            $loc[0] = $loc[0]*$multiFactorX;
            $loc[1] = $loc[1]*$multiFactorY;
            $loc[2] = $loc[2]*$multiFactorX;
            $loc[3] = $loc[3]*$multiFactorY;
            my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;
            #print "INSTANCE: $instance  CELL: $cellref LOC: @loc  STATUS:$status\n";
            if(@loc == 4){
               @loc = ($loc[0], $loc[1], $loc[2], $loc[1], $loc[2], $loc[3], $loc[0], $loc[3]);
            }
            $out_str = $out_str."{\"id\":$cnt,\"name\":\"hardMacro\",";
            $out_str = $out_str."\"primitives\":["; #primitives block start 

            $out_str = $out_str."{\"points\":["; #points block start
            my $midX = ($loc[0] + $loc[4])/2;
            my $midY = ($loc[1] + $loc[5])/2;
            #my $vectorURY = $midY - 6; ###### midy -fontSize/2
            my $vectorURY = $midY; ###### midy -fontSize/2
            for(my $i=0; $i<=$#loc; $i=$i+2){
                my $xx = $loc[$i];
                my $yy = $loc[$i+1];
                $out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }

            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end

            $out_str = $out_str. "{\"str\":\"\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

            $out_str = $out_str."],"; #primitives block end 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#008000\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
          
            ################################# Making connectionPoints string for connectors ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();

            ##--------bottom points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------top points ----------##
            $connXX = $midX-$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$midX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at top 
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$connXX,\"y\":$loc[5],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------right points ----------##
            my $connYY =  $midY-$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at right side 
            $connPointIdCnt++;
            $connYY =  $midY+$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[4],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;

            ##--------left points ----------##
            $connYY =  $midY-$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle point id at left side
            $connPointIdCnt++;
            $connYY =  $midY+$dy;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$loc[0],\"y\":$connYY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ########################################################################################################################

            $cnt++; 
         }#if instance is not PIN
       }#for each instance
       foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
                       my @coords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords; 
                 if ($#coords eq 0){ next;}
                        foreach my $rect (@coords){
                         my @routeBox = @$rect;

                         $routeBox[0] *= $multiFactorX;
                         $routeBox[1] *= $multiFactorY;
                         $routeBox[2] *= $multiFactorX;
                         $routeBox[3] *= $multiFactorY;
                         my $layer_name = $routeBox[4];
                         my $vector1 = ($routeBox[3] + $routeBox[1])/2;
                         my $vector = $routeBox[0] - 20; 
                        my $layer_color = $PTDB{$layer_name}->dbTechGetLayerColor;
                           $out_str = $out_str."{\"id\":$cnt,\"name\":\"$figure_name\","; # mohit
                $out_str = $out_str."\"primitives\":["; #primitives block start 

                $out_str = $out_str."{\"startPoint\":"; #points block start
                $out_str = $out_str."{\"x\":$routeBox[0],\"y\":$routeBox[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
             
                $out_str = $out_str."\"endPoint\":"; 
                $out_str = $out_str."{\"x\":$routeBox[2],\"y\":$routeBox[3],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            

                $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                $out_str = $out_str."\"oType\":\"Line\"},";
$out_str = $out_str. "{\"str\":\"f\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$routeBox[0],\"y\":$vector1,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$routeBox[0],\"y\":$vector,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }#for
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

 $out_str = $out_str."],"; #primitives block end 
            #$out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.$primitives.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.1.str\",\"type\":\"Text\"},{\"name\":\"$layer_name\",\"property\":\"style.strokeStyle\",\"type\":\"Color\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"$layer_color\",\"fillStyle\":\"$layer_color\",\"lineWidth\":2,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
            $cnt++;
             } 

            }

       $out_str =~ s/\,$//; #removing extra comma in last point
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          my $num_net = keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}};
          my $currentId = $cnt + $num_net;
          $out_str = $out_str."],\"groups\":[],\"currentId\":$currentId,\"idToIndex\":[0],\"oType\":\"Stack\"},"; #figure block end
       }

       ############################################# Net display ###########################################################
       $out_str = $out_str."\"m\":{"; #connectivity block start
                  $out_str = $out_str."\"connectors\":["; #connector block start
#                  if($GLOBAL->dbGlobalGetHRouterStatus == 1){
#                     my $dbu = $GLOBAL->dbfGlobalGetDBU;
#                     foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
#                       my @netCoords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords;
#                       foreach my $rect (@netCoords){
#                          my @routeBox = @$rect;
#                          my $llx = $routeBox[0]/$dbu;
#                          my $lly = $routeBox[1]/$dbu;
#                          my $urx = $routeBox[2]/$dbu;
#                          my $ury = $routeBox[3]/$dbu;
#                          my $layer = $routeBox[4];
#                          #print "router coords $llx, $lly, $urx, $ury\n";
#                       }#foreach rect
#                     }#foreach net
#                  }else{
#                     foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
#                       my @coords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetCoords; 
#                       for(my $i=0;$i<=$#coords;$i=$i+2){
#                         $coords[$i] *= $multiFactorX;
#                         $coords[$i+1] *= $multiFactorY;
#                       }  
#                       my @extcoords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords; 
#                       my $type = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetType;
#                       my $wireWidth = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetWidth;
#                       $wireWidth = $wireWidth*0.2; ### we have assumed width "1 = 0.2" in diagramo
#                       my @source = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSourceFanInList;
#                       my @sink = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSinkFanOutList;
#                       #print "NET: $net TYPE: $type  SRC: @source SINK: @sink\n";
#                       if($#coords >= 3){
#                          my @src_inst_coords = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$source[0]}->dbPimDBGetInstRelBbox;
#                          my @sink_inst_coords = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$sink[0]}->dbPimDBGetInstRelBbox;
#                          my ($text_llx, $text_lly, $text_urx, $text_ury) = ("null", "null", "null", "null");
#                          my ($stID, $endID);
#                          if($#src_inst_coords > 3){
#                             @src_inst_coords = ($src_inst_coords[0], $src_inst_coords[1], $src_inst_coords[4], $src_inst_coords[5]);
#                          }
#                          if($#sink_inst_coords > 3){
#                             @sink_inst_coords = ($sink_inst_coords[0], $sink_inst_coords[1], $sink_inst_coords[4], $sink_inst_coords[5]);
#                          }
#                          if((($coords[0] == $sink_inst_coords[0] || $coords[0] == $sink_inst_coords[2] || $coords[1] == $sink_inst_coords[1] || $coords[1] == $sink_inst_coords[3]) &&  ($coords[-2] == $src_inst_coords[0] || $coords[-2] == $src_inst_coords[2] || $coords[-1] == $src_inst_coords[1] || $coords[-1] == $src_inst_coords[3])) || (($coords[0] == $src_inst_coords[0] || $coords[0] == $src_inst_coords[2] || $coords[1] == $src_inst_coords[1] || $coords[1] == $src_inst_coords[3]) &&  ($coords[-2] == $sink_inst_coords[0] || $coords[-2] == $sink_inst_coords[2] || $coords[-1] == $sink_inst_coords[1] || $coords[-1] == $sink_inst_coords[3]))){ 
#                             #print "no change \n";
#                             #WARN: Currently, we are using vector: x=null & y=null . We should calculate coordinates ($text_llx, $text_lly, $text_urx, $text_ury) later
#                             if($coords[0] == $sink_inst_coords[0]){ 
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
#                             }elsif($coords[0] == $sink_inst_coords[2]){ 
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
#                             }elsif($coords[1] == $sink_inst_coords[1]){ 
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
#                             }elsif($coords[1] == $sink_inst_coords[3]){ 
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
#                             }elsif($coords[0] == $src_inst_coords[0]){ 
#                                $stID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left
#                             }elsif($coords[0] == $src_inst_coords[2]){ 
#                                $stID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right
#                             }elsif($coords[1] == $src_inst_coords[1]){ 
#                                $stID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom
#                             }elsif($coords[1] == $src_inst_coords[3]){ 
#                                $stID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top
#                             }
#
#                             if($coords[-2] == $src_inst_coords[0]){ 
#                                $endID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left
#                             }elsif($coords[-2] == $src_inst_coords[2]){ 
#                                $endID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right
#                             }elsif($coords[-1] == $src_inst_coords[1]){ 
#                                $endID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom
#                             }elsif($coords[-1] == $src_inst_coords[3]){ 
#                                $endID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top
#                             }elsif($coords[-2] == $sink_inst_coords[0]){ 
#                                $endID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
#                             }elsif($coords[-2] == $sink_inst_coords[2]){ 
#                                $endID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
#                             }elsif($coords[-1] == $sink_inst_coords[1]){ 
#                                $endID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
#                             }elsif($coords[-1] == $sink_inst_coords[3]){ 
#                                $endID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
#                             }
#
#                          }else{
#                             if($sink_inst_coords[2] < $src_inst_coords[0]){ #sink is at LHS
#                                #@coords = ($sink_inst_coords[2], ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[2]+20, ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[2]+20,($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[0]-20, ($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[0], ($src_inst_coords[1]+$src_inst_coords[3])/2);
#                                #$text_llx = $coords[2] + rand($coords[6] - $coords[4]); 
#                                #$text_lly = $coords[3];
#                                #$text_urx = $text_lly;
#                                #$text_ury = $text_lly - 20;
#
#                                $text_llx = "null";
#                                $text_lly = "null"; 
#                                $text_urx =  "null";
#                                $text_ury =  "null";
#
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[2]; #point at mid right
#                                $endID = $INST_CONN_POINTS{$source[0]}->[3]; #point at mid left
#
#                             }elsif($sink_inst_coords[0] > $src_inst_coords[2]){ #sink is at RHS
#                                #@coords = ($sink_inst_coords[0], ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[0]-20, ($sink_inst_coords[1]+$sink_inst_coords[3])/2, $sink_inst_coords[0]-20,($src_inst_coords[1]+$src_inst_coords[3])/2,$src_inst_coords[2]+20, ($src_inst_coords[1]+$src_inst_coords[3])/2, $src_inst_coords[2], ($src_inst_coords[1]+$src_inst_coords[3])/2);
#                                #$text_llx = $coords[6] - rand($coords[6] - $coords[4]); 
#                                #$text_lly = $coords[7];
#                                #$text_urx = $text_llx;
#                                #$text_ury = $text_lly - 20;
#
#                                $text_llx = "null";
#                                $text_lly = "null"; 
#                                $text_urx =  "null";
#                                $text_ury =  "null";
#
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[3]; #point at mid left
#                                $endID = $INST_CONN_POINTS{$source[0]}->[2]; #point at mid right
#
#                             }elsif($sink_inst_coords[3] < $src_inst_coords[1]){ #sink is at bottom
#                                #@coords = (($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[3], ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[3]+20, ($sink_inst_coords[0]+$sink_inst_coords[2])/2,$src_inst_coords[1]-20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[1]-20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[1]);
#                                #$text_llx = $coords[0]; 
#                                #$text_lly = $coords[1] + 0.5;
#                                #$text_urx = $text_llx;
#                                #$text_ury = $coords[3] + 0.5;
#                                   
#                                 $text_llx = "null";
#                                 $text_lly = "null"; 
#                                 $text_urx =  "null";
#                                 $text_ury =  "null";
#
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[1]; #point at mid top
#                                $endID = $INST_CONN_POINTS{$source[0]}->[0]; #point at mid bottom
#
#                             }else{ #sink is at top
#                                #@coords = (($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[1], ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $sink_inst_coords[1]-20, ($sink_inst_coords[0]+$sink_inst_coords[2])/2, $src_inst_coords[3]+20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[3]+20, ($src_inst_coords[0]+$src_inst_coords[2])/2, $src_inst_coords[3]);
#                                #$text_llx = $coords[0]; 
#                                #$text_lly = $coords[1] - 0.5;
#                                #$text_urx = $text_llx;
#                                #$text_ury = $coords[3] - 0.5;
#                                $text_llx = "null";
#                                $text_lly = "null"; 
#                                $text_urx =  "null";
#                                $text_ury =  "null";
#
#                                $stID = $INST_CONN_POINTS{$sink[0]}->[0]; #point at mid bottom
#                                $endID = $INST_CONN_POINTS{$source[0]}->[1]; #point at mid top
#
#                             }
#                          }  
#                          #print "  wire coords @coords\n";
#                          $out_str = $out_str."{";
#                          $out_str = $out_str."\"id\":$cnt,";
#                          $out_str = $out_str."\"turningPoints\":["; #turningPoints block start
#                          for(my $i=0; $i<=$#coords; $i=$i+2){
#                              $out_str = $out_str."{\"x\":$coords[$i],\"y\":$coords[$i+1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
#                          }
#                          $out_str =~ s/\,$//; #removing extra comma at last 
#                          $out_str = $out_str."],"; #turningPoints block end
#                          $out_str = $out_str."\"type\":\"jagged\","; #wire type block
#                          $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"lineWidth\":$wireWidth,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
#                          $out_str = $out_str."\"middleText\":{";
#                                     $out_str = $out_str."\"str\":\"$net\",\"font\":\"Arial\",\"size\":10,\"lineSpacing\":2.5,\"align\":\"center\",\"valign\":\"middle\","; #middle text sring block
#                                     $out_str = $out_str."\"vector\":[{\"x\":$text_llx,\"y\":$text_lly,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$text_urx,\"y\":$text_ury,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #middle text vector block
#                                     $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #middle text style block
#                                     $out_str = $out_str."\"bounds\":{"; #middle text bounds block start
#                                                $out_str = $out_str."\"points\":["; #bounds points block start
#                                                for(my $j=0; $j<=3; $j++){ #currently we are putting bounds coordinates value = null
#                                                    $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
#                                                }
#                                                $out_str =~ s/\,$//; #removing extra comma in last point
#                                                $out_str = $out_str."],"; #bounds point block end 
#                                                $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #bounds style block 
#                                     $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
#                          $out_str = $out_str."\"debug\":false,\"oType\":\"Text\",\"bgStyle\":\"#ffffff\"},"; #middleText block end
#                          if($wireWidth > 0.2){
#                             $out_str = $out_str."\"properties\":[{\"name\":\"Bus\",\"property\":\"middleText.str\",\"type\":\"Text\"},{\"name\":\"Bus width\",\"property\":\"style.lineWidth\",\"type\":\"BusWidth\"}],"; #properties block
#                          }else{
#                             $out_str = $out_str."\"properties\":[{\"name\":\"Wire\",\"property\":\"middleText.str\",\"type\":\"Text\"}],"; #properties block
#                          }
#                          $out_str = $out_str."\"startStyle\":\"Normal\",\"endStyle\":\"Normal\",\"activeConnectionPointId\":-1,\"visualDebug\":false,\"oType\":\"Connector\"},";#Connector  block end
#
#                       ########################## Making connectionPoints string ############################
#                       $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[0],\"y\":$coords[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
#                       $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
#                       $connPointIdCnt++;
#
#                       $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[-2],\"y\":$coords[-1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
#                       $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
#                       $connPointIdCnt++;
#                       ######################################################################################
#
#                       }
#                       if($#extcoords >= 0){
#                          #print "  ext wire coords @extcoords\n";
#                       }#if extended wire found
#                       $cnt++; 
#                     }#foreach net
#                  }#else
#                  $out_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str."],"; #connector block end

                  $out_str = $out_str."\"connectionPoints\":["; #connectionPoints block start
                             $sub_out_str =~ s/\,$//; #removing extra comma in last point
                             $out_str = $out_str.$sub_out_str;
                  $out_str = $out_str."],"; #connectionPoints block end

                  $out_str = $out_str."\"connectionPointCurrentId\":$connPointIdCnt,"; #connectionPointCurrentId block 
                  
                  $out_str = $out_str."\"glues\":["; #glues block start
                             $glue_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str.$glue_str."]"; #glues block end
                  
       $out_str = $out_str."}"; #connectivity block end

       $out_str =~ s/\,$//; #removing extra comma in last point
       $out_str = $out_str."}"; #canvas block end 
    }#if top module exists
    print WRITE "$out_str\n";
    close WRITE;
  }#else
}#sub write_edp_dia_real
##########################################################################################################
##############################################mohit new dia code for def file##########################################
###########################################################################################################
sub write_edp_dia{
  my $noOfArguments = @_;
  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : -output <fileName>\n";
                                          print "      : -W <width>\n";
                                          print "      : -H <height>\n";
                                         }
  else{
    my $out_file;
    #my $temp_out_file;
    my $out_str = "";
    my $sub_out_str = "";
    my $glue_str = "";
    my %INST_CONN_POINTS = ();
    my $edp_width;
    my $edp_height;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-output"){$out_file = $_[$i+1];}
      if($_[$i] eq "-W"){$edp_width = $_[$i+1];}
      if($_[$i] eq "-H"){$edp_height = $_[$i+1];}
    }#for
    if(exists $PSEUDO_MODULE_ALREADY{$TOP_MODULE} ) {
       #print "$TOP_MODULE is the current top module\n";
       my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       my $chip_width = $size[2]-$size[0];
       my $chip_height = $size[3]-$size[1];
       if($chip_height == 0 || $chip_height == 0){
          print "WARN: Module $TOP_MODULE has size @size..\n";
          return;
       }
       #$temp_out_file = $out_file."_slvrn_temp_";
       open(WRITE,">$out_file");
       #--------------------------------------------------------------------------------------#
       my $multiFactorX = $edp_width/$chip_width;
       my $multiFactorY = $edp_height/$chip_height;
       if($multiFactorX > $multiFactorY){
          $multiFactor = $multiFactorX;
       }else{
          $multiFactor = $multiFactorY;
       }
       #print "X:$multiFactorX==Y:$multiFactorY==FF:$multiFactor==chipH:$chip_height==chipW:$chip_width\n";
       
       my $new_chip_width =  $chip_width*$multiFactor;
       my $new_chip_height =  $chip_height*$multiFactor;
       #--------------------------------------------------------------------------------------#
       #$out_str = $out_str."{\"c\":{\"width\":$width,\"height\":$height,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
       $out_str = $out_str."{\"c\":{\"width\":$new_chip_width,\"height\":$new_chip_height,\"multiFactor\":$multiFactor,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
      
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          $out_str = $out_str."\"s\":{\"figures\":["; #figure block start
       }
       my $cnt = 0;
       my @idToIndex = ();
       my $connPointIdCnt = 0;
       my %PORT_HASH = ();
       my @output_pins = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetOutput;
       foreach my $out (@output_pins) {
         if ( $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetOutputType($out) == 0 ) {
           $PORT_HASH{$out} = $nodeCnt++;
         } else {
           my $bits = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetOutputBits($out);
           my $pin = $out . $bits;
           my @portList = utilSplitBusBits($pin);
           foreach my $port ( @portList ) {
             $PORT_HASH{$port} = $nodeCnt++;
           }
         }
       }#foreach out
       
       my @input_pins = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetInput;
       foreach my $in (@input_pins) {
         if ( $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetInputType($in) == 0 ) {
           $PORT_HASH{$in} = $nodeCnt++;
         } else {
           my $bits = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetInputBits($in);
           my $pin = $in . $bits;
           my @portList = utilSplitBusBits($pin);
           foreach my $port ( @portList ) {
             $PORT_HASH{$port} = $nodeCnt++;
           }
         }
       }#foreach in
       
       my @bidi_pins = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetBidi;
       foreach my $bidi (@bidi_pins){
         if ( $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetBidiType($bidi) == 0 ) {
           $PORT_HASH{$bidi} = $nodeCnt++;
         } else {
           my $bits = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetBidiBits($bidi);
           my $pin = $bidi . $bits;
           my @portList = utilSplitBusBits($pin);
           foreach my $port ( @portList ) {
             $PORT_HASH{$port} = $nodeCnt++;
           }
         }
       }#foreach bidi
       foreach my $temp_pin (keys %PORT_HASH){
        my $temp_pin_1 = $temp_pin;
        $temp_pin_1 =~ s/\[.*//;
        my @rectline = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetPinRect($temp_pin);
        my ($layer, $pinllx, $pinlly,$pinurx,$pinury) = (split(/\s+/,$rectline[0])) [0,1,2,3,4];
        my $pin_mid_x = ($pinllx+$pinurx)*$multiFactor/2;
        my $pin_mid_y = ($pinlly+$pinury*$multiFactor)/2;
        my $first_x ;
        my $first_y ;
        my $second_x ;
        my $second_y ;
        my $third_x ;
        my $third_y ;
        my $fourth_x ;
        my $fourth_y ;
        my @loc = ();
        my $x_pos = "b";
        my $y_pos = "l";
        my $x_diff = 0;
        my $y_diff = 0;
        if (abs($edp_width -$pin_mid_x) < $pin_mid_x){
          $x_pos = "T";
          $x_diff = abs($edp_width -$pin_mid_x);
        }else{
          $x_pos = "B";
          $x_diff = $pin_mid_x;
        }
        if (abs($edp_height -$pin_mid_y) < $pin_mid_y){
          $y_pos = "R";
          $y_diff = abs($edp_height -$pin_mid_y);
        }else{
          $y_pos = "L";
          $y_diff = $pin_mid_y;
        }
        if($x_diff < $y_diff){
          $pin_pos = $x_pos;
        }else{
          $pin_pos = $y_pos;
        }
        #print "pin_pos is $pin_pos";
        if($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasBidi($temp_pin_1)){
          if($pin_pos eq "B"){
            $pin_mid_y = $pin_mid_y + 25.98;
          }elsif($pin_pos eq "T"){
            $pin_mid_y = $pin_mid_y - 25.98;
          }elsif($pin_pos eq "L"){
            $pin_mid_x = $pin_mid_x + 25.98;
          }elsif($pin_pos eq "R"){
            $pin_mid_x = $pin_mid_x - 25.98;
          }
          if(($pin_pos eq "B")||($pin_pos eq "T")){
            $first_x  = $pin_mid_x;
            $first_y  = $pin_mid_y -25.98;
            $second_x = $pin_mid_x -15;
            $second_y  = $pin_mid_y;
            $third_x  = $pin_mid_x ;;
            $third_y  = $pin_mid_y + 25.98;
            $fourth_x = $pin_mid_x + 15;
            $fourth_y = $pin_mid_y ;
          }elsif(($pin_pos eq "L")||($pin_pos eq "R")){
            $first_x  = $pin_mid_x -25.98;
            $first_y  = $pin_mid_y; 
            $second_x = $pin_mid_x +25.98;
            $second_y  = $pin_mid_y;
            $third_x  = $pin_mid_x ;
            $third_y  = $pin_mid_y + 15;
            $fourth_x = $pin_mid_x ;
            $fourth_y = $pin_mid_y -15;
          }
          push(@loc,$first_x);
          push(@loc,$first_y);
          push(@loc,$second_x);
          push(@loc,$second_y);
          push(@loc,$third_x);
          push(@loc,$third_y);
          push(@loc,$fourth_x);
          push(@loc,$fourth_y);
        }else{
          if($pin_pos eq "B"){
            if($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasInput($temp_pin_1)) {
              $first_x = $pin_mid_x -15;
              $first_y = $pin_mid_y;
              $second_x = $pin_mid_x +15;
              $second_y = $pin_mid_y;
              $third_x = $pin_mid_x;
              $third_y = $pin_mid_y + 25.98;
            }elsif($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasOutput($temp_pin_1)) {
              $first_x = $pin_mid_x;
              $first_y = $pin_mid_y;
              $second_x = $pin_mid_x +15;
              $second_y = $pin_mid_y + 25.98;
              $third_x = $pin_mid_x - 15;
              $third_y = $pin_mid_y + 25.98;
            }
          }elsif($pin_pos eq "T"){
            if($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasInput($temp_pin_1)) {
              $first_x = $pin_mid_x -15;
              $first_y = $pin_mid_y;
              $second_x = $pin_mid_x ;
              $second_y = $pin_mid_y -25.98;
              $third_x = $pin_mid_x + 15;
              $third_y = $pin_mid_y ;
            }elsif($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasOutput($temp_pin_1)) {
              $first_x = $pin_mid_x -15 ;
              $first_y = $pin_mid_y -25.98;
              $second_x = $pin_mid_x +15;
              $second_y = $pin_mid_y - 25.98;
              $third_x = $pin_mid_x ;
              $third_y = $pin_mid_y ;
            }
          }elsif($pin_pos eq "L"){
            if($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasInput($temp_pin_1)) {
              $first_x = $pin_mid_x; 
              $first_y = $pin_mid_y- 15;
              $second_x = $pin_mid_x + 25.98;
              $second_y = $pin_mid_y ;
              $third_x = $pin_mid_x ;
              $third_y = $pin_mid_y +15;
            }elsif($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasOutput($temp_pin_1)) {
              $first_x = $pin_mid_x;
              $first_y = $pin_mid_y;
              $second_x = $pin_mid_x +25.98;
              $second_y = $pin_mid_y - 15;
              $third_x = $pin_mid_x + 25.98 ;
              $third_y = $pin_mid_y + 15;
            }
          }elsif($pin_pos eq "R"){
            if($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasInput($temp_pin_1)) {
              $first_x = $pin_mid_x; 
              $first_y = $pin_mid_y- 15;
              $second_x = $pin_mid_x ;
              $second_y = $pin_mid_y +15 ;
              $third_x = $pin_mid_x -25.98 ;
              $third_y = $pin_mid_y ;
            }elsif($PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenHasOutput($temp_pin_1)) {
              $first_x = $pin_mid_x;
              $first_y = $pin_mid_y;
              $second_x = $pin_mid_x - 25.98 ;
              $second_y = $pin_mid_y + 15;
              $third_x = $pin_mid_x -25.98;
              $third_y = $pin_mid_y - 15;
            }
          }
          push(@loc,$first_x);
          push(@loc,$first_y);
          push(@loc,$second_x);
          push(@loc,$second_y);
          push(@loc,$third_x);
          push(@loc,$third_y);
        }
        $out_str = $out_str."{\"id\":$cnt,\"name\":\"$temp_pin\",";
        $out_str = $out_str."\"primitives\":["; #primitives block start 

        $out_str = $out_str."{\"points\":["; #points block start
        #my $vectorURY = $midY - 6; ###### midy -fontSize/2
        my $vectorURY = $midY; ###### midy -fontSize/2
        my $min_x = $loc[0];
        my $max_x = $loc[0];
        my $min_y = $loc[1];
        my $max_y = $loc[1];
        for(my $i=0; $i<=$#loc; $i=$i+2){
            my $xx = $loc[$i];
            my $yy = $loc[$i+1];
            if($xx > $max_x){
              $max_x = $xx;
            }
            if($xx < $min_x){
              $min_x = $xx;
            }
            if($yy > $max_y){
              $max_y = $yy;
            }
            if($yy < $min_y){
              $min_y = $yy;
            }
            #$out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"oType\":\"Point\"},";
            $out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"style\":{},\"oType\":\"Point\"},";
        }
        my $midX = $min_x;
        my $midY = ($min_y + $max_y)/2;
        $out_str =~ s/\,$//; #removing extra comma in last point
        $out_str = $out_str."],";
        $out_str = $out_str."\"style\":{},";
        $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end

        #$out_str = $out_str. "{\"str\":\"\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
        $out_str = $out_str. "{\"str\":\"$temp_pin\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
        $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"}],"; #vector block
        $out_str = $out_str."\"style\":{\"fillStyle\":\"#ffffff\"},"; #style block
        $out_str = $out_str."\"bounds\":{";
        $out_str = $out_str."\"points\":[],"; #bounds block start
        $out_str = $out_str."\"style\":{},";
        $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

        $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

        $out_str = $out_str."],"; #primitives block end 
        #$out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color
        $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.1.str\",\"type\":\"Text\"},{\"name\":\"Constant Area\",\"property\":\"\",\"type\":\"FigArea\"},{\"name\":\"LocX\",\"property\":\"\",\"type\":\"LocX\"},{\"name\":\"LocY\",\"property\":\"\",\"type\":\"LocY\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
         $out_str = $out_str."\"style\":{\"strokeStyle\":\"#FFA824\",\"fillStyle\":\"#FFFF00\"},";
        $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[5],\"style\":{},\"oType\":\"Point\"}],";
       # $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"}],";
        $out_str = $out_str."\"oType\":\"Figure\"},";
        push (@idToIndex, $cnt);
        $cnt++;
       }#for ports

       foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}} ) {
        #if($cnt eq 1000){last;}
         if($instance eq "PIN"){ 
         }else{ 
            my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
            my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;

            my @loc = ();
            if($status eq "UNPLACED" || $status eq "UND"){
               @loc = &return_pseudo_vinst_size($TOP_MODULE,$instance);
            }else{
               @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
            }

            foreach (@loc){ 
              $_ = sprintf("%.2f", ( $_*$multiFactor));
            }
            #print "INSTANCE: $instance  CELL: $cellref LOC: @loc  STATUS:$status\n";
            if(@loc == 4){
               @loc = ($loc[0], $loc[1], $loc[2], $loc[1], $loc[2], $loc[3], $loc[0], $loc[3]);
            }
            $out_str = $out_str."{\"id\":$cnt,\"name\":\"$cellref\",";
            $out_str = $out_str."\"primitives\":["; #primitives block start 

            $out_str = $out_str."{\"points\":["; #points block start
            my $midX = ($loc[0] + $loc[4])/2;
            my $midY = ($loc[1] + $loc[5])/2;
            #my $vectorURY = $midY - 6; ###### midy -fontSize/2
            my $vectorURY = $midY; ###### midy -fontSize/2
            for(my $i=0; $i<=$#loc; $i=$i+2){
                my $xx = $loc[$i];
                my $yy = $loc[$i+1];
                #$out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"oType\":\"Point\"},";
                $out_str = $out_str."{\"x\":$xx,\"y\":$yy,\"style\":{},\"oType\":\"Point\"},";
            }

            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
             $out_str = $out_str."\"style\":{},";
             $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end

            #$out_str = $out_str. "{\"str\":\"\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str. "{\"str\":\"$instance\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            #$out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"style\":{},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$vectorURY,\"style\":{},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#ffffff\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":[],"; #bounds block start
            $out_str = $out_str."\"style\":{},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

            $out_str = $out_str."],"; #primitives block end 
            #$out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.1.str\",\"type\":\"Text\"},{\"name\":\"Constant Area\",\"property\":\"\",\"type\":\"FigArea\"},{\"name\":\"LocX\",\"property\":\"\",\"type\":\"LocX\"},{\"name\":\"LocY\",\"property\":\"\",\"type\":\"LocY\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"red\",\"fillStyle\":\"#480000\"},";
            #$out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"oType\":\"Point\"}],";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[5],\"style\":{},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
          
            ################################# Making connectionPoints string for connectors ########################################
            push (@idToIndex, $cnt);
            $cnt++; 
         }#if instance is not PIN
       }#for each instance

       foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
          my @coords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords; 
          my $type = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetType;
          my $wireWidth = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetWidth;
          #$wireWidth = $wireWidth*0.2; ### we have assumed width "1 = 0.2" in diagramo
          $wireWidth = $wireWidth;
          my @source = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSourceFanInList;
          #my $cellref_source = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{@source[0]}->dbPimDBGetInstCellref;
          #push (@source ,$cellref_source);
          my @sink = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSinkFanOutList;
          #my @sinkInstCellref =(); 
          #for(my $k=0; $k<=$#sink; $k=$k+2){
          #    my $sinkcell = @sink[$k];
          #    my $sinkPin = @sink[$k+1];
          #    my $cellref_sink = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$sinkcell}->dbPimDBGetInstCellref;
          #    push(@sinkInstCellref,$sinkcell,$sinkPin,$cellref_sink);
          # 
          #}
          
          #print "========NET: $net TYPE: $type  SRC: @source SINK: @sink WIREWIDTH:$wireWidth\n";

          if ($#coords < 0){ next;}
          foreach my $rect (@coords){
            my @routeBox = @$rect;
            my $layer_name = shift @routeBox;
            $routeBox[0] *= $multiFactor;
            $routeBox[1] *= $multiFactor;
            $routeBox[2] *= $multiFactor;
            $routeBox[3] *= $multiFactor;
            my $vector1 = ($routeBox[3] + $routeBox[1])/2;
            my $vector = $routeBox[0] - 20; 
            my $layer_color = $PTDB{$layer_name}->dbTechGetLayerColor;
            $out_str = $out_str."{\"id\":$cnt,\"name\":\"$figure_name\",\"source\":\"@source\",\"sink\":\"@sink\",\"wireType\":\"$type\",\"wireWidth\":\"$wireWidth\",\"defNet\":\"$net\",\"defNetLayer\":\"$layer_name\","; # mohit
            #$out_str = $out_str."{\"id\":$cnt,\"name\":\"$figure_name\",\"source\":\"@source\",\"sink\":\"@sinkInstCellref\",\"wireType\":\"$type\",\"wireWidth\":\"$wireWidth\",\"defNet\":\"$net\",\"defNetLayer\":\"$layer_name\","; # mohit
            $out_str = $out_str."\"primitives\":["; #primitives block start 
            $out_str = $out_str."{\"startPoint\":"; #points block start
            $out_str = $out_str."{\"x\":$routeBox[0],\"y\":$routeBox[1],\"style\":{},\"oType\":\"Point\"},";
            $out_str = $out_str."\"endPoint\":"; 
            $out_str = $out_str."{\"x\":$routeBox[2],\"y\":$routeBox[3],\"style\":{},\"oType\":\"Point\"},";
            $out_str = $out_str."\"style\":{},";
            $out_str = $out_str."\"oType\":\"Line\"},";
            $out_str = $out_str. "{\"str\":\"\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$routeBox[0],\"y\":$vector1,\"style\":{},\"oType\":\"Point\"},{\"x\":$routeBox[0],\"y\":$vector1,\"style\":{},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#ffffff\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
            }#for
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end
            $out_str = $out_str."],"; #primitives block end 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.1.str\",\"type\":\"Text\"},{\"name\":\"$layer_name\",\"property\":\"style.strokeStyle\",\"type\":\"Color\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"fillStyle\":\"#ffffff\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":null,\"y\":null,\"style\":{},\"oType\":\"Point\"},{\"x\":null,\"y\":null,\"style\":{},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
            push (@idToIndex, $cnt);
            $cnt++;
          } 

       }
       my $idToIndex = join ",", @idToIndex;
       $out_str =~ s/\,$//; #removing extra comma in last point
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          my $num_net = keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}};
          my $currentId = $cnt + $num_net;
          $out_str = $out_str."],\"groups\":[],\"currentId\":$currentId,\"idToIndex\":[$idToIndex],\"oType\":\"Stack\"},"; #figure block end
          #$out_str = $out_str."],\"oType\":\"Stack\"},"; #figure block end
       }

       ############################################# Net display ###########################################################
       $out_str = $out_str."\"m\":{"; #connectivity block start
                  $out_str = $out_str."\"connectors\":["; #connector block start
                  $out_str = $out_str."],\"groups\":[],"; #connector block end

                  $out_str = $out_str."\"connectionPoints\":["; #connectionPoints block start
                             $sub_out_str =~ s/\,$//; #removing extra comma in last point
                             $out_str = $out_str.$sub_out_str;
                  $out_str = $out_str."],"; #connectionPoints block end

                  $out_str = $out_str."\"connectionPointCurrentId\":$connPointIdCnt,"; #connectionPointCurrentId block 
                  
                  $out_str = $out_str."\"glues\":["; #glues block start
                             $glue_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str.$glue_str."]"; #glues block end
                  
       $out_str = $out_str."}"; #connectivity block end

       $out_str =~ s/\,$//; #removing extra comma in last point
       $out_str = $out_str."}"; #canvas block end 
       print WRITE "$out_str\n";
       close WRITE;
       #&convert_proton_dia_to_gui_dia($temp_out_file,$out_file,800);
       #my @temp_cmd_arg = ("-rf",$temp_out_file);
       #system("rm",@temp_cmd_arg);
    }#if top module exists
  }#else
}#sub write_edp_dia


###########################################################################################################
#################################### write verilog 2 edp tcl ##############################################
###########################################################################################################
sub write_edp_tcl {
my $noOfArguments = @_;
if ($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : write_edp_tcl\n"; 
                                         print "      : -file<tclfileName> by default it takes edp.tcl\n";
                                         print "      : -module <moduleName> by default it takes top_moduleName\n";
                                         print "      : -output <verilogfileName>\n";
                                        }
else {
my $moduleName = $TOP_MODULE;
my $verilogfileName = "temp.v";
my $tclfileName = "edp.tcl";
  for (my $i = 0; $i < $noOfArguments; $i++){
    if($_[$i] eq "-module"){$moduleName = $_[$i+1];}
    if($_[$i] eq "-output"){$verilogfileName = $_[$i+1];} 
    if($_[$i] eq "-file"){$tclfileName = $_[$i+1];}
  }
open(WRITE,">$tclfileName");
my %CHECK_CELL = ();
my %NET_DATA = (); 
my %PORT_HASH = ();
my %NET_WIDTH_OF_PIN = ();
my %WIDTH_WITH_INST_PIN = ();
  if(exists $MODULE_ALREADY{$moduleName}){
    my @inPorts = $MODULE_ALREADY{$moduleName}->dbVNOMGetInput;
    my @outPorts = $MODULE_ALREADY{$moduleName}->dbVNOMGetOutput;
    my @bidiPorts = $MODULE_ALREADY{$moduleName}->dbVNOMGetBidi;
    foreach my $i ( @inPorts )  {  
                                  my $busWidth = "";
                                  my $type = $MODULE_ALREADY{$moduleName}->dbVNOMGetInputType($i);
                                  if ( $type == 1 ) {
                                     $busWidth = $MODULE_ALREADY{$moduleName}->dbVNOMGetInputBits($i); 
                                  }
                                  if ( $i =~ /\\/ ){$i = $i." "};
                                  $PORT_HASH{$i} = "input";
    } 
    foreach my $i ( @outPorts )  { 
                                   my $busWidth = "";
                                   my $type = $MODULE_ALREADY{$moduleName}->dbVNOMGetOutputType($i);
                                   if ( $type == 1 ) {
                                      $busWidth = $MODULE_ALREADY{$moduleName}->dbVNOMGetOutputBits($i);
                                   }
                                   if ( $i =~ /\\/ ){$i = $i." "};
                                   $PORT_HASH{$i} = "output";
    }
    foreach my $i ( @bidiPorts ) { 
                                   my $busWidth = "";
                                   my $type = $MODULE_ALREADY{$moduleName}->dbVNOMGetBidiType($i);
                                   if ( $type == 1 ) {
                                      $busWidth = $MODULE_ALREADY{$moduleName}->dbVNOMGetBidiBits($i);
                                   }
                                   if ( $i =~ /\\/ ){$i = $i." "};
                                   $PORT_HASH{$i} = "inout";
    }
    #my @size = $FLOORPLAN_ALREADY{$FLOORPLAN_LOOKUP{"$moduleName/_self_"}}->dbFlplanGetSize ;
    print WRITE "createPseudoTopModule -top $moduleName -H 1000 -W 1000\n"; 
    my @conns = $MODULE_ALREADY{$moduleName}->dbVNOMGetConn;
    my $netNameExpr ;
    foreach my $connLine ( @conns ) {
      $connLine =~ s/\(/\)\,/;
      #$connLine =~ s/\)\s*\;//;
      $connLine =~ s/\s*\)\s*\)\s*\;?.*$/\)/;
      my ($cell,$inst) = ( split(/\s+/, $connLine ))[0,1];
      if(exists $CHECK_CELL{$cell}){
      }else{
      $CHECK_CELL{$cell} = 1;
        print WRITE "createPseudoModule -top $moduleName -module $cell\n"; 
      }
      print WRITE "createPseudoHierModuleInst -parent $moduleName -cellref $cell -inst $inst\n";  
      if (( $MODULE_ALREADY{$moduleName}->dbVNOMHasHierInst($inst) ) 
            || ( $MODULE_ALREADY{$moduleName}->dbVNOMHasLeafInst($inst) )) {
               my @nets = split(/\s*\)\s*\,\s*/, $connLine);
               my $noOfPins = @nets;
        for(my $i = 1 ; $i < $noOfPins ; $i++){
               $nets[$i] =~ s/\s*\(\s*/\|/;
               $nets[$i] =~ s/\s*\)\s*//;
               my ($pin,$net)=(split(/\s*\|\s*/, $nets[$i]))[0,1];
               $pin =~ s/\.//;
               $netNameExpr = $net;
               my $inst_pin_data = $inst." ".$pin;
               if($net !~ /\[|\{/){
                 push (@{$NET_DATA{$net}},$inst_pin_data);
               }
               if ( exists $MODULE_ALREADY{$cell} ) { 
                 my $pinType = 0 ;
                 my $pinDir = 0 ;
               if ( exists $MODULE_ALREADY{$cell}->{ins}{$pin} ) {
                 $pinType = $MODULE_ALREADY{$cell}->dbVNOMGetInputType($pin);
                 $widthStr = $MODULE_ALREADY{$cell}->dbVNOMGetInputBits($pin);
                 $pinDir = 1;
               }elsif ( exists $MODULE_ALREADY{$cell}->{outs}{$pin} ) {
                 $pinType = $MODULE_ALREADY{$cell}->dbVNOMGetOutputType($pin);
                 $widthStr = $MODULE_ALREADY{$cell}->dbVNOMGetOutputBits($pin);
                 $pinDir = 2;
               }elsif ( exists $MODULE_ALREADY{$cell}->{bidis}{$pin} ) {
                 $pinType = $MODULE_ALREADY{$cell}->dbVNOMGetBidiType($pin);
                 $widthStr = $MODULE_ALREADY{$cell}->dbVNOMGetBidiBits($pin);
                 $pinDir = 3;
               }else {}
               if ( $pinType == 1 ) {
                 $netNameExpr =~ s/^\s+//;
                 $netNameExpr =~ s/\s+$//;
                 my @netNameExprList = () ;
                 if ( $netNameExpr =~ /\{.*\}/ ) {
                   $netNameExpr =~ s/\{/ /g;
                   $netNameExpr =~ s/\}/ /g;
                   $netNameExpr =~ s/\,/ /g;
                   $netNameExpr =~ s/^\s+//;
                   $netNameExpr =~ s/\s+$//;
                   @netNameExprList = (split(/\s+/,$netNameExpr));
                 }elsif ( $netName =~ /\[\s*[0-9]+\s*\]/ ) {
                   @netNameExprList = (split(/\s+/,$netNameExpr));
                 }
                 my $pincnt = 0;
                 foreach my $netName ( @netNameExprList ) {
                 if($netName =~ /'b/){
                   my $new_pin = $pin."[".$pincnt."]";
                   my $inst_pin_data = $inst." ".$new_pin;
                   $pincnt++; 
                   push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }elsif ( $netName =~ /\[\s*[0-9]+\s*\]/ ) {
                    if ( $netName =~ /\\/ ) {
                      if ( $netName =~ /\s+\[\s*[0-9]+\s*\]/ ) {
                      }else {next;}
                    }
                    my $new_pin = $pin."[".$pincnt."]";
                    my $inst_pin_data = $inst." ".$new_pin;
                    $pincnt++; 
                    push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }else {
                    my $new_pin = $pin."[".$pincnt."]";
                    my $inst_pin_data = $inst." ".$new_pin;
                    $pincnt++; 
                    push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }
               }
            }else {
               $netNameExpr =~ s/^\s+//;
               $netNameExpr =~ s/\s+$//;
               my @netNameExprList = () ;
               if ( $netNameExpr =~ /\{.*\}/ ) {
                  $netNameExpr =~ s/\{/ /g;
                  $netNameExpr =~ s/\}/ /g;
                  $netNameExpr =~ s/\,/ /g;
                  $netNameExpr =~ s/^\s+//;
                  $netNameExpr =~ s/\s+$//;
                  @netNameExprList = (split(/\s+/,$netNameExpr));
               }elsif($netNameExpr =~ /\[\s*[0-9]+\s*\]/){
                  @netNameExprList = (split(/\s+/,$netNameExpr));
               }
               my $pincnt = 0;
               foreach my $netName ( @netNameExprList ) {
                 if($netName =~ /'b/){
                   my $new_pin = $pin."[".$pincnt."]";
                   my $inst_pin_data = $inst." ".$new_pin;
                   $pincnt++; 
                   push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }elsif ( $netNameExpr =~ /\[\s*[0-9]+\s*\]/ ) {
                    if ( $netNameExpr =~ /\\/ ) {
                      if ( $netNameExpr =~ /\s+\[\s*[0-9]+\s*\]/ ) {
                      }else{next;}
                    }
                      my $new_pin = $pin."[".$pincnt."]";
                      my $inst_pin_data = $inst." ".$new_pin;
                      $pincnt++; 
                      push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }else {
                      my $new_pin = $pin."[".$pincnt."]";
                      my $inst_pin_data = $inst." ".$new_pin;
                      $pincnt++; 
                      push (@{$NET_DATA{$netName}},$inst_pin_data);
                 }
               }#foreach
            }#else
          }#if cell exists in module_already
       }#for no_ofPins
     }#if inst
   }#foreach connLine
#------------------------------------------------------------------------------------------------------------------------#
foreach my $net (keys %NET_DATA){
    my @net_data = @{$NET_DATA{$net}};
    if(! exists $PORT_HASH{$net}){
         my $net_data_first = shift(@net_data);
         my %CHECK_SRC_PIN = ();
         my($source_inst,$source_pin) = (split(/\s+/,$net_data_first))[0,1];
         if($source_pin !~ /\[/){
           print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire  -wireWidth 1 -source $source_inst  -pin $source_pin";
         }else{
           my $new_src_inst = "";
           my $new_src_pin = "";
           my $new_data = $source_inst." ".$source_pin;
           push (@net_data,$new_data);
           for(my $i=0;$i<=$#net_data;$i++){
             my ($inst,$pin)= (split(/\s+/,$net_data[$i]))[0,1];
             if($pin !~ /\[/){ $new_src_inst = $inst;$new_src_pin = $pin;
             }
           }
           if($new_src_inst ne "" && $new_src_pin ne ""){
             print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire  -wireWidth 1 -source $new_src_inst  -pin $new_src_pin";
             $CHECK_SRC_PIN{$new_src_pin} = $new_src_inst;
           }
          if($new_src_inst eq "" && $new_src_pin eq ""){
           print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire  -wireWidth 1 -source $source_inst  -pin $source_pin";
             $CHECK_SRC_PIN{$source_pin} = $source_inst;
          }
         }
         for(my $i=0;$i<=$#net_data;$i++){
           my ($instance,$pinName) = (split(/\s+/,$net_data[$i]))[0,1];
           if(!exists $CHECK_SRC_PIN{$pinName}){
             print WRITE " -sink $instance -pin $pinName";
           }
         } 
         print WRITE "\n";
    }elsif(exists $PORT_HASH{$net}){
      my $port_type = $PORT_HASH{$net};
      if($port_type eq "input"){
            print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire  -wireWidth 1 -source PIN";
              for(my $i=0;$i<=$#net_data;$i++){
                my ($instance,$pinName) = (split(/\s+/,$net_data[$i]))[0,1];
                print WRITE " -sink $instance -pin $pinName";
              } 
              print WRITE "\n";
      }elsif($port_type eq "output"){
             for(my $i=0;$i<=$#net_data;$i++){
               my ($instance,$pinName) = (split(/\s+/,$net_data[$i]))[0,1];
               print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire -wireWidth 1 -source $instance -pin $pinName";
             } 
             print WRITE " -sink PIN";
             print WRITE "\n";
      }elsif($port_type eq "inout"){
              for(my $i=0;$i<=$#net_data;$i++){
                my ($instance,$pinName) = (split(/\s+/,$net_data[$i]))[0,1];
                print WRITE "createPseudoNet -parentModule $moduleName -prefix $net -type wire -wireWidth 1 -source $instance -pin $pinName";
              } 
              print WRITE " -sink PIN";
              print WRITE "\n";
      }else{print "ERR : $net is neither input nor output\n";} 
    }else{print "ERR : $net not exists in PORT_HASH\n";}
}#foreach net
print WRITE "commit_module -module $moduleName\n";
print WRITE "write_verilog -output $verilogfileName --overwrite --hier\n";
}#if exists module
close(WRITE);
}#else
}#sub write_edp_tcl



###########################################################################################################
##################################### write dia for diagramo mohit##############################################
###########################################################################################################
######################################################################################
sub write_edp_dia_for_spice_old {
    my $noOfArguments = @_;
    if($noOfArguments < 0 || $_[0] eq "-h"){
                                           }
    else{
      my $out_file;
      my $chip_width;
      my $chip_height;
      my $out_str = "";
      my $sub_out_str = "";
      my $glue_str = "";
      my %INST_CONN_POINTS = ();
      my %SPICE_INST_LOC = ();
      for(my $i=0; $i < $noOfArguments;$i++){
        if($_[$i] eq "-output"){$out_file = $_[$i+1];}
        if($_[$i] eq "-W"){$chip_width = $_[$i+1];}
        if($_[$i] eq "-H"){$chip_height = $_[$i+1];}
      }#for
    open(WRITE,">$out_file");
    if(exists $MODULE_ALREADY{$TOP_MODULE} ) {
       #print "$TOP_MODULE is the current top module\n";
       #my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       #my $width = $size[2] - $size[0];
       #my $height = $size[3] - $size[1];
       $out_str = $out_str."{\"c\":{\"width\":$chip_width,\"height\":$chip_height,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
             if((keys %{$MODULE_ALREADY{$TOP_MODULE}}) > 0){
          $out_str = $out_str."\"s\":{\"figures\":["; #figure block start
       }
       my $cnt = 0;
       my $connPointIdCnt = 0;
       my @instance_list = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetHierInst;
       my $number_of_instance = @instance_list;
       my @conns = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetConn;
       my($vdd_inst,$vss_inst) = &get_vdd_and_vss_from_connLine(\@conns);
       push(@instance_list,$vdd_inst,$vss_inst);
       my($trans_width,$trans_height) = &calc_height_and_width_of_trans($number_of_instance,$chip_width,$chip_height);
       foreach my $instance ( @instance_list ) {
         $instance =~ s/^\d+_tmpslvr_//;
         if($instance =~ /vdd/i){
           #-----------------------------------ADD CODE FOR VSS/VDD------------------------#
           my @location = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
           $out_str = $out_str."{\"id\":$cnt,\"name\":\"vdd\",";
           $out_str = $out_str."\"primitives\":["; #primitives block start
            $out_str = $out_str."{\"points\":["; #points block start
            my $midX = sprintf ("%.2f",($location[0] + $location[4])/2);
            my $midY = sprintf ("%.2f",($location[1] + $location[5])/2);
            my $vectorURY = $midY - 6; ###### midy -fontSize/2
           for(my $i=0; $i<=7; $i=$i+2){
           
                           my $xxx = $location[$i];
                           my $yyy = $location[$i+1];
                           $out_str = $out_str."{\"x\":$xxx,\"y\":$yyy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                       }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end
           
            $out_str = $out_str. "{\"str\":\"vdd\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
                       $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
                       $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
                       $out_str = $out_str."\"bounds\":{";
                       $out_str = $out_str."\"points\":["; #bounds block start
           for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                           $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                       }
                       $out_str =~ s/\,$//; #removing extra comma in last point
                       $out_str = $out_str."],";
                       $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
           
                       $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end
           
                       $out_str = $out_str."],"; #primitives block end 
                       $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
                       $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#6A5ACD\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
                       $out_str = $out_str."\"oType\":\"Figure\"},";
            ########################## Making connectionPoints string for connectors vdd ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();
            #my $conn_point_left_x = $midX ;
            #my $conn_point_left_y = $midY*2;
            #my $conn_point_bottom_x = $midX + $midX/2;
            #my $conn_point_bottom_y = $midY*2;
            #my $conn_point_top_x =$midX -$midX/2 ;
            #my $conn_point_top_y =$midY*2 ;

            my $conn_point_left_x = $midX ;
            my $conn_point_left_y = $location[1];
            my $conn_point_bottom_x = $midX + $midX/2 ;
            my $conn_point_bottom_y = $location[1];
            my $conn_point_top_x =$midX -$midX/2 ;
            my $conn_point_top_y =$location[1] ;
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);         
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            push(@temp, $connPointIdCnt);       
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ##############################################################################################################
         }elsif ($instance =~ /vss/i){
           my @location = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
           $out_str = $out_str."{\"id\":$cnt,\"name\":\"vss\",";
           $out_str = $out_str."\"primitives\":["; #primitives block start
            $out_str = $out_str."{\"points\":["; #points block start
            my $midX =  sprintf ("%.2f",($location[0] + $location[4])/2);
            my $midY =  sprintf ("%.2f",($location[1] + $location[5])/2);
            my $vectorURY = $midY - 6; ###### midy -fontSize/2
           for(my $i=0; $i<=7; $i=$i+2){
           
                           my $xxx = $location[$i];
                           my $yyy = $location[$i+1];
                           $out_str = $out_str."{\"x\":$xxx,\"y\":$yyy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                       }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end
           
            $out_str = $out_str. "{\"str\":\"vss\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
                       $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
                       $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
                       $out_str = $out_str."\"bounds\":{";
                       $out_str = $out_str."\"points\":["; #bounds block start
           for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                           $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                       }
                       $out_str =~ s/\,$//; #removing extra comma in last point
                       $out_str = $out_str."],";
                       $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
           
                       $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end
           
                       $out_str = $out_str."],"; #primitives block end 
                       $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
                       $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#6A5ACD\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                       $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
                       $out_str = $out_str."\"oType\":\"Figure\"},";
            ################################# Making connectionPoints string for connectors vss ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();
            #my $conn_point_left_x = $midX ;
            #my $conn_point_left_y = $location[1];
            #my $conn_point_bottom_x = $midX + $midX/2 ;
            #my $conn_point_bottom_y = $location[1];
            #my $conn_point_top_x =$midX -$midX/2 ;
            #my $conn_point_top_y =$location[1] ;

            my $conn_point_left_x = $midX ;
            my $conn_point_left_y = $midY*2;
            my $conn_point_bottom_x = $midX + $midX/2;
            my $conn_point_bottom_y = $midY*2;
            my $conn_point_top_x =$midX -$midX/2 ;
            my $conn_point_top_y =$midY*2 ;
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);         
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            push(@temp, $connPointIdCnt);       
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ##############################################################################################################
         }else{ 
            my $cellref = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetHierInstCell($instance);
            #my @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
            #my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;
            #my $value = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetSpiceElementValue($instance);
            my $value;
            my @conns = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetConn;
            foreach my $connLine (@conns){
              my($inst,$x_pin,$x_val,$y_pin,$y_val) = &data_get_from_connLine($connLine);
              if($inst eq $instance){
                $value = "\$X"."=".$x_val." "."\$Y"."=".$y_val; 
              }#if 
            }#foreach
            $SPICE_INST_LOC{$instance} = $value;
            my ($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4)= &calc_size_from_given_loc($instance,$value,$trans_width,$trans_height); 
            #print "INSTANCE: $instance  CELL: $cellref LOC: @loc  STATUS:$status\n";
            #my @loc = (20, 20, 100, 20, 100, 100, 20, 100);
            my @loc = ($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);
            ###################################################calculate co-ords###########################################
             my $width = ($loc[2] - $loc[0]);
             my $height = ($loc[5] - $loc[1]); 

             #my @line_1_start_point = ($loc[0],$loc[1]+$height/2);
             #my @line_2_start_point = ($loc[0]+$width/4,$loc[7]-$height/4);
             #my @line_3_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             #my @line_4_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             #my @line_5_start_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             #my @line_6_start_point = ($loc[2]-$width/4,$loc[7]-$height/4);
             #my @line_7_start_point = ($loc[2]-$width/4,$loc[1]+$height/4);


             #my @line_1_end_point = ($loc[0]+$width/4,$loc[1]+$height/2);
             #my @line_2_end_point = ($loc[0]+$width/4,$loc[1]+$height/4);
             #my @line_3_end_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             #my @line_4_end_point = ($loc[2]-$width/4,$loc[7]-$height/4);
             #my @line_5_end_point = ($loc[2]-$width/4,$loc[1]+$height/4);
             #my @line_6_end_point = ($loc[4]-$width/4,$loc[5]);
             #my @line_7_end_point = ($loc[4]-$width/4,$loc[3]);

             my @line_1_start_point = ($loc[0],$loc[1]+$height/2);
             my @line_2_start_point = ($loc[0]+$width/4,$loc[7]-$height/4);
             my @line_3_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             my @line_4_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             my @line_5_start_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             my @line_6_start_point = ($loc[2],$loc[7]-$height/4);
             my @line_7_start_point = ($loc[2],$loc[1]+$height/4);


             my @line_1_end_point = ($loc[0]+$width/4,$loc[1]+$height/2);
             my @line_2_end_point = ($loc[0]+$width/4,$loc[1]+$height/4);
             my @line_3_end_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             my @line_4_end_point = ($loc[2],$loc[7]-$height/4);
             my @line_5_end_point = ($loc[2],$loc[1]+$height/4);
             my @line_6_end_point = ($loc[4],$loc[5]);
             my @line_7_end_point = ($loc[4],$loc[3]);


             my @start_loc = (@line_1_start_point,@line_2_start_point,@line_3_start_point,@line_4_start_point,@line_5_start_point,@line_6_start_point,@line_7_start_point);
             my @end_loc = (@line_1_end_point,@line_2_end_point,@line_3_end_point,@line_4_end_point,@line_5_end_point,@line_6_end_point,@line_7_end_point);

             #################################################################################################################
           # $out_str = $out_str."{\"id\":$cnt,\"name\":\"Rectangle\",";
           my $figure_name = "";
           if($cellref =~ /n/i){
             $figure_name = "nmos";
           }elsif($cellref =~ /p/i){
              $figure_name = "pmos"; 
           }

           $out_str = $out_str."{\"id\":$cnt,\"name\":\"$figure_name\","; # mohit
           $out_str = $out_str."\"primitives\":["; #primitives block start 

            my $midX = ($loc[0] + $loc[4])/2;
            my $midY = ($loc[1] + $loc[5])/2;
            my $vectorURX = $loc[0]+$width/2;
            my $vectorURY = $loc[5];
            #my $vectorURY = $midX - 6; ###### midy -fontSize/2
            for(my $i=0; $i<=$#start_loc; $i=$i+2){
                my $start_xx = $start_loc[$i];
                my $start_yy = $start_loc[$i+1];
                my $end_xx = $end_loc[$i];
                my $end_yy = $end_loc[$i+1];
                $out_str = $out_str."{\"startPoint\":"; #points block start
                $out_str = $out_str."{\"x\":$start_xx,\"y\":$start_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
             
                $out_str = $out_str."\"endPoint\":"; 
                $out_str = $out_str."{\"x\":$end_xx,\"y\":$end_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            

                $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                $out_str = $out_str."\"oType\":\"Line\"},";
            }#for
            my $primitives;
            ###############################################added code for pmos#######################
           if($cellref =~ /n/i){
             $primitives = 7;
           }elsif($cellref =~ /p/i){
             $primitives = 8;
             my $angle_x = ($loc[0]+$width/4)+10;
             my $angle_y = ($loc[1]+$height/2)+10;
             #############################################caluclate arc angle########################
             my $radius = 3;
             my $x = ($loc[0]+$width/4)-$radius; 
             my $y = $loc[1]+$height/2; 
             my $arcLength = (45 * 3.14/180);
             my $controlRadius = $radius / cos($arcLength * 0.5);
             my $number_of_control_point = 7;
             my @arc_start_loc = ();
             my @arc_end_loc = ();
             my @arc_control_loc = ();
             for ($i=0; $i <=$number_of_control_point; $i++) {
               my $startPoint_x = ($x + $radius * cos($arcLength * $i)); 
               my $startPoint_y = ($y + $radius * sin($arcLength * $i)); 
               my $controlPoint_x = ($x + $controlRadius * cos($arcLength * ($i + 1) - $arcLength * 0.5));
               my $controlPoint_y = ($y + $controlRadius * sin($arcLength * ($i + 1) - $arcLength * 0.5));
               my $endPoint_x = ($x + $radius * cos($arcLength * ($i + 1)));
               my $endPoint_y = ($y + $radius * sin($arcLength * ($i + 1)));
               push (@arc_start_loc,$startPoint_x, $startPoint_y);
               push (@arc_end_loc,$endPoint_x,$endPoint_y);
               push (@arc_control_loc,$controlPoint_x, $controlPoint_y);
             }#for
             ##########################################################################################################################################
             $out_str = $out_str."{\"endAngle\":360,\"startAngle\":0,\"middle\":{\"x\":$angle_x,\"y\":$angle_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"radius\":3,\"curves\":[";
             for(my $i=0; $i<=$#arc_start_loc; $i=$i+2){
                my $arc_start_xx = $arc_start_loc[$i];
                my $arc_start_yy = $arc_start_loc[$i+1];
                my $arc_end_xx = $arc_end_loc[$i];
                my $arc_end_yy = $arc_end_loc[$i+1];
                my $arc_control_xx = $arc_control_loc[$i];
                my $arc_control_yy = $arc_control_loc[$i+1];
                $out_str = $out_str."{\"startPoint\":{\"x\":$arc_start_xx,\"y\":$arc_start_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"controlPoint\":{\"x\":$arc_control_xx,\"y\":$arc_control_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"endPoint\":{\"x\":$arc_end_xx,\"y\":$arc_end_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"QuadCurve\"},";
              }#for
             my $value_of_add_radius_x = $x+$radius;
             my $value_of_add_radius_y = $y;
             $out_str = $out_str."],\"startPoint\":{\"x\":$value_of_add_radius_x,\"y\":$value_of_add_radius_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"endPoint\":{\"x\":$value_of_add_radius_x,\"y\":$value_of_add_radius_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"startAngleRadians\":0,\"endAngleRadians\":6.283185307179586,\"styleFlag\":0,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"direction\":false,\"oType\":\"Arc\"},";
           }
           #####################################################end code for pmos#######################################################################
            $out_str = $out_str. "{\"str\":\"$instance\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$vectorURX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$vectorURX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#ffffff\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }#for
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

            $out_str = $out_str."],"; #primitives block end 
            #$out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.$primitives.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.$primitives.str\",\"type\":\"Text\"},{\"name\":\"LocX\",\"property\":\"\",\"type\":\"LocX\"},{\"name\":\"LocY\",\"property\":\"\",\"type\":\"LocY\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"fillStyle\":\"#ffffff\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
          
            ################################# Making connectionPoints string for connectors ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();
            my $conn_point_left_x = $loc[0];
            my $conn_point_left_y = $loc[1]+$height/2;
            my $conn_point_bottom_x = $loc[4];
            my $conn_point_bottom_y = $loc[3];
            my $conn_point_top_x = $loc[4];
            my $conn_point_top_y = $loc[5];
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);            
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);            
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ########################################################################################################################
         }#if instance is not PIN
            $cnt++; 
       }#for each instance
       $out_str =~ s/\,$//; #removing extra comma in last point
       if((keys %{$MODULE_ALREADY{$TOP_MODULE}}) > 0){
          #my $num_net = keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}};
          my $currentId = $cnt + $num_net;
          $out_str = $out_str."],\"groups\":[],\"currentId\":1,\"idToIndex\":[0],\"oType\":\"Stack\"},"; #figure block end
       }

       ############################################# Net display ###########################################################
       $out_str = $out_str."\"m\":{"; #connectivity block start
                        $out_str = $out_str."\"connectors\":["; #connector block start
                  if($GLOBAL->dbGlobalGetHRouterStatus == 1){
                     my $dbu = $GLOBAL->dbfGlobalGetDBU;
                     foreach my $net (keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}) {
                       my @netCoords = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoExtNetCoords;
                       foreach my $rect (@netCoords){
                          my @routeBox = @$rect;
                          my $llx = $routeBox[0]/$dbu;
                          my $lly = $routeBox[1]/$dbu;
                          my $urx = $routeBox[2]/$dbu;
                          my $ury = $routeBox[3]/$dbu;
                          my $layer = $routeBox[4];
                          #print "router coords $llx, $lly, $urx, $ury\n";
                       }#foreach rect
                     }#foreach net
                  }else{
                     my %NET_HASH = &get_net_hash($TOP_MODULE); 
                     my $type = "wire";
                     my $wireWidth = 1;
                     $wireWidth = $wireWidth*0.2; ### we have assumed width "1 = 0.2" in diagramo
                     foreach my $net (keys %NET_HASH) {
                        my @net_data = @{$NET_HASH{$net}}; 
                        my ($source_list_ref,$sink_list_ref) = &get_source_and_sink_list($TOP_MODULE,$net);
                        $net =~ s/^\d+_tmpslvr_//;
                        $net =~ s/_net//;
                        my @source = @$source_list_ref;
                        my @sink = @$sink_list_ref;
                        my $source_inst = shift(@source);  
                        my $source_pin = shift(@source);  
                        my $src_value;
                        if(exists $SPICE_INST_LOC{$source_inst}){
                          $src_value = $SPICE_INST_LOC{$source_inst};
                        }
                        my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($source_inst,$src_value,$trans_width,$trans_height);
                        my @src_inst_coords = (sprintf("%.2f",($src_x1)),sprintf("%.2f",($src_y1)),sprintf("%.2f",($src_x3)),sprintf("%.2f",($src_y3)));
                        for(my $i=0;$i<=$#sink;$i=$i+2){
                            my $sink_inst = $sink[$i];
                            my $sink_pin = $sink[$i+1];
                            my $sink_value;
                            my @coords = ();
                            if(exists $SPICE_INST_LOC{$sink_inst}){
                               $sink_value = $SPICE_INST_LOC{$sink_inst};
                            }
                            if($source_pin eq "gate"){
                               @coords = &get_net_coords_for_gate($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);
                            }elsif($source_pin eq "drain"){
                               if($net =~ /vdd/){
                                 #@coords = &get_net_coords_for_vdd($source_inst,$src_value,$chip_width,$chip_height,$trans_width,$trans_height);
                                 @coords = &get_net_coords_for_vdd($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
                               }elsif($net =~ /vss/){
                                 #@coords = &get_net_coords_for_vss($source_inst,$src_value,$chip_width,$chip_height,$trans_width,$trans_height);
                                 @coords = &get_net_coords_for_vss($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
                               }else{ 
                                 @coords = &get_net_coords_for_drain($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);
                               }
                            }elsif($source_pin eq "source"){
                               if($net =~ /vdd/){
                                 #@coords = &get_net_coords_for_vdd($source_inst,$src_value,$chip_width,$chip_height,$trans_width,$trans_height);
                                 @coords = &get_net_coords_for_vdd($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
                               }elsif($net =~ /vss/){
                                 #@coords = &get_net_coords_for_vss($source_inst,$src_value,$chip_width,$chip_height,$trans_width,$trans_height);
                                 @coords = &get_net_coords_for_vss($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
                               }else{ @coords = &get_net_coords_for_source($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);}
                            }
                            if($#coords >= 3){
                               my @sink_inst_coords = ();
                               if($sink_inst =~ /vdd/i){
                                  $sink_inst =~ s/\d+_tmpslvr_//;
                                 my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
                                 @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
                               }elsif($sink_inst =~ /vss/i){
                                 $sink_inst =~ s/\d+_tmpslvr_//;
                                 my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
                                 @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
                               }else {
                                 my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
                                 @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
                               }
                               my ($text_llx, $text_lly, $text_urx, $text_ury) = ("null", "null", "null", "null");
                               my ($stID, $endID);
                               #print "\n";
                               #print "$net\n";
                               #print "  sink:@sink_inst_coords src:@src_inst_coords \n";
                               #print "  net:@coords\n";
                               if((($coords[0] == $sink_inst_coords[0] || $coords[0] == $sink_inst_coords[2] || $coords[1] == $sink_inst_coords[1] || $coords[1] == $sink_inst_coords[3]) &&  ($coords[-2] == $src_inst_coords[0] || $coords[-2] == $src_inst_coords[2] || $coords[-1] == $src_inst_coords[1] || $coords[-1] == $src_inst_coords[3])) || (($coords[0] == $src_inst_coords[0] || $coords[0] == $src_inst_coords[2] || $coords[1] == $src_inst_coords[1] || $coords[1] == $src_inst_coords[3]) &&  ($coords[-2] == $sink_inst_coords[0] || $coords[-2] == $sink_inst_coords[2] || $coords[-1] == $sink_inst_coords[1] || $coords[-1] == $sink_inst_coords[3]))){ 
                                  #WARN: Currently, we are using vector: x=null & y=null . We should calculate coordinates ($text_llx, $text_lly, $text_urx, $text_ury) later
                                  if($coords[0] == $sink_inst_coords[0]){ 
                                     $stID = $INST_CONN_POINTS{$sink_inst}->[0]; #point at mid left
                                  }if($coords[0] == $sink_inst_coords[2]){ 
                                     $stID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid right
                                  }if($coords[1] == $sink_inst_coords[1]){ 
                                     $stID = $INST_CONN_POINTS{$sink_inst}->[1]; #point at mid bottom
                                  }if($coords[1] == $sink_inst_coords[3]){ 
                                     $stID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid top
                                  }if($coords[0] == $src_inst_coords[0]){ 
                                     $stID = $INST_CONN_POINTS{$source_inst}->[0]; #point at mid left
                                  }if($coords[0] == $src_inst_coords[2]){ 
                                     $stID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid right
                                  }if($coords[1] == $src_inst_coords[1]){ 
                                     $stID = $INST_CONN_POINTS{$source_inst}->[1]; #point at mid bottom
                                  }if($coords[1] == $src_inst_coords[3]){ 
                                     $stID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid top
                                  }

                                  if($coords[-2] == $src_inst_coords[0]){ 
                                     $endID = $INST_CONN_POINTS{$source_inst}->[0]; #point at mid left
                                  }if($coords[-2] == $src_inst_coords[2]){ 
                                     $endID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid right
                                  }if($coords[-1] == $src_inst_coords[1]){ 
                                     $endID = $INST_CONN_POINTS{$source_inst}->[1]; #point at mid bottom
                                  }if($coords[-1] == $src_inst_coords[3]){ 
                                     $endID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid top
                                  }if($coords[-2] == $sink_inst_coords[0]){ 
                                     $endID = $INST_CONN_POINTS{$sink_inst}->[0]; #point at mid left
                                  }if($coords[-2] == $sink_inst_coords[2]){ 
                                     $endID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid right
                                  }if($coords[-1] == $sink_inst_coords[1]){ 
                                     $endID = $INST_CONN_POINTS{$sink_inst}->[1]; #point at mid bottom
                                  }if($coords[-1] == $sink_inst_coords[3]){ 
                                     $endID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid top
                                  }


                               }  
                               $out_str = $out_str."{";
                               $out_str = $out_str."\"id\":$cnt,";
                               $out_str = $out_str."\"turningPoints\":["; #turningPoints block start
                               for(my $i=0; $i<=$#coords; $i=$i+2){
                                   $out_str = $out_str."{\"x\":$coords[$i],\"y\":$coords[$i+1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                               }
                               $out_str =~ s/\,$//; #removing extra comma at last 
                               $out_str = $out_str."],"; #turningPoints block end
                               $out_str = $out_str."\"type\":\"jagged\","; #wire type block
                               $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"lineWidth\":$wireWidth,\"length\":204,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
                               $out_str = $out_str."\"middleText\":{";
                                          $out_str = $out_str."\"str\":\"$net\",\"font\":\"Arial\",\"size\":10,\"lineSpacing\":2.5,\"align\":\"center\",\"valign\":\"middle\","; #middle text sring block
                                          $out_str = $out_str."\"vector\":[{\"x\":$text_llx,\"y\":$text_lly,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$text_urx,\"y\":$text_ury,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #middle text vector block
                                          $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #middle text style block
                                          $out_str = $out_str."\"bounds\":{"; #middle text bounds block start
                                                     $out_str = $out_str."\"points\":["; #bounds points block start
                                                     for(my $j=0; $j<=3; $j++){ #currently we are putting bounds coordinates value = null
                                                         $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                                                     }
                                                     $out_str =~ s/\,$//; #removing extra comma in last point
                                                     $out_str = $out_str."],"; #bounds point block end 
                                                     $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #bounds style block 
                                          $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
                               $out_str = $out_str."\"debug\":false,\"oType\":\"Text\",\"bgStyle\":\"#ffffff\"},"; #middleText block end
                               if($wireWidth > 0.2){
                                  $out_str = $out_str."\"properties\":[{\"name\":\"Bus\",\"property\":\"middleText.str\",\"type\":\"Text\"},{\"name\":\"Bus width\",\"property\":\"style.lineWidth\",\"type\":\"BusWidth\"},{\"name\":\"Length\",\"property\":\"style.length\",\"type\":\"Length\"}],"; #properties block
                               }else{
                                  $out_str = $out_str."\"properties\":[{\"name\":\"Wire\",\"property\":\"middleText.str\",\"type\":\"Text\"}],"; #properties block
                               }
                               $out_str = $out_str."\"startStyle\":\"Normal\",\"endStyle\":\"Normal\",\"activeConnectionPointId\":-1,\"visualDebug\":false,\"oType\":\"Connector\"},";#Connector  block end

                               ########################## Making connectionPoints string ############################
                               $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[0],\"y\":$coords[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
                               #if(($net =~ /vdd_net/) && ($sink_inst =~ /vdd/)){
                               #  $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 

                               #}else {
                                 $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
                               #}
                               $connPointIdCnt++;

                               $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[-2],\"y\":$coords[-1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
                               #if(($net =~ /vdd_net/) && ($sink_inst =~ /vdd/)){
                               #  $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
                               #}else {
                                $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
                               #}
                               #print "$net => $source_inst => $sink_inst => $stID,$endID\n";
                               $connPointIdCnt++;
                               ######################################################################################

                            }
                            $cnt++; 
                        }#for each sink instance
                     }#foreach net
                  }#else
                  $out_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str."],"; #connector block end

                  $out_str = $out_str."\"connectionPoints\":["; #connectionPoints block start
                            $sub_out_str =~ s/\,$//; #removing extra comma in last point
                            $out_str = $out_str.$sub_out_str;
                  $out_str = $out_str."],"; #connectionPoints block end

                  $out_str = $out_str."\"connectionPointCurrentId\":3,"; #connectionPointCurrentId block 
                  
                  $out_str = $out_str."\"glues\":["; #glues block start
                          $glue_str =~ s/\,$//; #removing extra comma in last point
                  $out_str = $out_str.$glue_str."]"; #glues block end
                  #$out_str = $out_str."]"; #glues block end  
       $out_str = $out_str."}"; #connectivity block end

       $out_str =~ s/\,$//; #removing extra comma in last point
       $out_str = $out_str."}"; #canvas block end 
    }#if top module exists
    print WRITE "$out_str\n";
    close WRITE;
}#else
}#sub write_edp_dia_for_spice_old
#-------------------------------------------------------------------------------------------#
sub calc_size_from_given_loc {
  my $instance = $_[0];
  my $value = $_[1];
  my $trans_width = $_[2];
  my $trans_height = $_[3];
  my $X;
  my $Y;
  my @data_list = (split(/\s+/,$value));
  for(my $i=0; $i<=$#data_list;$i++){
    if($data_list[$i] =~ /\$x=/i){$X = (split(/\s*=/,$data_list[$i]))[1];}
    if($data_list[$i] =~ /\$y=/i){$Y = (split(/\s*=/,$data_list[$i]))[1];}
  }#for
  my $x1 = sprintf("%.2f", $X);
  my $y1 = sprintf("%.2f", $Y);
  my $x2 = sprintf("%.2f", $X+$trans_width);
  my $y2 = sprintf("%.2f", $Y);
  my $x3 = sprintf("%.2f", $X+$trans_width); 
  my $y3 = sprintf("%.2f", $Y+$trans_height); 
  my $x4 = sprintf("%.2f", $X); 
  my $y4 = sprintf("%.2f", $Y+$trans_height); 
  return($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);
}#sub calc_size_from_given_loc
#-------------------------------------------------------------------------------------------#
sub calc_size_from_given_vss_loc {
my $chip_width = $_[0];
my $chip_height = $_[1];
my $trans_height = $_[2];

my $chip_llx = 0;
my $chip_lly = 0;
my $chip_urx = $chip_width;
my $chip_ury = $chip_height; 

my $x1= sprintf("%.2f",$chip_llx);
my $y1= sprintf("%.2f",$chip_lly);
my $x2= sprintf("%.2f",$chip_urx);
my $y2= sprintf("%.2f",$chip_lly);
my $x3= sprintf("%.2f",$chip_urx);
my $y3= sprintf("%.2f",$trans_height/2);
my $x4= sprintf("%.2f",$chip_llx);
my $y4= sprintf("%.2f",$trans_height/2);
return($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);
}#sub calc_size_from_given_vss_loc
#-------------------------------------------------------------------------------------------#
sub calc_size_from_given_vdd_loc {
my $chip_width = $_[0];
my $chip_height = $_[1];
my $trans_height = $_[2];

my $chip_llx = 0;
my $chip_lly = 0;
my $chip_urx = $chip_width;
my $chip_ury = $chip_height; 

my $x1= sprintf("%.2f",$chip_llx);
my $y1= sprintf("%.2f",$chip_ury-($trans_height/2));
my $x2= sprintf("%.2f",$chip_urx);
my $y2= sprintf("%.2f",$chip_ury-($trans_height/2));
my $x3= sprintf("%.2f",$chip_urx);
my $y3= sprintf("%.2f",$chip_ury);
my $x4= sprintf("%.2f",$chip_llx);
my $y4= sprintf("%.2f",$chip_ury);
return($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);
}#sub calc_size_from_given_vdd_loc
#-------------------------------------------------------------------------------------------#
sub get_source_and_sink_list{
  my $moduleName = $_[0];
  my $net = $_[1];
  my @sink_list = ();
  my ($NET_HASH_DATA,$NET_PARAM_HASH_DATA) = &get_net_hash($TOP_MODULE); 
  my %NET_HASH = %$NET_HASH_DATA;
  my %NET_PARAM_HASH = %$NET_PARAM_HASH_DATA;
  #my %NET_HASH = &get_net_hash($moduleName); 
  if(exists $NET_HASH{$net}){
    my @instance_list = @{$NET_HASH{$net}}; 
    my $source_inst = shift(@instance_list);
    my @source_list = @$source_inst;
    foreach my $i (@instance_list){
     push(@sink_list,@$i);
    }
    return(\@source_list,\@sink_list);
  }#if exists
}#sub get_source_and_sink_list
#-------------------------------------------------------------------------------------------#
sub get_net_hash {
 my %NET_HASH = ();
 my %NET_PARAM_HASH = ();
 foreach my $net (keys  %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}}){
   my @source = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSourceFanInList;
   my @sink = $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$net}->dbaTstgenGetPseudoNetSinkFanOutList;
   if($net =~ /vdd/i){
     my $src_inst = $source[0];
     my $src_pin = $source[1];
     if($src_pin =~ /^\d+_tmpslvr_body/){
       for(my $i=0;$i<=$#sink;$i=$i+2){
         my $sink_inst = $sink[$i];
         my $sink_pin = $sink[$i+1];
         if(($sink_pin =~ /^\d+_tmpslvr_source/) || ($sink_pin =~ /^\d+_tmpslvr_drain/)){
           $sink_pin =~ s/^\d+_tmpslvr_//;
           push(@{$NET_HASH{$net}},[$sink_inst,$sink_pin]);
           delete $sink[$i];
           delete $sink[$i+1];
           last;
         }
       }
       push (@sink,$src_inst,$src_pin);
     }else {
       my $src_inst = $source[0];
       my $src_pin = $source[1];
       $src_pin =~ s/^\d+_tmpslvr_//;
       push(@{$NET_HASH{$net}},[$src_inst,$src_pin]);
     }
     push (@sink,$net,"source");
   }elsif($net =~ /(vss|gnd)/i){
     my $src_inst = $source[0];
     my $src_pin = $source[1];
     if($src_pin =~ /^\d+_tmpslvr_body/){
       for(my $i=0;$i<=$#sink;$i=$i+2){
         my $sink_inst = $sink[$i];
         my $sink_pin = $sink[$i+1];
         if(($sink_pin =~ /^\d+_tmpslvr_source/) || ($sink_pin =~ /^\d+_tmpslvr_drain/)){
           $sink_pin =~ s/^\d+_tmpslvr_//;
           push(@{$NET_HASH{$net}},[$sink_inst,$sink_pin]);
           delete $sink[$i];
           delete $sink[$i+1];
           last;
         }
       }
       push (@sink,$src_inst,$src_pin);
     }else {
       my $src_inst = $source[0];
       my $src_pin = $source[1];
       $src_pin =~ s/^\d+_tmpslvr_//;
       push(@{$NET_HASH{$net}},[$src_inst,$src_pin]);
     }
     push (@sink,$net,"source");
   }else {
     my $src_inst = $source[0];
     my $src_pin = $source[1];
     $src_pin =~ s/^\d+_tmpslvr_//;
     push(@{$NET_HASH{$net}},[$src_inst,$src_pin]);
   }
   if(($net !~ /^\d+_tmpslvr_/) && ($source[1] =~ /^\d+_tmpslvr_param_/)){
     push(@{$NET_PARAM_HASH{$source[0]}},$source[1],$net);
     next;
   }
   for(my $i=0;$i<=$#sink;$i=$i+2){
     my $sink_inst = $sink[$i]; 
     my $sink_pin = $sink[$i+1]; 
     $sink_pin =~ s/^\d+_tmpslvr_//;
     push(@{$NET_HASH{$net}},[$sink_inst,$sink_pin]);
   }
 }#foreach
  #foreach my $net (keys %NET_PARAM_HASH){
    #print "$net => @{$NET_PARAM_HASH{$net}}\n";
    #my @net_data =  @{$NET_HASH{$net}};
    #foreach my $v (@net_data){
    #  #print "$net => @$v\n";
    #}  
  #}#foreach
return (\%NET_HASH,\%NET_PARAM_HASH);
}#sub get_net_hash 
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_gate {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $sink_inst = $_[2];
  my $sink_value = $_[3]; 
  my $trans_width = $_[4];
  my $trans_height = $_[5];
  my $sink_pin = $_[6]; 
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  my @src_point = (sprintf("%.2f",($src_loc[0])),sprintf("%.2f",($src_loc[1]))+sprintf("%.2f",($src_height/2)));

  my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
  my @sink_loc = ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4);
  my $sink_width = ($sink_loc[2] - $sink_loc[0]);
  my $sink_height = ($sink_loc[5] - $sink_loc[1]); 
  if($sink_pin eq "gate"){
    my @sink_point = (sprintf("%.2f",($sink_loc[0])),sprintf("%.2f",($sink_loc[1]))+sprintf("%.2f",($sink_height/2)));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }elsif($sink_pin eq "drain"){
    my @sink_point = ((sprintf("%.2f",($sink_loc[4]))),(sprintf("%.2f",($sink_loc[3]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }elsif($sink_pin eq "source"){
    my @sink_point = ((sprintf("%.2f",($sink_loc[2]))),(sprintf("%.2f",($sink_loc[7]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }else{
    print "ERR : $sink_pin sink pin not found\n";
  }
  return (@coords); 
}#sub get_net_coords_for_gate
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_drain {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $sink_inst = $_[2];
  my $sink_value = $_[3]; 
  my $trans_width = $_[4];
  my $trans_height = $_[5];
  my $sink_pin = $_[6];
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  my @src_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[3])));
  
  my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
  my @sink_loc = ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4);
  my $sink_width = ($sink_loc[2] - $sink_loc[0]);
  my $sink_height = ($sink_loc[5] - $sink_loc[1]); 
  if($sink_pin eq "gate"){
    my @sink_point = (sprintf("%.2f",($sink_loc[0])),sprintf("%.2f",($sink_loc[1]))+sprintf("%.2f",($sink_height/2)));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }elsif($sink_pin eq "drain"){
    my @sink_point = ((sprintf("%.2f",($sink_loc[4]))),(sprintf("%.2f",($sink_loc[3]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }elsif($sink_pin eq "source"){
    my @sink_point = ((sprintf("%.2f",($sink_loc[2]))),(sprintf("%.2f",($sink_loc[7]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }else{
    print "ERR : $sink_pin sink pin not found\n";
  }
  return(@coords);
}#sub get_net_coords_for_drain
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_source {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $sink_inst = $_[2];
  my $sink_value = $_[3]; 
  my $trans_width = $_[4];
  my $trans_height = $_[5];
  my $sink_pin = $_[6]; 
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  my @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));

  my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
  my @sink_loc = ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4);
  my $sink_width = ($sink_loc[2] - $sink_loc[0]);
  my $sink_height = ($sink_loc[5] - $sink_loc[1]); 
  if($sink_pin eq "gate"){
    #my @sink_point = ($sink_loc[0],$sink_loc[1]+$sink_height/2);
    my @sink_point = (sprintf("%.2f",($sink_loc[0])),sprintf("%.2f",($sink_loc[1]))+sprintf("%.2f",($sink_height/2)));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point,@midPoint,@sink_point);
  }elsif($sink_pin eq "drain"){
    #my @sink_point = ($sink_loc[4],$sink_loc[3]);
    my @sink_point = ((sprintf("%.2f",($sink_loc[4]))),(sprintf("%.2f",($sink_loc[3]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point, @midPoint,@sink_point);
  }elsif($sink_pin eq "source"){
    #my @sink_point = ($sink_loc[2],$sink_loc[7]);
    my @sink_point = ((sprintf("%.2f",($sink_loc[2]))),(sprintf("%.2f",($sink_loc[7]))));
    my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
    @coords = (@src_point, @midPoint,@sink_point);
  }else{
    print "ERR : $sink_pin sink pin not found\n";
  }
  return(@coords);
}#sub get_net_coords_for_source
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_vdd_old {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $chip_width = $_[2];
  my $chip_height = $_[3];
  my $trans_width = $_[4];
  my $trans_height = $_[5];
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  #my @src_point = ($src_loc[2]-$src_width/4,$src_loc[7]-$src_height/4);
  #my @sink_point = ($src_loc[2]-$src_width/4,$src_loc[7]-$src_height/4);
  my @sink_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[3])));# end point of line 7
  my @location = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
  #my $midX = ($location[0] + $location[4])/2;
  my $midX = ($src_loc[4]);
  #my $midY = ($location[1] + $location[5])/2;
  my $midY = ($location[1] + $location[5]);

  #my @sink_point = ($midX,$midY); 
  my @src_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
  @coords = (@src_point,@sink_point);
  #@coords = (@sink_point,@src_point);
  return(@coords);
}#sub get_net_coords_for_vdd_old
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_vss {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $sink_inst = $_[2];
  my $sink_value = $_[3];
  my $sink_pin = $_[4];
  my $trans_width = $_[5];
  my $trans_height = $_[6];
  my $chip_width = $_[7];
  my $chip_height = $_[8];
  my $source_pin = $_[9];
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  #my @src_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[3])));# end point of line 7
  my  @src_point = ();
  if($source_pin eq "source"){
     @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));# src point for vdd net if pin is source
  }elsif($source_pin eq "drain"){
     @src_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[3])));# src point for vdd net if pin is drain
  }else{
    print "src pin is not found\n";
  }
  #my @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));# end point of line 7

  my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
  my @sink_loc = ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4);

  if($sink_pin eq "drain"){
    if($sink_inst =~ /(vss|gnd)/i){
       my @location = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
       my $midX = ($location[4] + $location[6])/2;
       my $midY = $location[5];
       my @sink_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
       my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
       @coords = (@src_point, @midPoint,@sink_point);
    }else {
      my @sink_point = ((sprintf("%.2f",($sink_loc[4]))),(sprintf("%.2f",($sink_loc[3]))));
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }
  }elsif($sink_pin eq "source"){
    if($sink_inst =~  /(vss|gnd)/i){
       my @location = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
       my $midX = ($location[4] + $location[6])/2;
       my $midY = $location[5];
       my @sink_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
       my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
       @coords = (@src_point, @midPoint,@sink_point);
    }else{
      my @sink_point = ((sprintf("%.2f",($sink_loc[2]))),(sprintf("%.2f",($sink_loc[7]))));
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }
  }
  return(@coords);
}#sub get_net_coords_for_vss
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_vdd {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $sink_inst = $_[2];
  my $sink_value = $_[3];
  my $sink_pin = $_[4];
  my $trans_width = $_[5];
  my $trans_height = $_[6];
  my $chip_width = $_[7];
  my $chip_height = $_[8];
  my $source_pin = $_[9];
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  my  @src_point = ();
  if($source_pin eq "source"){
     @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));#src point for vdd net if pin is source 
  }elsif($source_pin eq "drain"){
     @src_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[3])));# src point for vdd net if pin is drain
  }else{
    print "src pin is not found\n";
  }
  #my @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));#end point of line 6
  my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
  my @sink_loc = ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4);
  if($sink_pin eq "drain"){
    if($sink_inst =~ /vdd/i){
      my @location = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
      my $midX = ($location[0] + $location[2])/2;
      my $midY = $location[1] ;
      my @sink_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }else {
      my @sink_point = ((sprintf("%.2f",($sink_loc[4]))),(sprintf("%.2f",($sink_loc[3]))));
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }
  }elsif($sink_pin eq "source"){
    if($sink_inst =~  /vdd/i){
      my @location = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
      my $midX = ($location[0] + $location[2])/2;
      my $midY = $location[1] ;
      my @sink_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }else{
      my @sink_point = ((sprintf("%.2f",($sink_loc[2]))),(sprintf("%.2f",($sink_loc[7]))));
      my @midPoint = ($src_point[0],$sink_point[1]); #for jagged wire
      @coords = (@src_point, @midPoint,@sink_point);
    }
  }
  return(@coords);
}#sub get_net_coords_for_vdd
#-------------------------------------------------------------------------------------------#
sub get_net_coords_for_vss_old {
  my $src_inst = $_[0];
  my $src_value = $_[1];
  my $chip_width = $_[2];
  my $chip_height = $_[3];
  my $trans_width = $_[4];
  my $trans_height = $_[5];
  my @coords = ();
  my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($src_inst,$src_value,$trans_width,$trans_height);
  my @src_loc = ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4);
  my $src_width = ($src_loc[2] - $src_loc[0]);
  my $src_height = ($src_loc[5] - $src_loc[1]); 
  #my @src_point = ($src_loc[2]-$src_width/4,$src_loc[1]+$src_height/4);
  #my @src_point = (sprintf("%.2f",($src_loc[4])),sprintf("%.2f",($src_loc[5])));#end point of line 6
  my @src_point = (sprintf("%.2f",($src_loc[2])),sprintf("%.2f",($src_loc[7])));#end point of line 6

  my @location = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
  #my $midX = ($location[0] + $location[4])/2;
  my $midX = ($src_loc[4]);
 # my $midY = ($location[1] + $location[5])/2;
  my $midY = $location[1] ;
  my @sink_point = (sprintf("%.2f",($midX)),sprintf("%.2f",($midY))); 
  @coords = (@src_point,@sink_point);
  return(@coords);
}#sub get_net_coords_for_vss_old
#-------------------------------------------------------------------------------------------#

#sub flatdblocationRouting2EarlyProto {
#  my $flplanID; 
#  if ( exists $FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"} ) {
#    $flplanID = $FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"};
#  }#if exists floorplan
#  my @size = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetSize;
#  my $dbu = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetDBUnit;
#  my $chip_width = ($size[2]-$size[0])/$dbu;
#  my $chip_height = ($size[3]-$size[1])/$dbu;
#  foreach my $instance (keys %COMP_ALREADY){
#    my @origLoc = $CADB{$instance}->dbCadbGetLoc;
#    my $origX = $origLoc[0]/$dbu;
#    my $origY = $origLoc[1]/$dbu;
#    my $status = $CADB{$instance}->dbCadbGetStatus; 
#    my $orient = $CADB{$instance}->dbCadbGetOrient; 
#    if(exists $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}){
#      my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
#      if(exists $PLDB{$cellref}){
#        $FLOORPLAN_ALREADY{$flplanID}->dbFlplanAddLeafInst($instance,$origLoc[0],$origLoc[1],$orient);
#        $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBSetInstOrient($orient);
#        my ($width, $height) = $PLDB{$cellref}->dbMdbGetSize;
#        if($FLOORPLAN_ALREADY{$flplanID}->dbFlplanHasLeafInst($instance)){
#          $FLOORPLAN_ALREADY{$flplanID}->dbFlplanUpdateLeafInstBbox($instance,$width,$height);
#        }
#      }#if exists
#        my @bbox = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetLeafInstBbox($instance);
#        #for (my $i = 0; $i < 4; $i++) {
#        #  $bbox[$i] /= $dbu;
#        #}
#        my $llx = $bbox[0];
#        my $lly = $bbox[1];
#        my $urx = $bbox[2];
#        my $ury = $bbox[3];
#        my $width  = $urx - $llx ;
#        my $height = $ury - $lly;
#        my $new_llx = $llx/$dbu; 
#        my $new_lly = $lly/$dbu; 
#        my $new_urx = $new_llx + $width;
#        my $new_ury = $new_lly + $height;
#        my @new_bbox = ($new_llx,$new_lly,$new_urx,$new_ury);
#        $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBSetInstRelBbox(@new_bbox);
#    }
#  }
#  foreach my $netName (keys %NETS_ALREADY){
#    my @routedBox = ();
#    if ( exists $NADB{$netName} ){
#      my $netType = $NADB{$netName}->dbNadbGetNetType; 
#      if($netType == 0){
#         my @routes = $NETS_ROUTING_ALREADY{$netName}->dbNetRoutingDBGetRegularRoute;
#         foreach $l ( @routes ) {
#           my $layerName = (split(/\s+/,$l))[0];
#           my @routeBox = &xformNetSegToPathSeg($l);
#           $_ /= $dbu for @routeBox;
#           push(@routedBox,[$routeBox[0],$routeBox[1],$routeBox[2],$routeBox[3],$layerName]);
#         }
#
#        if(exists $PSEUDO_VNET_ALREADY{$TOP_MODULE}{$netName}){
#          $PSEUDO_VNET_ALREADY{$TOP_MODULE}->{$netName}->dbaTstgenSetPseudoExtNetCoords(@routedBox);
#        }
#      }#if netType
#    }
#  }#foreach 
#}#sub flatdblocationRouting2EarlyProto

#-------------------------------------------------------------------------------------------#
sub calc_new_width_and_height_from_edp {
my $chipW = $_[0];
my $chipH = $_[1];
my $edpW = $_[2];
my $edpH = $_[3];
my $cellW = $_[4];
my $cellH = $_[5];
my $new_width;
my $new_height;
$new_width = $cellW*($edpW/$chipW);
$new_height = $cellH*($edpH/$chipH);
return($new_width,$new_height);
}#sub calc_new_width_and_height_from_edp
#-------------------------------------------------------------------------------------------#
sub calc_new_loc_from_edp {
my $chipW = $_[0];
my $chipH = $_[1];
my $edpW = $_[2];
my $edpH = $_[3];
my $locx = $_[4];
my $locy = $_[5];
my $new_locx;
my $new_locy;
$new_locx = $locx*($edpW/$chipW);
$new_locy = $locy*($edpH/$chipH);
return($new_locx,$new_locy);
}#sub calc_new_loc_from_edp
#-------------------------------------------------------------------------------------------#
sub calc_height_and_width_of_trans {
  my $number_of_trans = $_[0];
  my $chip_width = $_[1];
  my $chip_height = $_[2];
  my $trans_w;
  my $trans_h;
  my $chip_llx = 0;
  my $chip_lly = 0;
  my $chip_urx = $chip_width;
  my $chip_ury = $chip_height;
  my $chip_width = ($chip_urx-$chip_llx);
  my $chip_height = ($chip_ury-$chip_lly);
  my $area_of_chip = $chip_width*$chip_height;
  my $percentage = 10;
  my $new_area_of_chip = ($area_of_chip*$percentage)/100; 
  my $area_of_each_trans = $new_area_of_chip/$number_of_trans;  
  my $value = sqrt ($area_of_each_trans);
  my $trans_w = $value;
  my $trans_h = $value;
  return($trans_w,$trans_h);
}#sub calc_height_and_width_of_trans
#-----------------------------------------------------------------------------------------------------#
sub data_get_from_connLine {
  my $connLine = $_[0];
  $connLine =~ s/\(/\)\,/;
  $connLine =~ s/\s*\)\s*\)\s*\;?.*$/\)/;
  my ($cell,$inst) = ( split(/\s+/, $connLine ))[0,1];
  my $x_val;
  my $y_val;
  my $x_pin;
  my $y_pin;
  my @nets = split(/\s*\)\s*\,\s*/, $connLine);
  for(my $i=1; $i<=$#nets;$i++){
    $nets[$i] =~ s/\s*\(\s*/\|/;
    $nets[$i] =~ s/\s*\)\s*//;
    my ($pin,$net)=(split(/\s*\|\s*/, $nets[$i]))[0,1];
    $pin =~ s/\.//;
    if($pin =~ /^\d+_tmpslvr_param_\$x/i){
      $x_val = $net;
      $x_pin = $pin;
    }elsif($pin =~ /^\d+_tmpslvr_param_\$y/i){
      $y_val = $net;
      $y_pin = $pin;
    }
  }#for
  return($inst,$x_pin,$x_val,$y_pin,$y_val);
}#sub data_get_from_connLine
#-----------------------------------------------------------------------------------------------------#
sub get_vdd_and_vss_from_connLine {
  my @conns = $MODULE_ALREADY{$TOP_MODULE}->dbVNOMGetConn;
  my $vdd_inst;
  my $vss_inst;
  foreach my $connLine (@conns){
    $connLine =~ s/\(/\)\,/;
    $connLine =~ s/\s*\)\s*\)\s*\;?.*$/\)/;
    my ($cell,$inst) = ( split(/\s+/, $connLine ))[0,1];
    my @nets = split(/\s*\)\s*\,\s*/, $connLine);
    for(my $i=1; $i<=$#nets;$i++){
      $nets[$i] =~ s/\s*\(\s*/\|/;
      $nets[$i] =~ s/\s*\)\s*//;
      my ($pin,$net)=(split(/\s*\|\s*/, $nets[$i]))[0,1];
      $pin =~ s/\.//;
      if($net =~ /vdd/i){$vdd_inst = $net;}
      elsif($net =~ /vss|gnd/i){$vss_inst = $net;}
    }#for
  }
  return($vdd_inst,$vss_inst);
}#sub get_vdd_and_vss_from_connLine
#-----------------------------------------------------------------------------------------------------#

##########################################################################################################
###################################### write dia files for hierarchy #####################################
##########################################################################################################
#sub write_hier_dia{
# my $noOfArg = @_; 
# if($_[0] eq '-h' || $_[0] eq "-H" || $_[0] eq "-help" || $_[0] eq "-HELP") { 
#    print "Usage : write_hier_dia -module <module name>\n";
#    print "                       -no_of_level <number of hierarchy levels>\n";
#    return ;
# }else{
#  my $numOfLevel = -1;
#  my $moduleName =  $GLOBAL->dbfGlobalGetTOP();
#  for(my $xx=0; $xx<$noOfArg; $xx++){
#      if($_[$xx] eq "-module"){$moduleName = $_[$xx+1];}
#      if($_[$xx] eq "-no_of_level"){$numOfLevel = $_[$xx+1];}
#   }
#   if(exists $MODULE_ALREADY{$moduleName}){
#      &editModule("-module",$moduleName);
#      if(-d $moduleName){
#         system("rm -rf $moduleName");
#      }
#      mkdir("$moduleName", 0755) ;
#      &write_edp_dia( "-output", "$moduleName/$moduleName.dia", "-W", 800, "-H", 800);
#      &call_write_hier_dia($moduleName, $numOfLevel, 0, $moduleName);
#   }else{
#      print "WARN: module $cellref does not exists..\n";
#   }
# }
#}#sub write_hier_dia
#
#sub call_write_hier_dia{
# my $moduleName = $_[0];
# my $numOfLevel = $_[1];
# my $currentLevel = $_[2];
# my $full_path = $_[3];
#
# if($currentLevel != -1 && $currentLevel == $numOfLevel){
#    return;
# }
#
# my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
# foreach my $inst (sort @hierInsts){
#   my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($inst);
#   if(exists $MODULE_ALREADY{$cellref}){
#      print "INFO 01: Generating dia for $full_path/$inst/$cellref\n";
#      &editModule("-module",$cellref);
#      if(-d "$full_path/$inst"){
#         system("rm -rf $full_path/$inst");
#      }
#      mkdir("$full_path/$inst", 0755) ;
#      &write_edp_dia( "-output", "$full_path/$inst/$cellref.dia", "-W", 800, "-H", 800);
#      &call_write_hier_dia($cellref, $numOfLevel, $currentLevel++, "$full_path/$inst");
#   }else{
#      print "WARN: module $cellref does not exists..\n";
#   }
# }
#}#sub call_write_hier_dia


##########################################################################################################
###################################### write dia files for hierarchy in one dir only #####################
##########################################################################################################
sub write_hier_dia{
 my $noOfArg = @_; 
 if($_[0] eq '-h' || $_[0] eq "-H" || $_[0] eq "-help" || $_[0] eq "-HELP") { 
    print "Usage : write_hier_dia -module <module name>\n";
    print "                       -no_of_level <number of hierarchy levels>\n";
    return ;
 }else{
  my $numOfLevel = -1;
  my $moduleName =  $GLOBAL->dbfGlobalGetTOP();
  for(my $xx=0; $xx<$noOfArg; $xx++){
      if($_[$xx] eq "-module"){$moduleName = $_[$xx+1];}
      if($_[$xx] eq "-no_of_level"){$numOfLevel = $_[$xx+1];}
   }
   if(exists $MODULE_ALREADY{$moduleName}){
      &editModule("-module",$moduleName);
      if(-d $moduleName){
         system("rm -rf $moduleName");
      }
      &write_edp_dia( "-output", "$moduleName.dia", "-W", 800, "-H", 800);
      &call_write_hier_dia($moduleName, $numOfLevel, 0, $moduleName);
   }else{
      print "WARN: module $moduleName does not exists..\n";
   }
 }
}#sub write_hier_dia

sub call_write_hier_dia{
 my $moduleName = $_[0];
 my $numOfLevel = $_[1];
 my $currentLevel = $_[2];
 my $full_path = $_[3];

 if($currentLevel != -1 && $currentLevel == $numOfLevel){
    return;
 }

 my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
 foreach my $inst (sort @hierInsts){
   my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($inst);
   if(exists $MODULE_ALREADY{$cellref}){
      print "INFO 01: Generating dia for $full_path/$inst/$cellref\n";
      &editModule("-module",$cellref);
      if(-d "$full_path/$inst"){
         system("rm -rf $full_path/$inst");
      }
      &write_edp_dia( "-output", "${full_path}_slvrn_${inst}.dia", "-W", 800, "-H", 800);
      &call_write_hier_dia($cellref, $numOfLevel, $currentLevel++, "${full_path}_slvrn_${inst}");
   }else{
      print "WARN: module $cellref does not exists..\n";
   }
 }
}#sub call_write_hier_dia

sub convert_proton_dia_to_gui_dia
{
my $in_dia_file = $_[0];
my $out_dia_file = $_[1];
my $gui_window_height = $_[2];
open(READ,"<$in_dia_file");
open(WRITE,">$out_dia_file");
my $curr_y_val_pos_start=0;
my $curr_y_val_pos_end=0;
my $curr_y_val_str_len=0;
my $curr_y_val=0;
my $extra_string_for_write="";
my $extra_string_len_for_write="";
while(<READ>){
  $curr_y_val_pos_start=index($_,"\"y\":",$curr_y_val_pos_start);
  while($curr_y_val_pos_start >=0){
    $curr_y_val_pos_start = $curr_y_val_pos_start + 4;
    $extra_string_len_for_write=$curr_y_val_pos_start - $curr_y_val_pos_end;
    $extra_string_for_write=substr($_,$curr_y_val_pos_end,$extra_string_len_for_write);
    print WRITE "$extra_string_for_write" ;
    $curr_y_val_pos_end=index($_,",",$curr_y_val_pos_start);
    if($curr_y_val_pos_end >=0){
      $curr_y_val_str_len=$curr_y_val_pos_end - $curr_y_val_pos_start;
      $curr_y_val=substr($_,$curr_y_val_pos_start,$curr_y_val_str_len);
      $curr_y_val = $gui_window_height - $curr_y_val;
      print WRITE "$curr_y_val";
    }
    $curr_y_val_pos_start=index($_,"\"y\":",$curr_y_val_pos_start);
  }
  $extra_string_for_write=substr($_,$curr_y_val_pos_end);
  print WRITE "$extra_string_for_write" ;
}
close(READ);
close(WRITE);
} # convert_proton_dia_to_gui_dia

sub read_data_xls{

use Benchmark;
my $t0 = new Benchmark;
   use Spreadsheet::ParseExcel;
   my $noOfArguments = @_;
   
   if($noOfArguments < 1 || $_[0] eq '-h'){ print "Usage : read_data_xls -xls <input_xls_file>\n";
   }else{
      for(my $i=0; $i < $noOfArguments;$i++){
        if($_[$i] eq "-xls"){$INPUT_XLS_FILE = $_[$i+1];}
      }
      my $diaFileName = $INPUT_XLS_FILE; 
      my $xcl = Spreadsheet::ParseExcel::Workbook->Parse($INPUT_XLS_FILE );
      open(READ,"<$INPUT_XLS_FILE");
      &call_read_data_xls($xcl);
      close(READ);
   }
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "read_data_xls took: ",timestr($td),"\n";
}#read_data_xls


sub call_read_data_xls {
 $xcl=$_[0];
 for my $sheet ( @{$xcl->{Worksheet}} ) {
   for my $row ( $sheet->{MinRow} .. $sheet->{MaxRow} ) {
      my ($mod_width,$mod_height,$llx,$lly, $space) = (0,0,0,0,0);
      my ($parent_module,$modName,$instName,$array,$orient) = ("","","","","N");       
      for my $col ( $sheet->{MinCol} .. $sheet->{MaxCol} ) {
         my $First_cell = $sheet->{Cells}[0][$col];
         my $cell = $sheet->{Cells}[$row][$col];
         my $headers = $First_cell ->{Val} ;
         my $cell_value = $cell ->{Val};
         #print "$headers=> $cell_value=> $col=> $row \n";
         if($headers eq "module"){
            if($cell_value eq ""){last LOOPA;}
            $modName = $cell_value;
            $modName =~ s/^\s+|\s+$//g;
            $MODULE{$modName} = 1;
         }elsif($headers eq "parent"){
            $parent_module = $cell_value;
            $parent_module =~ s/^\s+|\s+$//g;
         }elsif($headers eq "instance"){
            $instName = $cell_value;
            $instName =~ s/^\s+|\s+$//g;
         }elsif($headers eq "width"){
            $mod_width = $cell_value;
         }elsif($headers eq "height"){
            $mod_height = $cell_value;
         }elsif($headers eq "locX"){
            $llx = $cell_value if($cell_value ne "");
         }elsif($headers eq "locY"){
            $lly = $cell_value if($cell_value ne "");
         }elsif($headers eq "array"){
            $array = $cell_value if($cell_value ne ""); 
         }elsif($headers eq "space"){
            $space = $cell_value if($cell_value ne "");
         }elsif($headers eq "orient"){
            $orient = $cell_value if($cell_value ne "");
            $orient =~ s/^\s+|\s+$//g;
         }else{}
      }#for loop cols
      my $urx = $llx+$mod_width; 
      my $ury = $lly+$mod_height; 
      if($row == 1){
         $top_module = $modName;
         if($TOP_MODULE eq ""){
           #---------------------------------not read verilog-------------------------------#
           &createPseudoTopModule("-top", $modName, "-H", $mod_height, "-W", $mod_width);  
           print "#<CMD> createPseudoTopModule -top $modName -H $mod_height -W $mod_width\n";
         }else {
         }
         $current_top = $top_module;
      }else{
         if(exists $MODULE{$parent_module}){
            if($parent_module ne $current_top){
               &commitModule("-module", $current_top);
               &editModule("-module", $parent_module);
               print "#<CMD> commit_module -module $current_top\n";
               print "#<CMD> edit_module -module $parent_module\n";
            }                                         
            if(exists $PLDB{$modName}){                     
              &createPseudoInstance("-parent", $parent_module, "-cell", $modName, "-inst", $instName, "-loc", "{$llx,$lly}", "-orient", $orient);
              print "#<CMD> createPseudoInstance -parent $parent_module -cell $modName -inst $instName -loc {$llx,$lly} -orient $orient\n";
            }else {
              &createPseudoModule("-top", "$parent_module", "-module", $modName, "-bbox", "{$llx,$lly,$urx,$ury}");
              print "#<CMD> createPseudoModule -top $parent_module -module $modName -bbox {$llx,$lly,$urx,$ury}\n";
              &createPseudoHierModuleInst("-parent", $parent_module, "-bbox", "{$llx,$lly,$urx,$ury}","-cellref", "$modName", "-inst", "$instName");
              print "#<CMD> createPseudoHierModuleInst -parent $parent_module -bbox {$llx,$lly,$urx,$ury} -cellref $modName -inst $instName\n";
              if($array > 1){
                 for(my $i=1; $i< $array; $i++){
                     $llx = $urx + $space;
                     $urx = $llx + $mod_width;
                     &createPseudoHierModuleInst("-parent", $parent_module, "-bbox", "{$llx,$lly,$urx,$ury}","-cellref", "$modName", "-inst", $instName.$i);
                     print "#<CMD> createPseudoHierModuleInst -parent $parent_module -bbox {$llx,$lly,$urx,$ury} -cellref $modName -inst $instName$i\n";
                 }
              }
            }
         }else{print "WARN: Parent module $parent_module for instance $instName of cell $modName does not exists\n";}
      }#if not top row
      $current_top = $parent_module if($row != 1);
   }#for loop Rows
 }#for loop sheet

 &commitModule("-module", $current_top);
 &editModule("-module", $top_module);
 print "#<CMD> commit_module -module $current_top\n";
 print "#<CMD> edit_module -module $top_module\n";

}#sub call_read_data_xls


sub write_data_xls_old{
use Benchmark;
my $t0 = new Benchmark;

my $noOfArguments = @_;
use Spreadsheet::WriteExcel;

  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : -output <fileName>\n";
                                         }
  else{
    my $out_file;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-output"){$out_file = $_[$i+1];}
    }#
    my $moduleName =  $GLOBAL->dbfGlobalGetTOP();
    my $workbook = Spreadsheet::WriteExcel->new($out_file);
    my $worksheet = $workbook->add_worksheet();
    my $calc_width = "";
    my $calc_height = "";
       &report_verilog_area("-module",$moduleName);
    my $leafArea = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierArea;
    my $hierArea = $MODULE_ALREADY{$moduleName}->dbVNOMGetLeafArea;
    my $totalArea = $leafArea + $hierArea;
    $calc_width = sqrt($totalArea);
    $calc_width = sprintf("%.2f", $calc_width);
    $calc_height = $calc_width;

    $worksheet->write(0, 0,  'module');
    $worksheet->write(0, 1,  'parent');
    $worksheet->write(0, 2,  'instance');
    $worksheet->write(0, 3,  'width');
    $worksheet->write(0, 4,  'height');
    $worksheet->write(0, 5,  'locX');
    $worksheet->write(0, 6,  'locY');
    $worksheet->write(0, 7,  'states');
    $worksheet->write(0, 8,  'orient');
    $worksheet->write(0, 9,  'ffs');
    $worksheet->write(0, 10,  'io');
    $worksheet->write(0, 11,  'tc');

    $worksheet->write(1, 0,  $moduleName);
    $worksheet->write(1, 1,  'self');
    $worksheet->write(1, 2,  'self');
    $worksheet->write(1, 3,  $calc_width);
    $worksheet->write(1, 4,  $calc_height);
    $worksheet->write(1, 5,  '');
    $worksheet->write(1, 6,  '');
    $worksheet->write(1, 7,  '');
    $worksheet->write(1, 8,  '');
    $worksheet->write(1, 9,  '');
    $worksheet->write(1, 10,  '');
    $worksheet->write(1, 11,  '');
    my $rows =2;
    my @leafInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetLeafInst;
    foreach my $inst (sort @leafInsts){
       my $cellref_top = $MODULE_ALREADY{$moduleName}->dbVNOMGetLeafInstCell($inst);
       my @size = ();
       if(exists $PLDB{$cellref_top}){
         @size = $PLDB{$cellref_top}->dbMdbGetSize;
       }else {
         print "ERR : 001 : $cellref_top not exists in PLDB\n";
       }
       $worksheet->write($rows, 0,  $cellref_top);
       $worksheet->write($rows, 1,  $moduleName);
       $worksheet->write($rows, 2,  $inst);
       $worksheet->write($rows, 3,  $size[0]);
       $worksheet->write($rows, 4,  $size[1]);
       $worksheet->write($rows, 5,  '0');
       $worksheet->write($rows, 6,  '0');
       $worksheet->write($rows, 7,  '0');
       $worksheet->write($rows, 8,  '0');
       $worksheet->write($rows, 9,  '0');
       $worksheet->write($rows, 10,  '0');
       $worksheet->write($rows, 11,  '0');
       $rows++;
     }
     &call_write_data_xls($moduleName,$worksheet,$rows);
  }
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "write_data_xls took: ",timestr($td),"\n";
}#sub write_data_xls_old

sub call_write_data_xls{
 my $moduleName = $_[0];
 my $worksheet = $_[1];
 my $rows = $_[2];
 my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
 foreach my $inst (sort @hierInsts){
    my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($inst);
    #print "mohi234=>>$moduleName=>>$cellref=>$rows\n";
    if(exists $MODULE_ALREADY{$cellref}){
       &report_verilog_area("-module",$cellref);
       my $calc_width = "";
       my $calc_height = "";
       my $leafarea = $MODULE_ALREADY{$cellref}->dbVNOMGetLeafArea;
       my $hierarea = $MODULE_ALREADY{$cellref}->dbVNOMGetHierArea;
       my $totalArea = $leafarea + $hierarea;
       $calc_width = sqrt($totalArea);
       $calc_width = sprintf("%.2f", $calc_width);
       $calc_height = $calc_width;
       print "Width $calc_width\n";
       $worksheet->write($rows, 0,  $cellref);
       $worksheet->write($rows, 1,  $moduleName);
       $worksheet->write($rows, 2,  $inst);
       $worksheet->write($rows, 3,  $calc_width);
       $worksheet->write($rows, 4,  $calc_height);
       $worksheet->write($rows, 5,  '0');
       $worksheet->write($rows, 6,  '0');
       $worksheet->write($rows, 7,  '0');
       $worksheet->write($rows, 8,  '0');
       $worksheet->write($rows, 9,  '0');
       $worksheet->write($rows, 10,  '0');
       $worksheet->write($rows, 11,  '0');
       $rows++;
       &call_write_data_xls($cellref, $worksheet,$rows);
    }else{
    }
 }
}#sub call_write_data_xls
#########################################################################################
sub write_data_xls {
use Benchmark;
my $t0 = new Benchmark;

my $noOfArguments = @_;
use Spreadsheet::WriteExcel;

  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : -output <fileName>\n";
                                         }
  else{
    my $out_file;
    my $start_module = $TOP_MODULE;
    my $no_of_level = -1;
    my @temp_module_list = ();
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-output"){$out_file = $_[$i+1];}
    }#
    my $workbook = Spreadsheet::WriteExcel->new($out_file);
    my $worksheet = $workbook->add_worksheet();
    %TEMP_MODULE_ALREADY = ();
    &populate_list_of_modules_in_hierachy_stop_at_given_level_from_start_module($start_module,$no_of_level);
    @temp_module_list = sort { $TEMP_MODULE_ALREADY{$a} <=> $TEMP_MODULE_ALREADY{$b} } keys %TEMP_MODULE_ALREADY;
    $worksheet->write(0, 0,  'module');
    $worksheet->write(0, 1,  'parent');
    $worksheet->write(0, 2,  'instance');
    $worksheet->write(0, 3,  'width');
    $worksheet->write(0, 4,  'height');
    $worksheet->write(0, 5,  'locX');
    $worksheet->write(0, 6,  'locY');
    $worksheet->write(0, 7,  'states');
    $worksheet->write(0, 8,  'orient');
    $worksheet->write(0, 9,  'ffs');
    $worksheet->write(0, 10,  'io');
    $worksheet->write(0, 11,  'tc');
    my $rows = 1;
    foreach my $moduleName (@temp_module_list){
      my @leafInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetLeafInst;
      my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
      if($moduleName eq $TOP_MODULE){
        my $calc_width = 0;
        my $calc_width = 0;
        if ( exists $FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"} ) {
          my $flplanID = $FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"};
          if ( exists $FLOORPLAN_ALREADY{$flplanID} ) {
            my @dieArea = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetSize;
            my $fpUnit = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetDBUnit;
            my $llx = $dieArea[0]/$fpUnit;
            my $lly = $dieArea[1]/$fpUnit;
            my $urx = $dieArea[2]/$fpUnit;
            my $ury = $dieArea[3]/$fpUnit;
            $calc_width = $urx - $llx;
            $calc_height = $ury - $lly;
          }
        }
        $worksheet->write(1, 0,  $moduleName);
        $worksheet->write(1, 1,  'self');
        $worksheet->write(1, 2,  'self');
        $worksheet->write(1, 3,  $calc_width);
        $worksheet->write(1, 4,  $calc_height);
        $worksheet->write(1, 5,  '');
        $worksheet->write(1, 6,  '');
        $worksheet->write(1, 7,  '');
        $worksheet->write(1, 8,  '');
        $worksheet->write(1, 9,  '');
        $worksheet->write(1, 10,  '');
        $worksheet->write(1, 11,  '');
        $rows++;
      }#if
      foreach my $leaf_inst (@leafInsts){
        my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetLeafInstCell($leaf_inst);
        my @size = ();
        if(exists $PLDB{$cellref}){
          @size = $PLDB{$cellref}->dbMdbGetSize;
        }else {
          print "ERR : 001 : $cellref not exists in PLDB\n";
        }
        $worksheet->write($rows, 0,  $cellref);
        $worksheet->write($rows, 1,  $moduleName);
        $worksheet->write($rows, 2,  $leaf_inst);
        $worksheet->write($rows, 3,  $size[0]);
        $worksheet->write($rows, 4,  $size[1]);
        $worksheet->write($rows, 5,  '0');
        $worksheet->write($rows, 6,  '0');
        $worksheet->write($rows, 7,  '0');
        $worksheet->write($rows, 8,  '0');
        $worksheet->write($rows, 9,  '0');
        $worksheet->write($rows, 10,  '0');
        $worksheet->write($rows, 11,  '0');
        $rows++;
      }#foreach my $leaf
      foreach my $hier_inst (@hierInsts){
        my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($hier_inst);
        if(exists $MODULE_ALREADY{$cellref}){
          if(exists $FLOORPLAN_LOOKUP{$cellref."/_self_"}){
            my $flplanID  = $FLOORPLAN_LOOKUP{$cellref."/_self_"};
            my $dbu = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetDBUnit;
            my @size = $FLOORPLAN_ALREADY{$flplanID}->dbFlplanGetSize;
            my $width = ($size[2] - $size[0]) / $dbu;
            my $height = ($size[3] - $size[1]) / $dbu;
            $worksheet->write($rows, 0,  $cellref);
            $worksheet->write($rows, 1,  $moduleName);
            $worksheet->write($rows, 2,  $hier_inst);
            $worksheet->write($rows, 3,  $width);
            $worksheet->write($rows, 4,  $height);
            $worksheet->write($rows, 5,  '0');
            $worksheet->write($rows, 6,  '0');
            $worksheet->write($rows, 7,  '0');
            $worksheet->write($rows, 8,  '0');
            $worksheet->write($rows, 9,  '0');
            $worksheet->write($rows, 10,  '0');
            $worksheet->write($rows, 11,  '0');
            $rows++;
          }else {
            my $calc_width = "";
            my $calc_height = "";
            &report_verilog_area("-module",$cellref);
            my $leafarea = $MODULE_ALREADY{$cellref}->dbVNOMGetLeafArea;
            my $hierarea = $MODULE_ALREADY{$cellref}->dbVNOMGetHierArea;
            my $totalArea = $leafarea + $hierarea;
            $calc_width = sqrt($totalArea);
            $calc_width = sprintf("%.2f", $calc_width);
            $calc_height = $calc_width;
            $worksheet->write($rows, 0,  $cellref);
            $worksheet->write($rows, 1,  $moduleName);
            $worksheet->write($rows, 2,  $hier_inst);
            $worksheet->write($rows, 3,  $calc_width);
            $worksheet->write($rows, 4,  $calc_height);
            $worksheet->write($rows, 5,  '0');
            $worksheet->write($rows, 6,  '0');
            $worksheet->write($rows, 7,  '0');
            $worksheet->write($rows, 8,  '0');
            $worksheet->write($rows, 9,  '0');
            $worksheet->write($rows, 10,  '0');
            $worksheet->write($rows, 11,  '0');
            $rows++;
          }
        }
      }#foreach hier 
    }#foreach module
  }#else
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "write_data_xls took: ",timestr($td),"\n";
}#sub write_data_xls
#--------------------------------------------------------------------------------------------------------------------------#
sub write_edp_dia_for_spice {
    my $noOfArguments = @_;
    if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : write_edp_dia_for_spice\n";
                                            print "      : -output <fileName>\n";
                                            print "      : -W <width>\n";
                                            print "      : -H <height>\n";
                                           }
    else{
      my $out_file;
      my $chip_width;
      my $chip_height;
      my $out_str = "";
      my $sub_out_str = "";
      my $glue_str = "";
      my %INST_CONN_POINTS = ();
      my %SPICE_INST_LOC = ();
      my %INST_VS_CNT_HASH = ();
      for(my $i=0; $i < $noOfArguments;$i++){
        if($_[$i] eq "-output"){$out_file = $_[$i+1];}
        if($_[$i] eq "-W"){$chip_width = $_[$i+1];}
        if($_[$i] eq "-H"){$chip_height = $_[$i+1];}
      }#for
    open(WRITE,">$out_file");
    if(exists $PSEUDO_MODULE_ALREADY{$TOP_MODULE} ) {
       #---------------------------------------------------------------------#
       my $multiFactor = "";
       my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       my $temp_chip_width = $size[2]-$size[0];
       my $temp_chip_height = $size[3]-$size[1];

       my $multiFactorX = $chip_width/$temp_chip_width;
       my $multiFactorY = $chip_height/$temp_chip_height;

       if($multiFactorX > $multiFactorY){
          $multiFactor = $multiFactorX;
       }else{
          $multiFactor = $multiFactorY;
       }
       my $chip_width =  $temp_chip_width*$multiFactor;
       my $chip_height =  $temp_chip_height*$multiFactor;
       $out_str = $out_str."{\"c\":{\"width\":$chip_width,\"height\":$chip_height,\"multiFactor\":$multiFactor,\"id\":\"canvasProps\",\"oType\":\"CanvasProps\"},"; #canvas block start 
       if((keys %{$PSEUDO_MODULE_ALREADY{$TOP_MODULE}}) > 0){
         $out_str = $out_str."\"s\":{\"figures\":["; #figure block start
       }
       my $cnt = 0;
       my @idToIndex = ();
       my $connPointIdCnt = 0;
       my @instance_list = ();
       foreach my $instance (keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}){
         push (@instance_list,$instance);
       }
       my $number_of_instance = @instance_list;
       my($vdd_inst,$vss_inst) = &get_vdd_and_vss_from_connLine;
       push(@instance_list,$vdd_inst,$vss_inst);
       my $trans_size = &calc_area_of_spice_and_trans_area($TOP_MODULE,"10");
       my $trans_width = $trans_size*$multiFactor;
       my $trans_height = $trans_size*$multiFactor;
       foreach my $instance ( @instance_list ) {
         $instance =~ s/^\d+_tmpslvr_//;
         if($instance =~ /vdd/i){
           #-----------------------------------ADD CODE FOR VSS/VDD----------------------------#
           my @location = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
           $out_str = $out_str."{\"id\":$cnt,\"name\":\"vdd\",";
           $out_str = $out_str."\"primitives\":["; #primitives block start
           $out_str = $out_str."{\"points\":["; #points block start
           my $midX = sprintf ("%.2f",($location[0] + $location[4])/2);
           my $midY = sprintf ("%.2f",($location[1] + $location[5])/2);
           my $vectorURY = $midY - 6; ###### midy -fontSize/2
           my $new_vectorURY = "";
           if($vectorURY < $location[1]){
              $new_vectorURY = $vectorURY+6;
           }else {
              $new_vectorURY = $vectorURY;
           }
           #print "midX = $midX vectorURY = $vectorURY location = $location[1]\n"; 
           for(my $i=0; $i<=7; $i=$i+2){
             my $xxx = $location[$i];
             my $yyy = $location[$i+1];
             $out_str = $out_str."{\"x\":$xxx,\"y\":$yyy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
           }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end
           
           $out_str = $out_str. "{\"str\":\"vdd\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
           $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$new_vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
           $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
           $out_str = $out_str."\"bounds\":{";
           $out_str = $out_str."\"points\":["; #bounds block start
           for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
             $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
           }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
           
           $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end
           
           $out_str = $out_str."],"; #primitives block end 
           $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
           $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#6A5ACD\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
           $out_str = $out_str."\"oType\":\"Figure\"},";
            ########################## Making connectionPoints string for connectors vdd ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            my @temp = ();

            my $conn_point_left_x = $midX ;
            my $conn_point_left_y = $location[1];
            my $conn_point_bottom_x = $midX + $midX/2 ;
            my $conn_point_bottom_y = $location[1];
            my $conn_point_top_x =$midX -$midX/2 ;
            my $conn_point_top_y =$location[1] ;
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);         
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            push(@temp, $connPointIdCnt);       
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ##############################################################################################################
         }elsif ($instance =~ /vss|gnd/i){
           my @location = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
           $out_str = $out_str."{\"id\":$cnt,\"name\":\"vss\",";
           $out_str = $out_str."\"primitives\":["; #primitives block start
           $out_str = $out_str."{\"points\":["; #points block start
           my $midX =  sprintf ("%.2f",($location[0] + $location[4])/2);
           my $midY =  sprintf ("%.2f",($location[1] + $location[5])/2);
           my $vectorURY = $midY - 6; ###### midy -fontSize/2
           my $new_vectorURY = "";
           if($vectorURY < $location[1]){
              $new_vectorURY = $vectorURY+6;
           }else {
              $new_vectorURY = $vectorURY;
           }
           for(my $i=0; $i<=7; $i=$i+2){
             my $xxx = $location[$i];
             my $yyy = $location[$i+1];
             $out_str = $out_str."{\"x\":$xxx,\"y\":$yyy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
           }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end
           
           $out_str = $out_str. "{\"str\":\"vss\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
           $out_str = $out_str."\"vector\":[{\"x\":$midX,\"y\":$new_vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
           $out_str = $out_str."\"style\":{\"fillStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
           $out_str = $out_str."\"bounds\":{";
           $out_str = $out_str."\"points\":["; #bounds block start
           for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
             $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
           }
           $out_str =~ s/\,$//; #removing extra comma in last point
           $out_str = $out_str."],";
           $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
           
           $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end
           
           $out_str = $out_str."],"; #primitives block end 
           $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"$instance Name\",\"property\":\"primitives.1.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
           $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"fillStyle\":\"#6A5ACD\",\"lineWidth\":0.5,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
           $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$location[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
           $out_str = $out_str."\"oType\":\"Figure\"},";
            ################################# Making connectionPoints string for connectors vss ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            my @temp = ();

            my $conn_point_left_x = $midX ;
            my $conn_point_left_y = $midY*2;
            my $conn_point_bottom_x = $midX + $midX/2;
            my $conn_point_bottom_y = $midY*2;
            my $conn_point_top_x =$midX -$midX/2 ;
            my $conn_point_top_y =$midY*2 ;
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);         
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            push(@temp, $connPointIdCnt);       
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ##############################################################################################################
         }else{ 
            my @loc = ();
            my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
            my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;
            @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
            foreach (@loc){ 
              $_ = sprintf("%.2f", ( $_*$multiFactor));
            }
            if(@loc == 4){
               @loc = ($loc[0], $loc[1], $loc[2], $loc[1], $loc[2], $loc[3], $loc[0], $loc[3]);
            }
            my $value = "\$X"."=".$loc[0]." "."\$Y"."=".$loc[1]; 
            $SPICE_INST_LOC{$instance} = $value;
            #my ($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4)= &calc_size_from_given_loc($instance,$value,$trans_width,$trans_height); 
            #print "INSTANCE: $instance  CELL: $cellref LOC: @loc  STATUS:$status\n";
            #my @loc = (20, 20, 100, 20, 100, 100, 20, 100);
            #my @loc = ($x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4);
            ###################################################calculate co-ords###########################################
             my $width = ($loc[2] - $loc[0]);
             my $height = ($loc[5] - $loc[1]); 

             my @line_1_start_point = ($loc[0],$loc[1]+$height/2);
             my @line_2_start_point = ($loc[0]+$width/4,$loc[7]-$height/4);
             my @line_3_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             my @line_4_start_point = ($loc[0]+3*$width/8,$loc[7]-$height/4);
             my @line_5_start_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             my @line_6_start_point = ($loc[2],$loc[7]-$height/4);
             my @line_7_start_point = ($loc[2],$loc[1]+$height/4);

             my @line_1_end_point = ($loc[0]+$width/4,$loc[1]+$height/2);
             my @line_2_end_point = ($loc[0]+$width/4,$loc[1]+$height/4);
             my @line_3_end_point = ($loc[0]+3*$width/8,$loc[1]+$height/4);
             my @line_4_end_point = ($loc[2],$loc[7]-$height/4);
             my @line_5_end_point = ($loc[2],$loc[1]+$height/4);
             my @line_6_end_point = ($loc[4],$loc[5]);
             my @line_7_end_point = ($loc[4],$loc[3]);

             my @start_loc = (@line_1_start_point,@line_2_start_point,@line_3_start_point,@line_4_start_point,@line_5_start_point,@line_6_start_point,@line_7_start_point);
             my @end_loc = (@line_1_end_point,@line_2_end_point,@line_3_end_point,@line_4_end_point,@line_5_end_point,@line_6_end_point,@line_7_end_point);

             #################################################################################################################
           # $out_str = $out_str."{\"id\":$cnt,\"name\":\"Rectangle\",";
             my $figure_name = "";
             if($cellref =~ /n/i){
               $figure_name = "nmos";
             }elsif($cellref =~ /p/i){
                $figure_name = "pmos"; 
             }
             $INST_VS_CNT_HASH{$instance} = $cnt;
             $out_str = $out_str."{\"id\":$cnt,\"name\":\"$figure_name\","; # mohit
             $out_str = $out_str."\"primitives\":["; #primitives block start 
             $out_str = $out_str."{\"points\":["; #points block start
             for(my $i=0;$i<=$#loc;$i=$i+2){
               my $loc_x = $loc[$i];
               my $loc_y = $loc[$i+1];
               $out_str = $out_str."{\"x\":$loc_x,\"y\":$loc_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
             }#for

             $out_str =~ s/\,$//; #removing extra comma in last point
             $out_str = $out_str."],";
             $out_str = $out_str."\"style\":{\"strokeStyle\":\"#000000\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
             $out_str = $out_str."\"oType\":\"Polygon\"},"; #points block end

             my $midX = ($loc[0] + $loc[4])/2;
             my $midY = ($loc[1] + $loc[5])/2;
             my $vectorURX = $loc[0]+$width/2;
             my $vectorURY = $loc[5];
             #my $vectorURY = $midX - 6; ###### midy -fontSize/2
             for(my $i=0; $i<=$#start_loc; $i=$i+2){
                my $start_xx = $start_loc[$i];
                my $start_yy = $start_loc[$i+1];
                my $end_xx = $end_loc[$i];
                my $end_yy = $end_loc[$i+1];
                $out_str = $out_str."{\"startPoint\":"; #points block start
                $out_str = $out_str."{\"x\":$start_xx,\"y\":$start_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
             
                $out_str = $out_str."\"endPoint\":"; 
                $out_str = $out_str."{\"x\":$end_xx,\"y\":$end_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            

                $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
                $out_str = $out_str."\"oType\":\"Line\"},";
             }#for
             my $primitives;
           #################################################added code for pmos#######################
           if($cellref =~ /n/i){
             $primitives = 7;
           }elsif($cellref =~ /p/i){
             $primitives = 8;
             my $angle_x = ($loc[0]+$width/4)+10;
             my $angle_y = ($loc[1]+$height/2)+10;
             #############################################caluclate arc angle########################
             my $radius = 3;
             my $x = ($loc[0]+$width/4)-$radius; 
             my $y = $loc[1]+$height/2; 
             my $arcLength = (45 * 3.14/180);
             my $controlRadius = $radius / cos($arcLength * 0.5);
             my $number_of_control_point = 7;
             my @arc_start_loc = ();
             my @arc_end_loc = ();
             my @arc_control_loc = ();
             for ($i=0; $i <=$number_of_control_point; $i++) {
               my $startPoint_x = ($x + $radius * cos($arcLength * $i)); 
               my $startPoint_y = ($y + $radius * sin($arcLength * $i)); 
               my $controlPoint_x = ($x + $controlRadius * cos($arcLength * ($i + 1) - $arcLength * 0.5));
               my $controlPoint_y = ($y + $controlRadius * sin($arcLength * ($i + 1) - $arcLength * 0.5));
               my $endPoint_x = ($x + $radius * cos($arcLength * ($i + 1)));
               my $endPoint_y = ($y + $radius * sin($arcLength * ($i + 1)));
               push (@arc_start_loc,$startPoint_x, $startPoint_y);
               push (@arc_end_loc,$endPoint_x,$endPoint_y);
               push (@arc_control_loc,$controlPoint_x, $controlPoint_y);
             }#for
             ##########################################################################################################################################
             $out_str = $out_str."{\"endAngle\":360,\"startAngle\":0,\"middle\":{\"x\":$angle_x,\"y\":$angle_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"radius\":3,\"curves\":[";
             for(my $i=0; $i<=$#arc_start_loc; $i=$i+2){
                my $arc_start_xx = $arc_start_loc[$i];
                my $arc_start_yy = $arc_start_loc[$i+1];
                my $arc_end_xx = $arc_end_loc[$i];
                my $arc_end_yy = $arc_end_loc[$i+1];
                my $arc_control_xx = $arc_control_loc[$i];
                my $arc_control_yy = $arc_control_loc[$i+1];
                $out_str = $out_str."{\"startPoint\":{\"x\":$arc_start_xx,\"y\":$arc_start_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"controlPoint\":{\"x\":$arc_control_xx,\"y\":$arc_control_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"endPoint\":{\"x\":$arc_end_xx,\"y\":$arc_end_yy,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"QuadCurve\"},";
              }#for
             my $value_of_add_radius_x = $x+$radius;
             my $value_of_add_radius_y = $y;
             $out_str = $out_str."],\"startPoint\":{\"x\":$value_of_add_radius_x,\"y\":$value_of_add_radius_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"endPoint\":{\"x\":$value_of_add_radius_x,\"y\":$value_of_add_radius_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"startAngleRadians\":0,\"endAngleRadians\":6.283185307179586,\"styleFlag\":0,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"direction\":false,\"oType\":\"Arc\"},";
           }
           #####################################################end code for pmos#######################################################################
            $out_str = $out_str. "{\"str\":\"$instance\",\"font\":\"Arial\",\"size\":12,\"lineSpacing\":3,\"align\":\"center\",\"valign\":\"middle\","; #string block start
            $out_str = $out_str."\"vector\":[{\"x\":$vectorURX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$vectorURX,\"y\":$vectorURY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #vector block
            $out_str = $out_str."\"style\":{\"fillStyle\":\"#ffffff\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
            $out_str = $out_str."\"bounds\":{";
            $out_str = $out_str."\"points\":["; #bounds block start
            for(my $j=0; $j<=3; $j++){ #currently we are putting text bbox coordinates value = null
                $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
            }#for
            $out_str =~ s/\,$//; #removing extra comma in last point
            $out_str = $out_str."],";
            $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end

            $out_str = $out_str."\"debug\":false,\"oType\":\"Text\"}"; #string block end

            $out_str = $out_str."],"; #primitives block end 
            #$out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.$primitives.str\",\"type\":\"Text\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"groupId\":-1,\"properties\":[{\"name\":\"Text\",\"property\":\"primitives.$primitives.str\",\"type\":\"Text\"},{\"name\":\"LocX\",\"property\":\"\",\"type\":\"LocX\"},{\"name\":\"LocY\",\"property\":\"\",\"type\":\"LocY\"},{\"name\":\"\",\"property\":\"\",\"type\":\"modelPmosProperty\"},{\"name\":\"\",\"property\":\"\",\"type\":\"modelNmosProperty\"}],"; ##WARN: Currently we are using properties name : "$instance Name" (We should use 'Hard Macro Name'/'Soft Macro Name' according to their color 
            $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"fillStyle\":\"#000000\",\"lineWidth\":1,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},";
            $out_str = $out_str."\"rotationCoords\":[{\"x\":$midX,\"y\":$midY,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$midX,\"y\":$loc[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],";
            $out_str = $out_str."\"oType\":\"Figure\"},";
          
            ################################# Making connectionPoints string for connectors ########################################
            my $inst_width = $loc[4] - $loc[0];
            my $inst_height = $loc[5] - $loc[1];
            my $dx = $inst_width/6;
            my $dy = $inst_height/6;
            #my $dx=10; my $dy=10;
            my @temp = ();
            my $conn_point_left_x = $loc[0];
            my $conn_point_left_y = $loc[1]+$height/2;
            my $conn_point_bottom_x = $loc[4];
            my $conn_point_bottom_y = $loc[3];
            my $conn_point_top_x = $loc[4];
            my $conn_point_top_y = $loc[5];
            ##--------connections points ----------##
            my $connXX = $midX-$dx; 
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_left_x,\"y\":$conn_point_left_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);            
            $connPointIdCnt++;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_bottom_x,\"y\":$conn_point_bottom_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt); #push middle connection point id at bottom
            $connPointIdCnt++;
            $connXX = $midX+$dx;
            $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$conn_point_top_x,\"y\":$conn_point_top_y,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"figure\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
            push(@temp, $connPointIdCnt);            
            $connPointIdCnt++;
            @{$INST_CONN_POINTS{$instance}} = @temp;
            ########################################################################################################################
         }#if instance is not PIN
         push (@idToIndex, $cnt);
         $cnt++; 
       }#for each instance
       $out_str =~ s/\,$//; #removing extra comma in last point
       if((keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}}) > 0){
          my $num_net = keys %{$PSEUDO_VNET_ALREADY{$TOP_MODULE}};
          my $currentId = $cnt + $num_net;
          my $currentIdCount = $cnt -2;
          $out_str = $out_str."],\"groups\":[],\"currentId\":$currentId,\"currentIdCount\":$currentIdCount,\"idToIndex\":[$idToIndex],\"oType\":\"Stack\"},"; #figure block end
       }
       ############################################# Net display ###########################################################
       $out_str = $out_str."\"m\":{"; #connectivity block start
       $out_str = $out_str."\"connectors\":["; #connector block start
       my ($NET_HASH_DATA,$NET_PARAM_HASH_DATA) = &get_net_hash($TOP_MODULE); 
       my %NET_HASH = %$NET_HASH_DATA;
       my %NET_PARAM_HASH = %$NET_PARAM_HASH_DATA;
       #--------------------------------------------param-------------------------------------------------------------------#
       my @model_pmos_list = ();
       my @model_nmos_list = ();
       my $model_pmos_Param = "";
       my $model_nmos_Param = "";
       foreach my $inst (keys %NET_PARAM_HASH){
         my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$inst}->dbPimDBGetInstCellref;
         if($cellref =~ /p/i){
           if(exists $INST_VS_CNT_HASH{$inst}){
             my $inst_cnt = $INST_VS_CNT_HASH{$inst};
             my @data = @{$NET_PARAM_HASH{$inst}};
             my $model_pmos = "";
             for(my $i=0;$i<$#data;$i=$i+2){
               my $param_pin = $data[$i];
               $param_pin =~ s/^\d+_tmpslvr_param_//;
               my $param_net = $data[$i+1];
               if($i == 0){
                 $model_pmos = $model_pmos."#$inst_cnt=$param_pin,$param_net";
               }else {
                 $model_pmos = $model_pmos.",$param_pin,$param_net";
               }
             }
             push (@model_pmos_list,$model_pmos);
           } 
         }elsif($cellref =~ /n/i){
           if(exists $INST_VS_CNT_HASH{$inst}){
             my $inst_cnt = $INST_VS_CNT_HASH{$inst};
             my @data = @{$NET_PARAM_HASH{$inst}};
             my $model_nmos = "";
             for(my $i=0;$i<$#data;$i=$i+2){
               my $param_pin = $data[$i];
               $param_pin =~ s/^\d+_tmpslvr_param_//;
               my $param_net = $data[$i+1];
               if($i == 0){
                 $model_nmos = $model_nmos."#$inst_cnt=$param_pin,$param_net";
               }else {
                 $model_nmos = $model_nmos.",$param_pin,$param_net";
               }
             }
             push (@model_nmos_list,$model_nmos);
           } 
         }
       }
       my $pmos_first = shift (@model_pmos_list);
       $model_pmos_Param = $model_pmos_Param."".$pmos_first;
       foreach my $model_param (@model_pmos_list){
         $model_param =~ s/#/&/;
         $model_pmos_Param = $model_pmos_Param."".$model_param;
       }
       my $nmos_first = shift (@model_nmos_list);
       $model_nmos_Param = $model_nmos_Param."".$nmos_first;
       foreach my $model_param (@model_nmos_list){
         $model_param =~ s/#/&/;
         $model_nmos_Param = $model_nmos_Param."".$model_param;
       }
#       print "pmos $model_pmos_Param\n";
#       print "nmos $model_nmos_Param\n";
       #--------------------------------------------------------------------------------------------------------------------#
       my $type = "wire";
       my $wireWidth = 1;
       #$wireWidth = $wireWidth*0.2; ### we have assumed width "1 = 0.2" in diagramo
       foreach my $net (keys %NET_HASH) {
         my ($source_list_ref,$sink_list_ref) = &get_source_and_sink_list($TOP_MODULE,$net);
         $net =~ s/^\d+_tmpslvr_//;
         $net =~ s/_net//;
         my @source = @$source_list_ref;
         my @sink = @$sink_list_ref;
         my $source_inst = shift(@source);  
         my $source_pin = shift(@source);  
         my $src_value;
         if(exists $SPICE_INST_LOC{$source_inst}){
           $src_value = $SPICE_INST_LOC{$source_inst};
         }
         my ($src_x1,$src_y1,$src_x2,$src_y2,$src_x3,$src_y3,$src_x4,$src_y4) = &calc_size_from_given_loc($source_inst,$src_value,$trans_width,$trans_height);
         my @src_inst_coords = (sprintf("%.2f",($src_x1)),sprintf("%.2f",($src_y1)),sprintf("%.2f",($src_x3)),sprintf("%.2f",($src_y3)));
         for(my $i=0;$i<=$#sink;$i=$i+2){
           my $sink_inst = $sink[$i];
           my $sink_pin = $sink[$i+1];
           my $sink_value;
           my @coords = ();
           if(exists $SPICE_INST_LOC{$sink_inst}){
              $sink_value = $SPICE_INST_LOC{$sink_inst};
           }
           if($source_pin eq "gate"){
             @coords = &get_net_coords_for_gate($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);
           }elsif($source_pin eq "drain"){
             if($net =~ /vdd/i){
               @coords = &get_net_coords_for_vdd($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
             }elsif($net =~ /(vss|gnd)/i){
               @coords = &get_net_coords_for_vss($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
             }else{ 
               @coords = &get_net_coords_for_drain($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);
             }
           }elsif($source_pin eq "source"){
             if($net =~ /vdd/i){
               @coords = &get_net_coords_for_vdd($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
             }elsif($net =~ /(vss|gnd)/i){
               @coords = &get_net_coords_for_vss($source_inst,$src_value,$sink_inst,$sink_value,$sink_pin,$trans_width,$trans_height,$chip_width,$chip_height,$source_pin);
             }else{ 
               @coords = &get_net_coords_for_source($source_inst,$src_value,$sink_inst,$sink_value,$trans_width,$trans_height,$sink_pin);
             }
           }
           if($#coords >= 3){
              my @sink_inst_coords = ();
              if($sink_inst =~ /vdd/i){
                 $sink_inst =~ s/\d+_tmpslvr_//;
                my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_vdd_loc($chip_width,$chip_height,$trans_height);
                @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
              }elsif($sink_inst =~ /vss/i){
                $sink_inst =~ s/\d+_tmpslvr_//;
                my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_vss_loc($chip_width,$chip_height,$trans_height);
                @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
              }else {
                my ($sink_x1,$sink_y1,$sink_x2,$sink_y2,$sink_x3,$sink_y3,$sink_x4,$sink_y4) = &calc_size_from_given_loc($sink_inst,$sink_value,$trans_width,$trans_height);
                @sink_inst_coords = (sprintf("%.2f",($sink_x1)),sprintf("%.2f",($sink_y1)),sprintf("%.2f",($sink_x3)),sprintf("%.2f",($sink_y3)));
              }
              my ($text_llx, $text_lly, $text_urx, $text_ury) = ("null", "null", "null", "null");
              my ($stID, $endID);
              #print "\n";
              #print "$net\n";
              #print "  sink:$sink_inst => $sink_pin @sink_inst_coords src:$source_pin $source_inst $instance @src_inst_coords \n";
              #print "  net!:@coords\n";
              if((($coords[0] == $sink_inst_coords[0] || $coords[0] == $sink_inst_coords[2] || $coords[1] == $sink_inst_coords[1] || $coords[1] == $sink_inst_coords[3]) &&  ($coords[-2] == $src_inst_coords[0] || $coords[-2] == $src_inst_coords[2] || $coords[-1] == $src_inst_coords[1] || $coords[-1] == $src_inst_coords[3])) || (($coords[0] == $src_inst_coords[0] || $coords[0] == $src_inst_coords[2] || $coords[1] == $src_inst_coords[1] || $coords[1] == $src_inst_coords[3]) &&  ($coords[-2] == $sink_inst_coords[0] || $coords[-2] == $sink_inst_coords[2] || $coords[-1] == $sink_inst_coords[1] || $coords[-1] == $sink_inst_coords[3]))){ 
                 #WARN: Currently, we are using vector: x=null & y=null . We should calculate coordinates ($text_llx, $text_lly, $text_urx, $text_ury) later
                 if($coords[0] == $sink_inst_coords[0]){ 
                    $stID = $INST_CONN_POINTS{$sink_inst}->[0]; #point at mid left
                 }if($coords[0] == $sink_inst_coords[2]){ 
                    $stID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid right
                 }if($coords[1] == $sink_inst_coords[1]){ 
                    $stID = $INST_CONN_POINTS{$sink_inst}->[1]; #point at mid bottom
                 }if($coords[1] == $sink_inst_coords[3]){ 
                    $stID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid top
                 }if($coords[0] == $src_inst_coords[0]){ 
                    $stID = $INST_CONN_POINTS{$source_inst}->[0]; #point at mid left
                 }if($coords[0] == $src_inst_coords[2]){ 
                    $stID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid right
                 }if($coords[1] == $src_inst_coords[1]){ 
                    $stID = $INST_CONN_POINTS{$source_inst}->[1]; #point at mid bottom
                 }if($coords[1] == $src_inst_coords[3]){ 
                    $stID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid top
                 }

                 if($coords[-2] == $src_inst_coords[0]){ 
                    $endID = $INST_CONN_POINTS{$source_inst}->[0]; #point at mid left
                 }if($coords[-2] == $src_inst_coords[2]){ 
                    $endID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid right
                 }if($coords[-1] == $src_inst_coords[1]){ 
                    $endID = $INST_CONN_POINTS{$source_inst}->[1]; #point at mid bottom
                 }if($coords[-1] == $src_inst_coords[3]){ 
                    $endID = $INST_CONN_POINTS{$source_inst}->[2]; #point at mid top
                 }if($coords[-2] == $sink_inst_coords[0]){ 
                    $endID = $INST_CONN_POINTS{$sink_inst}->[0]; #point at mid left
                 }if($coords[-2] == $sink_inst_coords[2]){ 
                    $endID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid right
                 }if($coords[-1] == $sink_inst_coords[1]){ 
                    $endID = $INST_CONN_POINTS{$sink_inst}->[1]; #point at mid bottom
                 }if($coords[-1] == $sink_inst_coords[3]){ 
                    $endID = $INST_CONN_POINTS{$sink_inst}->[2]; #point at mid top
                 }
              }  
              $out_str = $out_str."{";
              $out_str = $out_str."\"id\":$cnt,";
              $out_str = $out_str."\"turningPoints\":["; #turningPoints block start
              for(my $i=0; $i<=$#coords; $i=$i+2){
                $out_str = $out_str."{\"x\":$coords[$i],\"y\":$coords[$i+1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
              }
              $out_str =~ s/\,$//; #removing extra comma at last 
              $out_str = $out_str."],"; #turningPoints block end
              $out_str = $out_str."\"type\":\"jagged\","; #wire type block
              $out_str = $out_str."\"style\":{\"strokeStyle\":\"#6A5ACD\",\"lineWidth\":$wireWidth,\"length\":204,\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #style block
              $out_str = $out_str."\"middleText\":{";
                         $out_str = $out_str."\"str\":\"$net\",\"font\":\"Arial\",\"size\":10,\"lineSpacing\":2.5,\"align\":\"center\",\"valign\":\"middle\","; #middle text sring block
                         $out_str = $out_str."\"vector\":[{\"x\":$text_llx,\"y\":$text_lly,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},{\"x\":$text_urx,\"y\":$text_ury,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"}],"; #middle text vector block
                         $out_str = $out_str."\"style\":{\"strokeStyle\":\"#ffffff\",\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #middle text style block
                         $out_str = $out_str."\"bounds\":{"; #middle text bounds block start
                                    $out_str = $out_str."\"points\":["; #bounds points block start
                                    for(my $j=0; $j<=3; $j++){ #currently we are putting bounds coordinates value = null
                                        $out_str = $out_str."{\"x\":null,\"y\":null,\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},";
                                    }
                                    $out_str =~ s/\,$//; #removing extra comma in last point
                                    $out_str = $out_str."],"; #bounds point block end 
                                    $out_str = $out_str."\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},"; #bounds style block 
                         $out_str = $out_str."\"oType\":\"Polygon\"},"; #bounds block end
              $out_str = $out_str."\"debug\":false,\"oType\":\"Text\",\"bgStyle\":\"#ffffff\"},"; #middleText block end
              if($wireWidth > 0.2){
                 $out_str = $out_str."\"properties\":[{\"name\":\"Bus\",\"property\":\"middleText.str\",\"type\":\"Text\"},{\"name\":\"Bus width\",\"property\":\"style.lineWidth\",\"type\":\"BusWidth\"},{\"name\":\"Length\",\"property\":\"style.length\",\"type\":\"Length\"}],"; #properties block
              }else{
                 $out_str = $out_str."\"properties\":[{\"name\":\"Wire\",\"property\":\"middleText.str\",\"type\":\"Text\"}],"; #properties block
              }
              $out_str = $out_str."\"startStyle\":\"Normal\",\"endStyle\":\"Normal\",\"activeConnectionPointId\":-1,\"visualDebug\":false,\"oType\":\"Connector\"},";#Connector  block end

              ########################## Making connectionPoints string ############################
              $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[0],\"y\":$coords[1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
              #if(($net =~ /vdd_net/) && ($sink_inst =~ /vdd/)){
              #  $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
              #}else {
                $glue_str =  $glue_str."{\"id1\":$stID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
              #}
              $connPointIdCnt++;
              $sub_out_str = $sub_out_str."{\"id\":$connPointIdCnt,\"point\":{\"x\":$coords[-2],\"y\":$coords[-1],\"style\":{\"lineCap\":\"butt\",\"lineJoin\":\"miter\",\"addColorStop\":[],\"linearGradient\":[],\"dashLength\":0,\"oType\":\"Style\",\"STYLE_LINE_JOIN_ROUND\":\"round\",\"STYLE_LINE_JOIN_BEVEL\":\"bevel\",\"STYLE_LINE_JOIN_MITER\":\"miter\",\"STYLE_LINE_CAP_BUTT\":\"butt\",\"STYLE_LINE_CAP_ROUND\":\"round\",\"STYLE_LINE_CAP_SQUARE\":\"square\"},\"oType\":\"Point\"},\"parentId\":$cnt,\"type\":\"connector\",\"color\":\"#FFFF33\",\"radius\":3,\"oType\":\"ConnectionPoint\"},";
              #if(($net =~ /vdd_net/) && ($sink_inst =~ /vdd/)){
              #  $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
              #}else {
               $glue_str =  $glue_str."{\"id1\":$endID,\"id2\":$connPointIdCnt,\"type1\":\"figure\",\"type2\":\"connector\",\"oType\":\"Glue\"},"; 
              #}
              #print "$net => $source_inst => $sink_inst => $stID,$endID\n";
              $connPointIdCnt++;
              ######################################################################################
             }
             $cnt++; 
           }#for each sink instance
        }#foreach net
        $out_str =~ s/\,$//; #removing extra comma in last point
        $out_str = $out_str."],\"groups\":[],"; #connector block end

        $out_str = $out_str."\"connectionPoints\":["; #connectionPoints block start
        $sub_out_str =~ s/\,$//; #removing extra comma in last point
        $out_str = $out_str.$sub_out_str;
        $out_str = $out_str."],"; #connectionPoints block end

        $out_str = $out_str."\"connectionPointCurrentId\":$connPointIdCnt,"; #connectionPointCurrentId block 
                  
        $out_str = $out_str."\"glues\":["; #glues block start
        $glue_str =~ s/\,$//; #removing extra comma in last point
        $out_str = $out_str.$glue_str."]"; #glues block end
        #$out_str = $out_str."]"; #glues block end  
        $out_str = $out_str."},"; #connectivity block end
        $out_str = $out_str." "."\"model_pmos\":"."\"$model_pmos_Param\""; #connectivity block end
        $out_str = $out_str.", "."\"model_nmos\":"."\"$model_nmos_Param\""; #connectivity block end

        $out_str =~ s/\,$//; #removing extra comma in last point
        $out_str = $out_str."}"; #canvas block end 
    }#if top module exists
    print WRITE "$out_str\n";
    close WRITE;
}#else
}#sub write_edp_dia_for_spice
#--------------------------------------------------------------------------------------------------------------------------#
sub write_edp_xschematic {         
  use Benchmark;
  my $t0 = new Benchmark;
  my $noOfArguments = @_;
  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : write_edp_xschematic\n"; 
                                          print "      : -output <fileName>\n";
                                          print "      : -W <width>\n";
                                          print "      : -H <height>\n";
                                         }
  else{
    my $out_file;
    my $edp_width;
    my $edp_height;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-output"){$out_file = $_[$i+1];}
      if($_[$i] eq "-W"){$edp_width = $_[$i+1];}
      if($_[$i] eq "-H"){$edp_height = $_[$i+1];}
    }#for
    my $loc_exists = &check_location_exists_in_spice;
    if($loc_exists == 1){
      &set_spice_loc_in_flplan("-utilization",10);
      &editModule("-module",$TOP_MODULE);
      &write_edp_dia_for_spice("-output",$out_file, "-W", $edp_width, "-H", $edp_height);
    }else {
      &calc_loc_of_without_run_placement("-W",$edp_width,"-H",$edp_height);
      &set_spice_loc_in_flplan("-utilization",10);
      &editModule("-module", $TOP_MODULE);
      &write_edp_dia_for_spice("-output",$out_file,"-W",$edp_width,"-H",$edp_height);
    }
  }#else 
  my $t1 = new Benchmark;
  my $td = timediff($t1,$t0);
  print "write_edp_xschematic: ",timestr($td),"\n"; 
}#sub write_edp_xschematic
#--------------------------------------------------------------------------------------------------------------------------#
sub calc_loc_of_without_run_placement {
  use Benchmark;
  my $t0 = new Benchmark;
  my $noOfArguments = @_ ;
  if($noOfArguments < 0 || $_[0] eq "-h"){  print "Usage : calc_loc_of_without_run_placement\n";
                                            print "      : -W <width>\n";
                                            print "      : -H <height>\n";
                                         } 
  else {
    my $chip_width;
    my $chip_height;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-W"){$chip_width = $_[$i+1];}
      if($_[$i] eq "-H"){$chip_height = $_[$i+1];}
    }#for
    my $moduleName = $TOP_MODULE;
    my $number_of_instance = &calc_number_of_trans($moduleName);
    my($trans_width,$trans_height) = &calc_height_and_width_of_trans($number_of_instance,$chip_width,$chip_height);
    my @conns = $MODULE_ALREADY{$moduleName}->dbVNOMGetConn;
    $MODULE_ALREADY{$moduleName}->dbVNOMWipeConn;
    my @hierInst = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
    my %INST_LOC_HASH = &calc_trans_loc_from_chip_width_and_height($chip_width,$chip_height,$trans_width,$number_of_instance,\@hierInst);
    for (my $i=0;$i<=$#conns;$i++){
      my $connLine = $conns[$i];
      $connLine =~ s/\(/\)\,/;
      $connLine =~ s/\s*\)\s*\)\s*\;?.*$/\)/;
      my ($cell,$inst) = ( split(/\s+/, $connLine ))[0,1];
      if ($MODULE_ALREADY{$moduleName}->dbVNOMHasHierInst($inst)){
        my $class = $MODULE_ALREADY{$cell}->dbVNOMGetClass;
        if($class == 11){
          if(exists $INST_LOC_HASH{$inst}){
            my $value = $INST_LOC_HASH{$inst};
            my ($llx ,$lly) = (split(/\s+/,$value))[0,1];
            $connLine =~ s/\)\,/\(/;
            my @temp_data = (split(/\s+/,$connLine));
            my $get_number = pop (@temp_data);
            $get_number =~ s/_tmpslvr_param.*//;
            $get_number =~ s/\.//;
            $get_number++;
            $X = "$get_number"."_tmpslvr_param_\$X".""."("."".$llx."".")";
            $get_number++;
            $Y = "$get_number"."_tmpslvr_param_\$Y".""."("."".$lly."".")";
            $connLine = $connLine.", "."".$X;
            $connLine = $connLine.", "."".$Y;
            $connLine = $connLine.")".";";
            $MODULE_ALREADY{$moduleName}->dbVNOMAddConn($connLine);
          }
        }
      }#if hier inst
    }#foreach
  }#else
  my $t1 = new Benchmark;
  my $td = timediff($t1,$t0);
  print "calc_loc_of_without_run_placement: ",timestr($td),"\n";
}#sub calc_loc_of_without_run_placement
#------------------------------------------------------------------------------------------#
sub calc_trans_loc_from_chip_width_and_height {
my $chip_width = $_[0];
my $chip_height = $_[1];
my $trans_size = $_[2];
my $number_of_trans = $_[3];
my @inst_list = @{$_[4]};
my %INST_LOC_HASH = ();
my $llx = 0;
my $lly = $trans_size/2;
my $urx = $chip_width;
my $ury = $chip_height -$trans_size/2;
my $num_of_rows = int(($ury - $lly)/$trans_size);
my $num_of_trans_in_one_row = int ($number_of_trans/$num_of_rows);
my $row_width = $chip_width;
my $remaing_trans = $number_of_trans - ($num_of_trans_in_one_row*$num_of_rows); 
for (my $j=1;$j<=$num_of_rows;$j++){
  my $num_of_trans_in_one_row_temp = $num_of_trans_in_one_row;
  if($j <= $remaing_trans){
    $num_of_trans_in_one_row_temp++;
  }
  my $total_spacing = $row_width - ($num_of_trans_in_one_row_temp*$trans_size);
  my $number_of_spacing  = $num_of_trans_in_one_row_temp+1;
  my $spacing = $total_spacing/$number_of_spacing;
  for(my $i =1; $i<=$num_of_trans_in_one_row_temp;$i++){
    my $inst = shift @inst_list;
    my $x_1 = ($llx+$spacing*$i+($i-1)*$trans_size);
    my $y_1 = ($lly+(($j-1)*$trans_size));
    $INST_LOC_HASH{$inst} = "$x_1 $y_1";
  }#for
}#for
return(%INST_LOC_HASH);
}#sub calc_trans_loc_from_chip_width_and_height
#-------------------------------------------------------------------------------------------#
sub write_hier_json {
use Benchmark;
my $t0 = new Benchmark;

 my $noOfArg = @_; 
 if($_[0] eq '-h' || $_[0] eq "-H" || $_[0] eq "-help" || $_[0] eq "-HELP") { 
    print "Usage : write_hier_json -module <module name>\n";
    return ;
 }else {
   my $moduleName =  $GLOBAL->dbfGlobalGetTOP();
   #$out_file = "$moduleName.json";
   $out_file = "hierViewer.json";
   open(WRITE_JSON,">$out_file");
   $json_out_str = $json_out_str."{\n";
   $json_out_str = $json_out_str." \"name\": \"$moduleName\",\n";
   $json_out_str = $json_out_str." \"children\": [\n" ;
   if(exists $MODULE_ALREADY{$moduleName}){
     my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
     foreach my $inst (sort @hierInsts){
       my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($inst);
       my $json_str_return = &write_edp_json($inst,$cellref);
       $json_out_str = $json_out_str.$json_str_return;
       &call_write_hier_json($cellref);
     }
   }
  
   $json_out_str =~ s/},$/}/; #removing extra comma in last point
   $json_out_str = $json_out_str."]\n";
   $json_out_str = $json_out_str."}\n";
   print WRITE_JSON "$json_out_str\n";
}
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "script write_hier_json took:",timestr($td),"\n";
}#write_hier_json
#-------------------------------------------------------------------------------------------#
sub call_write_hier_json {
 my $moduleName = $_[0];
 my @hierInsts = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInst;
 if($#hierInsts > 0){
   $json_out_str = $json_out_str."{\n";
   $json_out_str = $json_out_str." \"name\": \"$moduleName\",\n";
   $json_out_str = $json_out_str." \"children\": [\n" ;
   foreach my $inst (sort @hierInsts){
     my $cellref = $MODULE_ALREADY{$moduleName}->dbVNOMGetHierInstCell($inst);
     if(exists $MODULE_ALREADY{$cellref}){
        my $json_str_return = &write_edp_json($inst,$cellref);
        $json_out_str = $json_out_str.$json_str_return;
        &call_write_hier_json($cellref);
     }else{
        print "WARN: module $cellref does not exists..\n";
     }
   }
   $json_out_str =~ s/},$/}/; #removing extra comma in last point
   $json_out_str = $json_out_str."]\n";
   $json_out_str = $json_out_str."},\n";
 }#if
}#sub call_write_hier_json
#-------------------------------------------------------------------------------------------#
sub write_edp_json {
my $inst = $_[0];
my $module = $_[1];
my $json_out_str;
if(exists $MODULE_ALREADY{$module}){
  my $area = int($MODULE_ALREADY{$module}->dbVNOMGetArea);
  $json_out_str = $json_out_str."{\"name\": \"$inst\",\"size\": $area\},\n";
}
return($json_out_str);
}#sub write_edp_json
#-------------------------------------------------------------------------------------------#
sub write_edp_json_pseudo {
  my $noOfArguments = @_;
  if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : -output <fileName>\n";
                                          print "      : -W <width>\n";
                                          print "      : -H <height>\n";
                                         }
  else{
    my $json_out_str = "";
    my $edp_width;
    my $edp_height;
    for(my $i=0; $i < $noOfArguments;$i++){
      if($_[$i] eq "-W"){$edp_width = $_[$i+1];}
      if($_[$i] eq "-H"){$edp_height = $_[$i+1];}
    }#for
    if(exists $PSEUDO_MODULE_ALREADY{$TOP_MODULE} ) {
       #print "$TOP_MODULE is the current top module\n";
       my @size = $PSEUDO_MODULE_ALREADY{$TOP_MODULE}->dbaTstgenGetSize;   
       my $chip_width = $size[2]-$size[0];
       my $chip_height = $size[3]-$size[1];
       if($chip_height == 0 || $chip_height == 0){
          print "WARN: Module $TOP_MODULE has size @size..\n";
          return;
       }
       #--------------------------------------------------------------------------------------#
       my $multiFactorX = $edp_width/$chip_width;
       my $multiFactorY = $edp_height/$chip_height;
       if($multiFactorX > $multiFactorY){
          $multiFactor = $multiFactorX;
       }else{
          $multiFactor = $multiFactorY;
       }
       
       my $new_chip_width =  $chip_width*$multiFactor;
       my $new_chip_height =  $chip_height*$multiFactor;
       #--------------------------------------------------------------------------------------#
       $json_out_str = $json_out_str."{\n";
       $json_out_str = $json_out_str." \"name\": \"$TOP_MODULE\",\n";
       $json_out_str = $json_out_str." \"children\": [\n" ;
       foreach my $instance ( keys %{$PSEUDO_VINST_ALREADY{$TOP_MODULE}} ) {
         if($instance eq "PIN"){ 
         }else {
           my $cellref = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstCellref;
           my $status = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstStatus;
           my @loc = ();
           if($status eq "UNPLACED" || $status eq "UND"){
             @loc = &return_pseudo_vinst_size($TOP_MODULE,$instance);
           }else{
             @loc = $PSEUDO_VINST_ALREADY{$TOP_MODULE}{$instance}->dbPimDBGetInstRelBbox;
           }
           foreach (@loc){ 
             $_ = sprintf("%.2f", ( $_*$multiFactor));
           }
           if (@loc == 4){
             my $width = int ($loc[2] - $loc[0]); 
             my $height = int ($loc[3] - $loc[1]);
             my $area = $width*$height;
             if(exists $PSEUDO_MODULE_ALREADY{$cellref}){
               $json_out_str = $json_out_str."{\"name\": \"$cellref\",\"size\": $area\},\n"
             }
           }
         }#else
       }#foreach
       return($json_out_str);
    }#if top module exists
  }#else
}#sub write_edp_json_pseudo
#-------------------------------------------------------------------------------------------#
sub write_flat_csv {
use Benchmark;
my $t0 = new Benchmark;
my $out_file  = "flatViewer.csv";
open (WRITE_JSON,">$out_file");
my $dbu = $GLOBAL->dbfGlobalGetDBU;
my @color_list = ("#008000","#800000","#0000FF","#FF00FF","#0000A0","#FF0000","#25383C","#0000FF","#254117", "#8B008B", "#008000", "#4169E1","#D87093","#A52A2A");
my $i=0;
$json_out_str = $json_out_str."x,y,height,width,color\n";
foreach my $inst (keys %COMP_ALREADY){
  my $cellref = $CADB{$inst}->dbCadbGetCellref; 
  my @loc = $CADB{$inst}->dbCadbGetLoc;
  my @size = $PLDB{$cellref}->dbMdbGetSize;
  my @instbBox = $CADB{$inst}->dbCadbGetbBox;
  my $height = ($instbBox[3] - $instbBox[1])/$dbu; 
  my $width = ($instbBox[2] - $instbBox[0])/$dbu; 
  my $x_axis = $instbBox[0]/$dbu;
  my $y_axis = $instbBox[1]/$dbu;
  my $color = $color_list[$i];
  $i++;
  if($color eq ""){
    $i = 0;
    $color = "#806517";
  }
  $json_out_str = $json_out_str."$x_axis,$y_axis,$height,$width,$color\n";
}
print WRITE_JSON "$json_out_str\n";
close(WRITE_JSON);
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "command write_flat_json took:",timestr($td),"\n";
}#sub write_flat_csv
#-------------------------------------------------------------------------------------------#
sub write_flat_json{
use Benchmark;
my $t0 = new Benchmark;
my $out_file  = "flatViewer.json";
open (WRITE_JSON,">$out_file");
$json_out_str = $json_out_str."{\n";
$json_out_str = $json_out_str." \"name\": \"$TOP_MODULE\",\n";
$json_out_str = $json_out_str." \"children\": [\n" ;
my $dbu = $GLOBAL->dbfGlobalGetDBU;
my @color_list = ("#008000","#800000","#0000FF","#FF00FF","#0000A0","#FF0000","#25383C","#0000FF","#254117", "#8B008B", "#008000", "#4169E1","#D87093","#A52A2A");
my $i=0;
foreach my $inst (keys %COMP_ALREADY){
  my $cellref = $CADB{$inst}->dbCadbGetCellref; 
  #my $delA = $size[0]*$size[1];
  my @loc = $CADB{$inst}->dbCadbGetLoc;
  my @size = $PLDB{$cellref}->dbMdbGetSize;
  my @instbBox = $CADB{$inst}->dbCadbGetbBox;
  my $height = ($instbBox[3] - $instbBox[1])/$dbu; 
  my $width = ($instbBox[2] - $instbBox[0])/$dbu; 
  my $x_axis = $instbBox[0]/$dbu;
  my $y_axis = $instbBox[1]/$dbu;
  my $color = $color_list[$i];
  $i++;
  if($color eq ""){
    $i = 0;
    $color = "red"
  }
  $json_out_str = $json_out_str."{\"name\": \"$inst\",\"x_axis\": $x_axis\,\"y_axis\": $y_axis\,\"height\": $height,\"width\": $width,\"color\" : \"$color\"},\n";
  #$json_out_str = $json_out_str."{\"name\": \"$inst\",\"x_axis\": $instbBox[0]\,\"y_axis\": $instbBox[1]\,\"height\": $height,\"width\": $width,\"color\" : \"$color\"},\n";
  #$json_out_str = $json_out_str."{\"name\": \"\",\"size\": $delA\},\n";
}
$json_out_str =~ s/},$/}/; #removing extra comma in last point
$json_out_str = $json_out_str."]\n";
$json_out_str = $json_out_str."}\n";
print WRITE_JSON "$json_out_str\n";
close(WRITE_JSON);
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "command write_flat_json took:",timestr($td),"\n";
}#sub write_flat_json
#-------------------------------------------------------------------------------------------#
sub write_json {
use Benchmark;
my $t0 = new Benchmark; 

my $json = "";
my %inst_hash = ();
open (WRITE_JSON,">new.json");
$json = $json."[\n" ;
foreach my $netName (keys %NETS_ALREADY){
  my $netType = 0;
  if ( exists $NADB{$netName} ) {$netType = $NADB{$netName}->dbNadbGetNetType;}
  if ( $netType == 0 ) { 
    foreach $instance ( keys %{$NETS_ALREADY{$netName}} ){
      push (@{$inst_hash{$netName}},$instance);
    }#foreach
  }#if
}#foreach

foreach my $net (keys %inst_hash){
  my @inst_list = @{$inst_hash{$net}};
  my $inst_list_cnt = @inst_list;
  my @back = ();
  for(my $i =0; $i<=$inst_list_cnt;$i++){
    my @inst_list_new = ();
    my @instList = ();
    my $in = shift(@inst_list); 
    if($in ne ""){
      foreach my $temp_inst (@inst_list){
        push(@instList,"\"$temp_inst\",");
      }
      my $join_inst_str = join "",@instList;
      $join_inst_str =~ s/^"//;
      $join_inst_str =~ s/^"//;
      $join_inst_str =~ s/,$//;
      $join_inst_str =~ s/"$//;
      $join_inst_str =~ s/"$//;
      push(@back,"\"$in\",");
      my $join_back_str = join "",@back;
      $join_back_str =~ s/,$//;
      $join_back_str =~ s/"$//;
      $join_back_str =~ s/"$//;
      push(@inst_list_new,$join_inst_str);
      push(@inst_list_new,"\",",$join_back_str)if($i > 0);
      push(@{$inst_new_hash{$in}},"\"@inst_list_new\",");
    }
  }
}#foreach

my $dbu = $GLOBAL->dbfGlobalGetDBU;

foreach my $inst (keys %inst_new_hash){
    my $join_str = join"",@{$inst_new_hash{$inst}};
    $join_str =~ s/,$//; 
    $join_str =~ s/^"\s+",\s+//; 
    $json = $json."{\"name\": \"$inst\",\"size\": 100,\"imports\":[$join_str]},\n";
}#foreach

$json =~ s/},$/}/;
$json = $json."]"; 
print WRITE_JSON "$json\n";
my $t1 = new Benchmark;
my $td = timediff($t1,$t0);
print "command write_json took:" ,timestr($td),"\n";
}#sub write_json
#-------------------------------------------------------------------------------------------#

1;

