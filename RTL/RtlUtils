package RtlUtils;

sub new {
  my $inst = {
	     };
  ###############################################################
  bless $inst, 'RtlUtils';
  return $inst;
}

sub log2 {
    my ($self, $num) = @_;
    if ($num == 1) {
      return(1)
    } else {
      return(POSIX::ceil(log($num)/log(2)));
    }
}

sub int_log2 {
    my ($self, $num) = @_;
    return int log2 $num;
}

sub netWidth {
  my ($self, $sig) = @_;
  my $width = 1;
  if ($sig =~ /\[(\d+):(\d+)\]/) {
	$width = $1 - $2 + 1;
  }
  return($width);
}

sub netMSB {
  my ($self, $sig) = @_;
  my $msb = 1;
  if ($sig =~ /\[(\d+):(\d+)\]/) {
	$msb = $1;
  }
  return($msb);
}

sub netLSB {
  my ($self, $sig) = @_;
  my $lsb = 1;
  if ($sig =~ /\[(\d+):(\d+)\]/) {
	$lsb = $1;
  }
  return($lsb);
}

sub netRange {
  my ($self, $sig) = @_;
  my $range;
  if ($sig =~ /\[(\d+:\d+)\]/) {
	$range = $1;
  }
  else {$range = "";}
  return($range);
}

sub netDeclRange {
  my ($self, $sig) = @_;
  my $declRange;
  if ($sig =~ /\[(\d+:\d+)\]/) {
	$declRange = "[".$1."]";
  }
  else {$declRange = "";}
  return($declRange);
}

sub expandRange {
  my ($self, $in) = @_;
  my (@inList, @inList_tmp, $in_tmp);
  my ($pre, $beg, $end, $sig);

  $_ = $in;
  s/\{\s*(.*)\s*\}/$1/;
  @inList_tmp = split(/,\s*/,$_);

  foreach $in_tmp (@inList_tmp) {
    if ($in_tmp =~ /(\S*)\[(\d+):(\d+)\]/) {
      $pre = $1; $beg = $3; $end = $2;
      for (my $i=$beg; $i<=$end; $i++) {
	$sig = $pre ."[". $i ."]";
	push (@inList, $sig);
      } #for
    } else {
	push (@inList, $in_tmp);
    } #if...else
  } #foreach
  return(@inList);
} #sub expandRange

1;
