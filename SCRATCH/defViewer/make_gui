#sub win {
# $myproc = Proc::Simple->new();
# $myproc->start(\&start_gui);
#}#sub win

######################################################################################################
###################################### Preparing proton GUI ##########################################
######################################################################################################

sub start_gui {
 my $with_auth_code = $_[0];
 $top = MainWindow->new();
 $top->title (" DefViewer ");
 $top->geometry("750x700+0+0");
 @varOnTheFly = ();
 
 $top->protocol('WM_DELETE_WINDOW',sub{
                                       if($with_auth_code == 1){
                                          my $end_time = time;
                                          my $time_diff = $end_time - $start_time;
                                          my $end_time_result = $server->call('end_time', $userName,$appName,int($run_count),$end_time,$time_diff);
                                          print "App run time is: $time_diff\n";
                                       }
                                       exit(0);
                                    });

 my $folderImg = $top->Getimage('folder');

 ($instDisVar, $pinRectDisVar, $netDisVar, $spnetDisVar, $instTextDisVar, $rulerDisVar, $instQueryDisVar, $layerQueryDisVar) = (0, 0, 0, 0, 0, 0, 0, 0);
 my ($comp, $net, $spnet) = (1,1,1);
 my $technologyMode = 'also';
 my ($techleffile, $macroleffile, $deffile) = ("", "", ""); 
 
 my $topFrame = $top->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x');
 #my $bottomFrame = $top->Frame(-relief=>"raised", -borderwidth=>1)->pack(-side=>'bottom', -fill=>'x', -anchor=>'sw');
 my $bottomFrame = $top->Frame(-relief=>"raised", -borderwidth=>1)->pack(-side=>'bottom', -fill=>'x');
 #my $leftFrame = $top->Frame()->pack(-side=>'left', -fill=>'y', -anchor=>'w');
 my $leftFrame = $top->Frame()->pack(-side=>'left', -fill=>'y');
 my $rightFrame = $top->Frame()->pack(-side=>'left', -fill=>'both', -expand=>1);
 my $queryFrame = $top->Frame()->pack(-side=>'left', -fill=>'y');

 my $adjTop = $top->Adjuster();
 $adjTop->packAfter($topFrame, -side => 'top');
 my $adjLeft = $top->Adjuster();
 $adjLeft->packAfter($leftFrame, -side => 'left');
 #my $adjRight = $top->Adjuster();
 #$adjRight->packAfter($rightFrame, -side => 'left');

 
 my $topLeftFrame = $topFrame->Frame(-relief=>"ridge")->pack(-side=>'left', -fill=>'x', -anchor=>'nw', -expand=>1);
 my $topLeftFrame1 = $topLeftFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);
 my $topLeftFrame2 = $topLeftFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);
 
 my $topMiddleFrame = $topFrame->Frame(-relief=>"ridge")->pack(-side=>'left', -fill=>'x', -anchor=>'nw', -expand=>1);
 my $topMiddleFrame1 = $topMiddleFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);
 my $topMiddleFrame2 = $topMiddleFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);

 my $topRightFrame = $topFrame->Frame(-relief=>"ridge")->pack(-side=>'left', -fill=>'x', -anchor=>'nw', -expand=>1);
 my $topRightFrame1 = $topRightFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);
 my $topRightFrame2 = $topRightFrame->Frame(-relief=>"ridge")->pack(-side=>'top', -fill=>'x', -expand=>1);
 
 $topLeftFrame1->Label(-text => "Tech LEF:")->pack(-side =>'left', -anchor => 'w');
 $topLeftFrame1->Button(-text=>'BrowseFile',-image=> $folderImg,-command =>sub {$techleffile = &popup_read_lef;})->pack(-side => 'right');
 $techLefEntry = $topLeftFrame1->Entry(-textvariable =>\$techleffile)->pack(-side =>'right', -fill=>'x', -expand=>1);
 $topLeftFrame2->Radiobutton(-variable =>\$technologyMode, -value => "only", -text => "only")->pack(-side =>"left", -fill=>'x', -expand=>1); 
 $topLeftFrame2->Radiobutton(-variable =>\$technologyMode, -value => "also", -text => "also")->pack(-side =>"left", -fill=>'x', -expand=>1);
 $topLeftFrame2->Radiobutton(-variable =>\$technologyMode, -value => "dont", -text => "dont")->pack(-side =>"left", -fill=>'x', -expand=>1);
 
 $topMiddleFrame1->Label(-text => "  Macro LEF:")->pack(-side =>'left', -anchor => 'w');
 $topMiddleFrame1->Button(-text=>'BrowseFile',-image=> $folderImg,-command =>sub {$macroleffile = &popup_read_macrolef($macroLefEntry,"lef");})->pack(-side => 'right');
 $macroLefEntry = $topMiddleFrame1->Entry(-textvariable =>\$macroleffile)->pack(-side =>'right', -fill=>'x', -expand=>1);
 
 $topRightFrame1->Label(-text => "  DEF File:")->pack(-side =>'left', -anchor => 'w');
 $topRightFrame1->Button(-text=>'BrowseFile',-image=>$folderImg,-command =>sub {$deffile = &popup_read_def;})->pack(-side => 'right');
 $defEntry = $topRightFrame1->Entry(-textvariable =>\$deffile)->pack(-side =>'right', -fill=>'x', -expand=>1);
 $topRightFrame2->Checkbutton(-variable =>\$comp,-onvalue => 1,-text => "Comp")->pack(-side =>"left", -fill=>'x', -expand=>1); 
 $topRightFrame2->Checkbutton(-variable =>\$net,-onvalue => 1,-text => "Nets")->pack(-side =>"left", -fill=>'x', -expand=>1);
 $topRightFrame2->Checkbutton(-variable =>\$spnet, -onvalue => 1,-text => "SpNets")->pack(-side =>"left", -fill=>'x', -expand=>1);

 $topMiddleFrame2->Button(-text=>'Design Display',-command =>sub {setBusyCursor();&run_design_display($techleffile,$macroLefEntry->get(),$deffile,$technologyMode,$comp,$net,$spnet);unsetBusyCursor();})->pack(-side => 'top');

 #----------------------------------------------------------------------------#
 my $path2Slvr = $GLOBAL->dbfGlobalGetSlvrHome;
 my $instance_image = $leftFrame->Photo(-file=> "$path2Slvr/image/fplan_mode.gif");
 my $instanceButton = $leftFrame->Checkbutton(-variable =>\$instDisVar,-image=>$instance_image,-indicatoron => 0,
                                              -command=> sub{
                                                              if($instDisVar == 0){
                                                                 $instPopUpWin->destroy;  
                                                                 $GLOBAL->dbfGlobalSetInstancepopup(0);     
                                                              }else {
                                                                 my $to_open_instance_popup = $GLOBAL->dbfGlobalGetInstancepopup;
                                                                 if($to_open_instance_popup == 0){
                                                                    &design_display_popup;
                                                                 }
                                                              }
                                              })->pack(-side=>"top",-anchor=>'w');
 my $instance_baloon = $leftFrame->Balloon();
 $instance_baloon->attach($instanceButton, -balloonmsg => 'Instance');

 #----------------------------------------------------------------------------#
 my $pinRect_image = $leftFrame->Photo(-file=> "$path2Slvr/image/ptnPinGuide.gif");
 my $pinRectButton = $leftFrame->Checkbutton(-variable =>\$pinRectDisVar,-image=>$pinRect_image,-indicatoron => 0,
                                              -command=> sub{ 
                                                               setBusyCursor();
                                                               if($pinRectDisVar == 0){
                                                                  $design_worldcanvas->delete("PINRECT");
                                                                  $pinDisVar = 0;
                                                                  if($obsRectDisVar == 0){
                                                                     my $cnt = 0;
                                                                     foreach (keys %RML){
                                                                       $varOnTheFly[$cnt] =  0;
                                                                       $cnt++;
                                                                     } 
                                                                     if(Exists $layerQueryPopUpWin){
                                                                        $layerQueryDisVar = 0;
                                                                        $layerQueryPopUpWin->destroy;
                                                                        $GLOBAL->dbfGlobalSetLayerQueryPopup(0);   
                                                                     }
                                                                  } 
                                                               }else {
                                                                  my @instIdList = $design_worldcanvas->find("withtag", "INSTANCE");
                                                                  foreach my $id (@instIdList) {
                                                                     my @tagList = $design_worldcanvas->gettags($id);
                                                                     &instPinRectDisplay($tagList[1]);
                                                                  } 
                                                                  $pinDisVar = 1;
                                                                  my $cnt = 0;
                                                                  foreach (keys %RML){
                                                                    $varOnTheFly[$cnt] =  1;
                                                                    $cnt++;
                                                                  } 
                                                               }
                                                               unsetBusyCursor();
                                              })->pack(-side=>"top",-anchor=>'w');
 my $pinRect_baloon = $leftFrame->Balloon();
 $pinRect_baloon->attach($pinRectButton, -balloonmsg => 'PinRects');

 #----------------------------------------------------------------------------#
 my $obsRect_image = $leftFrame->Photo(-file=> "$path2Slvr/image/obstruct.gif");
 my $obsRectButton = $leftFrame->Checkbutton(-variable =>\$obsRectDisVar,-image=>$obsRect_image,-indicatoron => 0,
                                              -command=> sub{
                                                              setBusyCursor();
                                                              if($obsRectDisVar == 0){
                                                                 $design_worldcanvas->delete("OBSRECT");
                                                                 $obsDisVar = 0;
                                                                 if($pinRectDisVar == 0){
                                                                    my $cnt = 0;
                                                                    foreach (keys %RML){
                                                                      $varOnTheFly[$cnt] =  0;
                                                                      $cnt++;
                                                                    } 
                                                                    if(Exists $layerQueryPopUpWin){
                                                                       $layerQueryDisVar = 0;
                                                                       $layerQueryPopUpWin->destroy;
                                                                       $GLOBAL->dbfGlobalSetLayerQueryPopup(0);   
                                                                    }
                                                                 } 
                                                              }else {
                                                                 my @instIdList = $design_worldcanvas->find("withtag", "INSTANCE");
                                                                 foreach my $id (@instIdList) {
                                                                    my @tagList = $design_worldcanvas->gettags($id);
                                                                    &instObsRectDisplay($tagList[1]);
                                                                 } 
                                                                 $obsDisVar = 1;
                                                                 my $cnt = 0;
                                                                 foreach (keys %RML){
                                                                   $varOnTheFly[$cnt] =  1;
                                                                    $cnt++;
                                                                 } 
                                                              }
                                                              unsetBusyCursor();
                                              })->pack(-side=>"top",-anchor=>'w');
 my $pinRect_baloon = $leftFrame->Balloon();
 $pinRect_baloon->attach($pinRectButton, -balloonmsg => 'PinRects');

 #----------------------------------------------------------------------------#
 my $net_image = $leftFrame->Photo(-file=> "$path2Slvr/image/show_net.gif");
 my $netButton = $leftFrame->Checkbutton(-variable =>\$netDisVar,-image=>$net_image,-indicatoron => 0,
                                         -command=> sub{
                                                         setBusyCursor();
                                                         if($netDisVar == 0) {
                                                            $design_worldcanvas->delete("NETTAG");
                                                         }else {
                                                            &design_nets_display;
                                                         }
                                                         unsetBusyCursor();
                                         })->pack(-side=>"top", -anchor=>'w');
 my $net_baloon = $leftFrame->Balloon();
 $net_baloon->attach($netButton, -balloonmsg => 'Nets');
 
 #----------------------------------------------------------------------------#
 my $spnet_image = $leftFrame->Photo(-file=> "$path2Slvr/image/trim.gif");
 my $spnetButton = $leftFrame->Checkbutton(-variable =>\$spnetDisVar,-image=>$spnet_image,-indicatoron => 0,
                                           -command=> sub{
                                                           setBusyCursor();
                                                           if($spnetDisVar == 0){
                                                              $design_worldcanvas->delete(SPNETTAG);
                                                           }else {
                                                              &design_spnets_display;
                                                           }
                                                           unsetBusyCursor();
                                           })->pack(-side=>"top", -anchor=>'w');
 my $spnet_baloon = $leftFrame->Balloon();
 $spnet_baloon->attach($spnetButton, -balloonmsg => 'SpecialNets');
 
 #----------------------------------------------------------------------------#
 my $instanceName_image = $leftFrame->Photo(-file=> "$path2Slvr/image/reportSlt.gif");
 my $instanceNameButton = $leftFrame->Checkbutton(-variable =>\$instTextDisVar,-image=>$instanceName_image,-indicatoron => 0,
                                                  -command=> sub{
                                                                  setBusyCursor();
                                                                  if($instTextDisVar == 0){
                                                                     $design_worldcanvas->delete("INSTANCETEXT");
                                                                  }else {
                                                                     &display_instance_name;
                                                                  }
                                                                  unsetBusyCursor();
                                                  })->pack(-side=>"top", -anchor=>'w');
 my $instanceName_baloon = $leftFrame->Balloon();
 $instanceName_baloon->attach($instanceNameButton, -balloonmsg => 'InstanceName');

 #----------------------------------------------------------------------------#
 my $ruler_image = $leftFrame->Photo(-file=> "$path2Slvr/image/ruler.gif");
 my $rulerButton = $leftFrame->Checkbutton(-variable =>\$rulerDisVar,-image=>$ruler_image,-indicatoron => 0,
                                           -command=> sub{
                                                           if($rulerDisVar == 0){
                                                              $rulerPopUpWin->destroy;  
                                                              $GLOBAL->dbfGlobalSetRulerPopupOpen(0);     
                                                           }else {
                                                              my $to_open_ruler_popup = $GLOBAL->dbfGlobalGetRulerPopupOpen;
                                                              if($to_open_ruler_popup == 0){
                                                                 &create_ruler_popup;
                                                              }
                                                           }
                                           })->pack(-side=>"top", -anchor=>'w');
 my $ruler_baloon = $leftFrame->Balloon();
 $ruler_baloon->attach($rulerButton, -balloonmsg => 'ruler');

 #$leftFrame->Button('-text'=>'Ruler', -command=>sub{&create_ruler_popup;})->pack(-side=>"top", -anchor=>'w');

 #my $ruler_image = $leftFrame->Photo(-file => "$path2Slvr/image/ruler.gif");               
 #my $rulerButton = $leftFrame->Button(-image=> $ruler_image,
 #                                     -command=>sub{
 #                                                   my $is_open = $GLOBAL->dbfGlobalGetRulerPopupOpen;
 #                                                   if($is_open == 0){
 #                                                      &create_ruler_popup;
 #                                                   }else{
 #                                                      print "WARN: Ruler pop-up is already opened\n";
 #                                                   }
 #                                     })->pack(-side=>'top', -anchor=>'w');
 #my $ruler_baloon = $leftFrame->Balloon();
 #$ruler_baloon->attach($rulerButton, -balloonmsg => 'Ruler');

 #----------------------------------------------------------------------------#
 $queryFrame->Label(-text=> "Query")->pack(-side => 'top');
 $queryFrame->Checkbutton(-text=>"Instance", -variable =>\$instQueryDisVar,
                          -command=> sub{ 
                                          if($instQueryDisVar == 0){
                                             $instQueryPopUpWin->destroy;
                                             $GLOBAL->dbfGlobalSetInstanceQueryPopup(0);;
                                          }else {
                                             my $to_open_inst_query_popup = $GLOBAL->dbfGlobalGetInstanceQueryPopup;
                                             if($to_open_inst_query_popup == 0){
                                                &instanceQueryDisplayPopUp;
                                             }
                                          }
                          })->pack(-side=>"top",-anchor=>'w');
 $queryFrame->Checkbutton(-text=>"Layer", -variable =>\$layerQueryDisVar,
                          -command=> sub{  
                                          if($layerQueryDisVar == 0){
                                             $layerQueryPopUpWin->destroy;
                                             $GLOBAL->dbfGlobalSetLayerQueryPopup(0);
                                          }else {
                                             my $to_open_layer_query_popup = $GLOBAL->dbfGlobalGetLayerQueryPopup;
                                             if($to_open_layer_query_popup == 0){
                                                &layerQueryDisplayPopUp;
                                             }
                                          }
                          })->pack(-side=>"top", -anchor=>'w');

 $bottomFrame->Label(-textvariable =>\$CURSORX, -text => 'X', -anchor=>'w',-relief=>'sunken')->pack(-fill=>'x', -side=>'left');
 $bottomFrame->Label(-textvariable =>\$CURSORY, -text => 'Y', -anchor=>'w',-relief=>'sunken')->pack(-fill=>'x', -side=>'left');
 
 
 &create_design_worldCanv($rightFrame);
 
 MainLoop();

}# sub start_gui

############################## create popup to select technology lef #################################
sub popup_read_lef {
 my @types = (["Config Files", '.lef'],
              ["All Files", "*"]);
 my $leffile = $top->getOpenFile(-filetypes =>\@types,
                                 -title=>'Select LEF File',
                                 -defaultextension => '.lef'); 
 return($leffile);          
}#sub popup_read_lef

######################### create popup to select more than one Macro Lef #############################
sub popup_read_macrolef {
 my $parentEntry = $_[0];
 my $file_type = $_[1];
 my $popupgui = MainWindow->new();
 $popupgui->title ("Select Lef Files")if($file_type eq "lef");
 $popupgui->title ("Select Lib Files")if($file_type eq "lib");
 $popupgui->title ("Select Verilog Files")if($file_type eq "verilog");
 $popupgui->title ("Select RTL Files")if($file_type eq "rtl");
 $popupgui->title ("Select Sdc Files")if($file_type eq "sdc");
 my $Dirimage = $popupgui->Getimage('folder');
 my $Fileimage = $popupgui->Getimage('file');
 my @fileList = ();
 @fileList = ("Lef Files (*.lef)", "All Files (*)") if($file_type eq "lef");
 @fileList = ("Lib Files (*.lib)", "All Files (*)") if($file_type eq "lib");
 @fileList = ("Verilog Files (*.gv)","Verilog Files (*.v)","Verilog Files (*.vg)","All Files (*)")  if($file_type eq "verilog");
 @fileList = ("Rtl Files (*.rtl)", "All Files (*)") if($file_type eq "rtl"); 
 @fileList = ("Sdc Files (*.sdc)", "All Files (*)") if($file_type eq "sdc");
 @fileList = ("Config Files (*)", "All Files (*)") if($file_type eq "");
 my $ext = $fileList[0];
 $lefEntryVar = "";
 @LEF_FILES = (); 
 
 my $pathFrame = $popupgui->Frame()->pack(-side=>'top', -expand=>1,-fill=>'x');
 my $ListFrame = $popupgui->Frame()->pack(-side=>'top', -expand=>1,-fill=>'both');
 my $entryFrame = $popupgui->Frame()->pack(-side=>'top', -expand=>1,-fill=>'x');
 my $typeFrame = $popupgui->Frame()->pack(-side=>'top', -expand=>1,-fill=>'x');
 
 my $path = cwd();
 my @var = split(/\//,$path);
 my @pathList = ("/");
 for(my $i = 1; $i<= $#var; $i++){
     if($i >1){
       $reg_path = $pathList[-1]."\/".$var[$i];
     }else{ 
       $reg_path = "\/".$var[$i];
     }
   push(@pathList,$reg_path); 
 }
 
 my $top_pane = $ListFrame->Scrolled(qw/Pane -width 400 -height 130 -scrollbars s -sticky nsew -relief sunken -borderwidth 2/);
    $top_pane->Subwidget("xscrollbar")->configure(-width=>15,-borderwidth=>2);
    $top_pane->pack(qw/-side left -anchor w -fill both -expand 1/);
 
 my $dir_label = $pathFrame->Label(-text=>"Directory:")->pack(-side=>"left");
    $dir_list = $pathFrame->Optionmenu(
            -options => \@pathList,
            -textvariable=>\$path,
            -command => sub{
                          for(my $j=0; $j<= $#pathList; $j++){
                            if($pathList[$j] =~m/$path\/.*/){
                               delete $pathList[$j];
                            } 
                          }
                          $dir_list->configure(-options=>\@pathList);
                          &create_ListOfFileDir($top_pane,$path,$ext,$Dirimage,$Fileimage);
    })->pack(-side=>'left',-expand=>1,-fill=>'x');
  
 my $path2Slvr = $GLOBAL->dbfGlobalGetSlvrHome;
 my $bitmap = $popupgui->Photo(-file => "$path2Slvr/image/up.gif");
 my $upButton = $pathFrame->Button(-text=>"ad",-image => $bitmap, 
                                   -padx=>0, -pady=>0,
                                   -command=>sub {
                                                  my $path2 = $dir_list->cget(-options);
                                                  &create_ListOfFileDir($top_pane,@$path2[-2],$ext,$Dirimage,$Fileimage);
                                                   })->pack( -side=>"right");
 $entryFrame->Label(-text=>'File name: ')->pack(-side=>'left');
 $file_entry = $entryFrame->Entry(-textvariable=>\$lefEntryVar)->pack(-side=>'left',-expand=>1,-fill=>'x');
 $entryFrame->Button(-text=>"Open", -relief=>'groove',-borderwidth=>5,-command=>sub{my $setEntryVar = join ",",@LEF_FILES;$parentEntry->configure(-textvariable=>\$setEntryVar);$popupgui->destroy;})->pack(-side=>'right');
 
 $typeFrame->Label(-text=>'Files of type:')->pack(-side=>'left');
 $file_list = $typeFrame->Optionmenu(
                          -options => \@fileList,
                          -textvariable=>\$ext,
                          -command => sub{my $ad = $dir_list->cget(-options);
                                          &create_ListOfFileDir($top_pane,@$ad[-1],$ext,$Dirimage,$Fileimage);}
                          )->pack(-side=>'left',-expand=>1,-fill=>'x');
 $typeFrame->Button(-text=>"Cancel", -relief=>'raised', -borderwidth=>2, -command=>sub{$popupgui->destroy;})->pack(-side=>'right');
 
 &create_ListOfFileDir($top_pane,$path,$ext,$Dirimage,$Fileimage);
}#sub popup_read_macrolef


sub create_ListOfFileDir {
 my $frame = $_[0];
 my $path = $_[1];
 my $ext = $_[2];
 my $dir_image = $_[3];
 my $file_image = $_[4];
 my @DirFile = ();
 my @dir = ();
 my @files = ();
 
 my $extension = (split(/\(/,$ext))[1];
 for($extension){s/\)//g;}
 
 #-------------- listing the Dir and Files of CWD-----------------# 
 opendir (DIR, "$path");
 while(defined ($fileName = readdir(DIR))){
    if(-d $path."\/".$fileName){
       if($fileName =~ m/\.$/){ 
       }else {
         push(@dir, $fileName);
       } 
    }else{
       if($fileName =~ m/^.$extension/){
          push(@files, $fileName);
       }
    }
 } 
 closedir(DIR);
 
 @dir = sort @dir;
 @files = sort @files;
 my $noOfDir = @dir;
 my $noOfFrames = int(($#dir+$#files +2)/6); 
 push(@DirFile,@dir,@files);
 
 #-------- Deleting previous Frames and making Hash empty -------#
 foreach my $key (keys %DIR_FRAME_HASH){
   if(exists $DIR_FRAME_HASH{$key}){
      my $f = $DIR_FRAME_HASH{$key};
      $f->destroy if($f->Exists());
   }
 }
 %DIR_FRAME_HASH = ();
 
 #-------- Updating the path  and path List of Option Menu ------#
 my @var = split(/\//,$path);
 my @pathList = ("/");
 for(my $i = 1; $i<= $#var; $i++){
     if($i >1){
       $reg_path = $pathList[-1]."\/".$var[$i];
     }else{ 
       $reg_path = "\/".$var[$i];
     }
   push(@pathList,$reg_path); 
 }
 
 $dir_list->configure(-textvariable=>\$path);
 $dir_list->configure(-options=>\@pathList);
 
 #------------------- Making buttons for Files and Directory --------------------#
 my $j = 0;
 for(my $i=0; $i<=$noOfFrames; $i++){
     $dir_frame = $frame->Frame()->pack(-side=>'left',-anchor=>'n');
     $DIR_FRAME_HASH{$i} = $dir_frame;
     for(my $k=0; $k<=5; $k++){
         my $name = $DirFile[$j];
         if($j > $#DirFile){last;}
         my $dir_but_frame = $dir_frame->Frame()->pack(-side=>'top',-expand=>1, -fill=>'x',-anchor=>'n');  
         if($j<$noOfDir){
            $dir_but_frame->Label(-image=>$dir_image)->pack(-side=>'left');   
            ${"Button".$name} = $dir_but_frame->Button(-text=> $name,-padx=>0,-pady=>0,-borderwidth=>0,-relief=>'flat',-command=>sub{
                                                       my $buttonText = ${"Button".$name}->cget('-text');
                                                       my $path1;
                                                       if($path eq "\/"){
                                                          $path1 = $path.$buttonText;
                                                       }else{ 
                                                          $path1 = $path."\/".$buttonText;                           
                                                       }
                                                       &create_ListOfFileDir($frame,$path1,$ext,$dir_image,$file_image);
                                                      })->pack(-side=>'left');
         }else{
               $dir_but_frame->Label(-image=>$file_image)->pack(-side=>'left');   
               ${"Button".$name} = $dir_but_frame->Button(-text=>$name,-padx=>0,-pady=>0,-borderwidth=>0,-relief=>'flat',
                                                          -command=>sub{my $selFile = $path."\/".$name;
                                                                        my $color = ${"Button".$name}->cget(-foreground);
                                                                        if($color ne "blue"){
                                                                           ${"Button".$name}->configure(-foreground=>"blue");
                                                                           if($lefEntryVar eq ""){
                                                                              $lefEntryVar = $name;
                                                                           }else{
                                                                              $lefEntryVar = $lefEntryVar.",".$name;
                                                                           }
                                                                           push(@LEF_FILES,$selFile);
                                                                         }else{ 
                                                                           ${"Button".$name}->configure(-foreground=>"Black");
                                                                           my @lefEntry = split(/\,/,$lefEntryVar);
                                                                           my @lefTemp = @LEF_FILES;
                                                                           @LEF_FILES = (); 
                                                                           my @LEF_ENTRY = ();
                                                                           foreach(@lefTemp){
                                                                             my $entryRemove = shift @lefEntry;  
                                                                             if($_ ne $selFile){
                                                                                push(@LEF_FILES,$_);
                                                                                push(@LEF_ENTRY,$entryRemove); 
                                                                             }
                                                                           }     
                                                                           $lefEntryVar = join ",", @LEF_ENTRY;
                                                                         } 
                                                         })->pack(-side=>'left');
         } 
         $j++;
    }  
 }
}#sub create_ListOfFileDir

############################### create popup to select def file ##################################
sub popup_read_def {
 my @types = (["Config Files", '.def'],
              ["All Files", "*"]);
 my $deffile = $top->getOpenFile(-filetypes =>\@types,
                                 -title=>'Select DEF File',
                                 -defaultextension => '.def'); 
 return($deffile);
}#sub popup_read_def


####################################### create design canvas ######################################
sub create_design_worldCanv {
 my $rightFrame = $_[0];
 $design_worldcanvas = $rightFrame->Scrolled('WorldCanvas', -scrollbars=>'se',-bg =>'black',-width=>540, -height=>540)->pack(qw/-side left -expand 1 -fill both/);
 $design_worldcanvas->Subwidget('xscrollbar')->configure(-takefocus => 0);
 $design_worldcanvas->Subwidget('yscrollbar')->configure(-takefocus => 0);
 $design_worldcanvas->configure(-confine => 1);
 $design_worldcanvas->CanvasBind('<Motion>', sub {&dbfGuiShowWorldCanvasCoords($design_worldcanvas);});
 $design_worldcanvas->CanvasFocus;
 if($tcl_file_found == 1){
   &design_display;
 }
}#sub create_design_worldCanv

sub dbfGuiShowWorldCanvasCoords {
 my $canvas = $_[0];
 my @xy = $canvas->eventLocation();
 my $x = $xy[0];
 my $y = $xy[1];
 my $mufx = $GLOBAL->dbGlobalGetMicronFactor;
 $CURSORX = sprintf("%.2f", (($x-20)/$mufx));
 $CURSORY = sprintf("%.2f", (($y-20)/$mufx));
 #print "$x,$y\n";
}#sub dbfGuiShowWorldCanvasCoords


sub run_design_display{
 my $techLef = $_[0];
 my $macroLefStr = $_[1];
 my $defFile = $_[2];
 my $techLefOpt = $_[3];
 my $read_comp = $_[4];
 my $read_nets = $_[5];
 my $read_spnets = $_[6];

 my @switch_str = ('--pins', '--floorplan', '--blkgs');

 if(-e $techLef){
   &read_lef(-lef, $techLef, -tech, $techLefOpt);
 }
 my @macroLefList = split(/\,/,$macroLefStr);
 foreach my $macroLef(@macroLefList){
    if(-e $macroLef){
       &read_lef(-lef, $macroLef);
    }
 }
 if(-e $defFile){
    if($read_comp == 1){
       push(@switch_str, '--components');
    }  
    if($read_nets == 1){
       push(@switch_str, '--nets');
    }
    if($read_spnets == 1){
       push(@switch_str, '--specialNets');
    }
    &read_def('-def', $defFile, @switch_str);
    &design_display;
 }
}#sub run_design_display

################################# subroutine to display design ####################################
sub design_display_popup{
 $GLOBAL->dbfGlobalSetInstancepopup(1);
 $instPopUpWin = MainWindow->new();
 $instPopUpWin->protocol('WM_DELETE_WINDOW',sub{$GLOBAL->dbfGlobalSetInstancepopup(0);$instPopUpWin->destroy;$instDisVar=0;});

 my $frame1= $instPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 my $frame2= $instPopUpWin->Frame()->pack(-side => 'bottom');
 
 $block_checkbutton = $frame1->Checkbutton(-text=>'Bloks',-relief=>"groove", -pady =>0, -padx=>0,-variable =>\$blockInstDisVar,
                                           -command=> sub{ 
                                                          setBusyCursor();
                                                          if($blockInstDisVar == 0) { 
                                                              $design_worldcanvas->itemconfigure("BLOCK", -outline=>"", -fill=>"");
                                                          }else {
                                                              $design_worldcanvas->itemconfigure("BLOCK", -outline=>"red", -fill=>"yellow");
                                                          }
                                                          unsetBusyCursor();
                                            })->pack(-side=>"left", -anchor=>'w');
 $seq_checkbutton = $frame1->Checkbutton(-text=>'StdCells',-relief=>"groove", -pady =>0, -padx=>0,-variable =>\$stdCellInstDisVar,
                                         -command=> sub{ 
                                                        setBusyCursor();
                                                        if($stdCellInstDisVar == 0) {
                                                           $design_worldcanvas->itemconfigure("CORE", -outline=>"", -fill=>"");
                                                        }else {
                                                           $design_worldcanvas->itemconfigure("CORE", -outline=>"red", -fill=>"red");
                                                        }
                                                        unsetBusyCursor();
                                           })->pack(-side=>"left", -anchor=>'w');
 $comb_checkbutton = $frame1->Checkbutton(-text=>'Pads',-relief=>"groove", -pady =>0, -padx=>0,-variable =>\$padInstDisVar,
                                          -command=> sub{
                                                         setBusyCursor();
                                                         if($padInstDisVar == 0) { 
                                                            $design_worldcanvas->itemconfigure("PAD", -outline=>"", -fill=>"");
                                                         }else {
                                                            $design_worldcanvas->itemconfigure("PAD", -outline=>"red", -fill=>"red");
                                                         }
                                                         unsetBusyCursor();
                                           })->pack(-side=>"left", -anchor=>'w');
 $comb_checkbutton = $frame1->Checkbutton(-text=>'Others',-relief=>"groove", -pady =>0, -padx=>0,-variable =>\$otherInstDisVar,
                                          -command=> sub{
                                                         setBusyCursor();
                                                         if($otherInstDisVar == 0) { 
                                                            $design_worldcanvas->itemconfigure("OTHER", -outline=>"", -fill=>"");
                                                         }else {
                                                            $design_worldcanvas->itemconfigure("OTHER", -outline=>"red", -fill=>"red");
                                                         }
                                                         unsetBusyCursor();
                                           })->pack(-side=>"left", -anchor=>'w');
 
 $frame2->Button(-text=>"Exit", -command=>sub{$GLOBAL->dbfGlobalSetInstancepopup(0);$instPopUpWin->destroy;$instDisVar= 0;})->pack(-side=>"left");

}#sub design_display_popup

################################# subroutine to display design ####################################
sub design_display {
 if($_[0] eq "-h" || $_[0] eq "-help" || $_[0] eq "-HELP"){
    print "Usage: design_display\n";
 return;
 }               
 &create_gcell_db;
 if($#GCellArray < 0){
   print"WARN: first you should run command \"create_gcell\"\n";
   print"use -h/-help/-HELP option to get help for \"create_gcell\"\n";
   return;
 }
 my $t0 = new Benchmark;
 ## the canvas area reamain the same : always  500 by 500
 my $box = [0,0,540,540];
 my $guiCanvasWidth = 540;
 my $guiCanvasHeight = 540;
 # a margin of 20 units is given on each side ..
 my $DBSCALEFACTOR = $DEF_DATABASE_UNIT;
 my $dieIsCentre = 0;
 my ($bllx,$blly,$burx,$bury);
 
 if(exists $DIE_ALREADY{dieArea}){
    my $guiDiellx = $DIE_ALREADY{dieArea}[0];
    my $guiDielly = $DIE_ALREADY{dieArea}[1];
    my $guiDieurx = $DIE_ALREADY{dieArea}[2];
    my $guiDieury = $DIE_ALREADY{dieArea}[3];
    
    my $guiMuDiellx = $guiDiellx/$DBSCALEFACTOR;
    my $guiMuDielly = $guiDielly/$DBSCALEFACTOR;
    my $guiMuDieurx = $guiDieurx/$DBSCALEFACTOR;
    my $guiMuDieury = $guiDieury/$DBSCALEFACTOR;
    
    if($guiDiellx == 0 && $guiDielly == 0 ){
       $dieIsCentre = 0; 
    }elsif($guiDiellx+$guiDieurx == 0 && $guiDieury+$guiDielly == 0){
       $dieIsCentre = 1;
    }else {
       $dieIsCentre = 2;
    }
 
    my $guiWidth = abs($guiMuDieurx - $guiMuDiellx) ;
    my $guiHeight = abs($guiMuDieury - $guiMuDielly) ;
    my $dieHMultFact  = 500/$guiHeight;
    my $dieWMultFact  = 500/$guiWidth;
    
    if($dieHMultFact < $dieWMultFact){
       $MICRONFACTOR = $dieHMultFact;
    }else{
       $MICRONFACTOR =  $dieWMultFact; 
    }
    
    $GLOBAL->dbGlobalSetMicronFactor($MICRONFACTOR);
    my $MulFactor = $MICRONFACTOR/$DBSCALEFACTOR;
    
    #####   display the die area boundary  ###
    if($dieIsCentre == 0 || $dieIsCentre == 2 ) {
       $blly = $guiMuDielly*$MICRONFACTOR + 20;
       $bury = $guiMuDieury*$MICRONFACTOR + 20;
       $bllx = $guiMuDiellx*$MICRONFACTOR + 20;
       $burx = $guiMuDieurx*$MICRONFACTOR + 20;
       $design_worldcanvas->createRectangle(0,0,540,540, -outline,"black");
       my $chip_bound = $design_worldcanvas->createRectangle($bllx,$blly,$burx,$bury, -outline,"green");
       $design_worldcanvas->itemconfigure($chip_bound, -tag =>'TOP_MOD');
       $design_worldcanvas->addtag($TOP_MODULE , "withtag", $chip_bound);
    }else {
       $blly = $guiMuDielly*$MICRONFACTOR + 270;
       $bury = $guiMuDieury*$MICRONFACTOR + 270;
       $bllx = $guiMuDiellx*$MICRONFACTOR + 270;
       $burx = $guiMuDieurx*$MICRONFACTOR + 270;
       $design_worldcanvas->createRectangle(0,0,540,540, -outline,"black");
       my $chip_bound = $design_worldcanvas->createRectangle($bllx,$blly,$burx,$bury, -outline,"green");
       $design_worldcanvas->itemconfigure($chip_bound, -tag =>'TOP_MOD');
       $design_worldcanvas->addtag($TOP_MODULE , "withtag", $chip_bound);
    }
    ######   display the ROWS   #####
    if (exists $FLOORPLAN_ALREADY{$FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"}}){
        my @rows = $FLOORPLAN_ALREADY{$FLOORPLAN_LOOKUP{"$TOP_MODULE/_self_"}}->dbFlplanGetRows;
        foreach my $tag ( @rows ) {
                my ($x,$y) = (split(/\s+/, $tag))[2,3];
                my $Row_llx = 20 + $x*$MulFactor;    
                my $Row_lly = 20 + $y*$MulFactor;    
                #$design_worldcanvas->createLine($Row_llx,$Row_lly,$burx,$Row_lly, -fill => "grey41", -tags=>"ROWS") if($blly != 20);
                $design_worldcanvas->createLine($Row_llx,$Row_lly,$burx,$Row_lly, -fill => "grey41", -tags=>"ROWS");
        }# foreach
    }
    #####   display the ports of the top module  ###
    my $moduleName = $TOP_MODULE;
    foreach my $port ( keys %{$PORTS_ALREADY{$moduleName}} ) {
            my $status = $PORTS_ALREADY{$moduleName}{$port}->dbPortGetStatus;
            if($status == 2 || $status == 3 ) {
               my @loc = $PORTS_ALREADY{$moduleName}{$port}->dbPortGetLoc;
               my ($X,$Y,$orient) = &dbPlaceFindClosestBoundary($loc[0],$loc[1]);
               $PORTS_ALREADY{$TOP_MODULE}{$port}->dbPortSetSide($orient);
               my $dir = $PORTS_ALREADY{$moduleName}{$port}->dbPortGetDir;
               #$orient = $PORTS_ALREADY{$moduleName}{$port}->dbPortGetSide;
               my $defDiffState = $PORTS_ALREADY{$moduleName}{$port}->dbPortGetCompareDefState;
               my $x = 20 + $loc[0]*$MulFactor;
               my $y = 20 + $loc[1]*$MulFactor;
               my @poly = dbWGuiCreatePin($x,$y,$orient,$dir);
               my $desPort;
               if($defDiffState == 0){
                  $desPort = $design_worldcanvas->createPolygon($poly[0],$poly[1], $poly[2], $poly[3],$poly[4], $poly[5], -outline => "yellow3", -fill => "yellow3", -stipple => "gray12" , -tags=>$port);
               }else{
                  $desPort = $design_worldcanvas->createPolygon($poly[0],$poly[1], $poly[2], $poly[3],$poly[4], $poly[5], -outline => "skyblue", -fill => "skyblue", -stipple => "gray12" , -tags=>$port);
               }
               $design_worldcanvas->itemconfigure($desPort, -tag =>'PORTS');
               $design_worldcanvas->addtag($port , "withtag", $desPort);
            } #if status is placed or fixed
    }# foreach
    ########  dispay the Instances  #######
    ($blockInstDisVar, $stdCellInstDisVar, $padInstDisVar, $otherInstDisVar) = (1,1,1,1);
    my $pix_size = $design_worldcanvas->pixelSize();
    for(my $i=0; $i<=$#GCellArray ; $i++) {
       for(my $j=0; $j<=$#{$GCellArray[0]} ; $j++) {
           my @instList = $GCellArray[$i][$j]->dbgGcellGetInst; 
           my @filtered_inst_array = ();
           foreach my $InstanceName (@instList){
                my @Inst_bbox = $CADB{$InstanceName}->dbCadbGetbBox;
                my @location = $CADB{$InstanceName}->dbCadbGetLoc;
                my $orient =   $CADB{$InstanceName}->dbCadbGetOrient;
                my $cellref =  $CADB{$InstanceName}->dbCadbGetCellref;
                my $status =  $CADB{$InstanceName}->dbCadbGetStatus;
                my $defDiffState = $CADB{$InstanceName}->dbCadbGetCompareDefState;
                if(exists $PLDB{$cellref}){
                   my $InstColor = "red";      
                   my $ext_tag = "OTHER";
                   if($PLDB{$cellref}->dbMdbGetClass){
                      $ext_tag = $PLDB{$cellref}->dbMdbGetClass;
                      $InstColor = "yellow" if($ext_tag eq "BLOCK");
                   }
                   if($status eq "PLACED" || $status eq "FIXED" ) {
                      my $llx = $Inst_bbox[0]*$MulFactor;
                      my $lly = $Inst_bbox[1]*$MulFactor;
                      my $urx = $Inst_bbox[2]*$MulFactor;
                      my $ury = $Inst_bbox[3]*$MulFactor;
                      if($dieIsCentre == 1) {
                         $lly = $lly + 270;
                         $ury = $ury + 270;
                         $llx = $llx + 270;
                         $urx = $urx + 270;
                      }else {
                         $lly = $lly + 20;
                         $ury = $ury + 20;
                         $llx = $llx + 20;
                         $urx = $urx + 20;
                      }
                      my $is_display = &isDisplayTrue($llx,$lly,$urx,$ury,$pix_size);
                      if($is_display == 1){
                         my $rect;
                         if($defDiffState == 0){
                            $rect = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>"red", -fill => $InstColor,-stipple => "gray12");
                         }else{
                            $rect = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>"skyblue", -fill => "skyblue",-stipple => "gray12");
                         }
                         $design_worldcanvas->itemconfigure($rect, -tag =>'INSTANCE');
                         $design_worldcanvas->addtag($InstanceName , "withtag", $rect);
                         $design_worldcanvas->addtag($ext_tag , "withtag", $rect);
                      }else{ 
                         push(@filtered_inst_array,$InstanceName);
                      }
                   }# if component status is fixed or placed
                }else{print "WARN: cell $cellref not found in library\n";}
           }#foreach Instance
           $GCellArray[$i][$j]->dbgGcellSetFilteredList(@filtered_inst_array);
       }
    }
 }#if dieArea exists
 #----------------------------------------------#
 $t1 = new Benchmark;
 my $td = timediff($t1, $t0);
 print "design display took:",timestr($td),"\n";
 #$design_worldcanvas->viewArea(@$box, -border => 0);
 $design_worldcanvas->viewAll;
 @box_org = $design_worldcanvas->getView();
 &design_ZoomIn_ZoomOut_new($design_worldcanvas,\@box_org);
 &textDisplayWithKeyMouseBind($design_worldcanvas);
 &pinRectAndObsDisplayWithKeyMouseBind($design_worldcanvas);
 &pin2pinFlyLinesDisplayWithKeyMouseBind($design_worldcanvas);
}#sub design_display

################################# filtered instance display #################################
sub filterd_instance_display{
 my @view_area = @_;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 my $pix_size = ($design_worldcanvas->pixelSize())/1.2;
 
 for(my $i=0; $i<=$#GCellArray ; $i++) {
     for(my $j=0; $j<=$#{$GCellArray[0]} ; $j++) {
         my @bbox = $GCellArray[$i][$j]->dbgGcellGetBBox;
         $_ *= $MulFactor for @bbox;
         $_ += 20 for @bbox;
         #$design_worldcanvas->createRectangle(@bbox, -outline=>"blue"); 
         if    ($bbox[0] < $view_area[0] && $bbox[2] < $view_area[0]){ 
         }elsif($bbox[0] > $view_area[2] && $bbox[2] > $view_area[2]){
         }elsif($bbox[1] < $view_area[1] && $bbox[3] < $view_area[1]){
         }elsif($bbox[1] > $view_area[3] && $bbox[3] > $view_area[3]){
         }else {
           my @instList = $GCellArray[$i][$j]->dbgGcellGetFilteredList;
           my @filtered_inst_array = ();
           my @inst_displayed = ();
           foreach my $InstanceName (@instList){
                my @Inst_bbox = $CADB{$InstanceName}->dbCadbGetbBox;
                my @location = $CADB{$InstanceName}->dbCadbGetLoc;
                my $orient =   $CADB{$InstanceName}->dbCadbGetOrient;
                my $cellref =  $CADB{$InstanceName}->dbCadbGetCellref;
                my $status =  $CADB{$InstanceName}->dbCadbGetStatus;
                my $defDiffState = $CADB{$InstanceName}->dbCadbGetCompareDefState;
                my $type = $PLDB{$cellref}->dbMdbGetType;
                my $InstColor = "red";      
                my $ext_tag = "OTHER";
                if($PLDB{$cellref}->dbMdbGetClass){
                   $ext_tag = $PLDB{$cellref}->dbMdbGetClass;
                   $InstColor = "yellow" if($ext_tag eq "BLOCK");
                }
                if($status eq "PLACED" || $status eq "FIXED" ) {
                   my $llx = $Inst_bbox[0]*$MulFactor;
                   my $lly = $Inst_bbox[1]*$MulFactor;
                   my $urx = $Inst_bbox[2]*$MulFactor;
                   my $ury = $Inst_bbox[3]*$MulFactor;
                   if($dieIsCentre == 1) {
                      $lly = $lly + 270;
                      $ury = $ury + 270;
                      $llx = $llx + 270;
                      $urx = $urx + 270;
                   }else {
                      $lly = $lly + 20;
                      $ury = $ury + 20;
                      $llx = $llx + 20;
                      $urx = $urx + 20;
                   }
                   if($llx >= $view_area[0] && $llx <= $view_area[2] && $lly >= $view_area[1] && $lly <= $view_area[3]){
                      my $is_display = &isDisplayTrue($llx,$lly,$urx,$ury,$pix_size);
                      if($is_display == 1){
                         my $rect;
                         if($defDiffState == 0){
                            $rect = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>"red", -fill => $InstColor,-stipple => "gray12");
                         }else{
                            $rect = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>"skyblue", -fill => "skyblue",-stipple => "gray12");
                         }
                         $design_worldcanvas->itemconfigure($rect, -tag =>'INSTANCE');
                         $design_worldcanvas->addtag($InstanceName , "withtag", $rect);
                         $design_worldcanvas->addtag($ext_tag , "withtag", $rect);
                         $design_worldcanvas->addtag("FILTERED" , "withtag", $rect);
                         push(@inst_displayed, $InstanceName);
                      }else{ 
                         push(@filtered_inst_array,$InstanceName);
                      }#if instance is not drawn
                   }#if instance is inside the view area
                   else{push(@filtered_inst_array,$InstanceName);}
                }# if component status is fixed or placed
           } # foreach Instance
           $GCellArray[$i][$j]->dbgGcellSetFilteredList(@filtered_inst_array);
           my @prev_list =  $GCellArray[$i][$j]->dbgGcellGetDisplayedList;
           push(@prev_list, @inst_displayed);
           $GCellArray[$i][$j]->dbgGcellSetDisplayedList(@prev_list);
         }#if view area overlaps with gcell
     }
 }
}#sub filterd_instance_display

################################# deleting the large instance #################################
sub delete_filtered_instance{
 my @view_area = @_;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 my $pix_size = ($design_worldcanvas->pixelSize())/1.2;
 for(my $i=0; $i<=$#GCellArray ; $i++) {
     for(my $j=0; $j<=$#{$GCellArray[0]} ; $j++) {
         my @bbox = $GCellArray[$i][$j]->dbgGcellGetBBox;
         $_ *= $MulFactor for @bbox;
         $_ += 20 for @bbox;
         if    ($bbox[0] < $view_area[0] && $bbox[2] < $view_area[0]){ 
         }elsif($bbox[0] > $view_area[2] && $bbox[2] > $view_area[2]){
         }elsif($bbox[1] < $view_area[1] && $bbox[3] < $view_area[1]){
         }elsif($bbox[1] > $view_area[3] && $bbox[3] > $view_area[3]){
         }else {
           my @instList = $GCellArray[$i][$j]->dbgGcellGetDisplayedList;
           my @filtered_inst_array = ();
           my @inst_displayed = ();
           foreach my $InstanceName (@instList){
                my @Inst_bbox = $CADB{$InstanceName}->dbCadbGetbBox;
                my $llx = $Inst_bbox[0]*$MulFactor;
                my $lly = $Inst_bbox[1]*$MulFactor;
                my $urx = $Inst_bbox[2]*$MulFactor;
                my $ury = $Inst_bbox[3]*$MulFactor;
                if($dieIsCentre == 1) {
                   $lly = $lly + 270;
                   $ury = $ury + 270;
                   $llx = $llx + 270;
                   $urx = $urx + 270;
                }else {
                   $lly = $lly + 20;
                   $ury = $ury + 20;
                   $llx = $llx + 20;
                   $urx = $urx + 20;
                }
                if($llx >= $view_area[0] && $llx <= $view_area[2] && $lly >= $view_area[1] && $lly <= $view_area[3]){
                   my $is_display = &isDisplayTrue($llx,$lly,$urx,$ury,$pix_size);
                   if($is_display == 1){
                      push(@inst_displayed, $InstanceName);
                   }else{ 
                      $design_worldcanvas->delete($InstanceName);
                      push(@filtered_inst_array,$InstanceName);
                   }#if instance is not drawn
                }#if instance is inside the view area
                else{push(@inst_displayed,$InstanceName);}
           } # foreach Instance
           my @prev_list = $GCellArray[$i][$j]->dbgGcellGetFilteredList;
           push(@prev_list, @filtered_inst_array);
           $GCellArray[$i][$j]->dbgGcellSetFilteredList(@prev_list);
           $GCellArray[$i][$j]->dbgGcellSetDisplayedList(@inst_displayed);
         }#if view area overlaps with gcell
     }
 }
}#sub delete_filtered_instance

####################### deleting all the instance drawn after first display ##########################
sub delete_all_zoomFit{
 for(my $i=0; $i<=$#GCellArray ; $i++) {
     for(my $j=0; $j<=$#{$GCellArray[0]} ; $j++) {
         my @filteredInstList = $GCellArray[$i][$j]->dbgGcellGetFilteredList;
         my @displayedInstList = $GCellArray[$i][$j]->dbgGcellGetDisplayedList;
         push(@filteredInstList, @displayedInstList);
         $GCellArray[$i][$j]->dbgGcellSetFilteredList(@filteredInstList);
     }
 }
 $design_worldcanvas->delete(FILTERED);
}#sub delete_all_zoomFit

######################### checking the visibility of instance ################################
sub isDisplayTrue {
 my $llx = $_[0];
 my $lly = $_[1];
 my $urx = $_[2];
 my $ury = $_[3];
 my $pix_size = $_[4];
 my $width = abs($urx-$llx)/$pix_size;
 my $height = abs($ury-$lly)/$pix_size;
 if($width > 3 || $height > 3){
    return 1;
 }else{
    return 0;
 }
}#sub isDisplayTrue

############################# creating gcell database ##################################
sub create_gcell_db{
 my $noOfArg = @_;
 my ($gcellSizeX,$gcellSizeY,$ngcellX,$ngcellY) = (0,0,0,0);
 my ($_ngcellX, $_ngcellY)       = (10,10);
 if($_[0] eq "-h" || $_[0] eq "-help" || $_[0] eq "-HELP"){
    print"Usage: create_gcell -gx <gcell size across x>\n";
    print"                    -gy <gcell size across y>\n";
    print"                    -nx <number of gcells across x>\n";
    print"                    -ny <number of gcells across y>\n";
    return;
 }
 for(my $i=0; $i<$noOfArg; $i++){
     if($_[$i] eq "-gx"){$gcellSizeX = $_[$i+1];}
     if($_[$i] eq "-gy"){$gcellSizeY = $_[$i+1];}
     if($_[$i] eq "-nx"){$ngcellX = $_[$i+1];}
     if($_[$i] eq "-ny"){$ngcellY = $_[$i+1];}
 }

 my ($llx, $lly, $urx, $ury) = @{$DIE_ALREADY{dieArea}};
 ############### added because the instances outside the chip have no gcell ################
 foreach my $inst ( keys %COMP_ALREADY ) {
     my @loc = $CADB{$inst}->dbCadbGetLoc;
     if    ($loc[0] < $llx){$llx = $loc[0];} 
     elsif ($loc[0] > $urx){$urx = $loc[0];} 
     if    ($loc[1] < $lly){$lly = $loc[1];} 
     elsif ($loc[1] > $ury){$ury = $loc[1];} 
 }#foreach instance
 ###########################################################################################
 
 if ($gcellSizeX == 0) {
   if ($ngcellX == 0) {
     $ngcellX = $_ngcellX;
     $ngcellY = $_ngcellY;
   } 
   $gcellSizeX = ($urx - $llx + 1 )/$ngcellX;
   $gcellSizeY = ($ury - $lly + 1)/$ngcellY;
 } elsif ($ngcellX == 0) {
   $ngcellX = ceil( ($urx - $llx )/$gcellSizeX);
   $ngcellY = ceil( ($ury - $lly )/$gcellSizeY);
 }

 my ($x, $y) = ($llx, $lly);
 my ($numX, $numY) = (0,0);
 my ($x1, $y1);
 my ($pid);
 while ($y < $ury) {
     $y1 = $y + $gcellSizeY;
     if ($y1 > $ury) {$y1 = $ury;}
     while ($x < $urx) {
       $x1 = $x + $gcellSizeX;
       if ($x1 > $urx) {$x1 = $urx;}
       $GCellArray[$numX][$numY] = new GCell;
       $GCellArray[$numX][$numY]->dbgGcellSetBBox($x,$y, $x1,$y1);
       $pid = min($numX+1, $numY+1, $ngcellX - $numX, $ngcellY - $numY);
       $GCellArray[$numX][$numY]->dbgGcellSetPid($pid);
       $x = $x1; $numX++;
     } #while
     $y = $y1; $numY++;
     $x = $llx; $numX = 0;
 }
 foreach my $inst ( keys %COMP_ALREADY ) {
    my @loc = $CADB{$inst}->dbCadbGetLoc;
    my $gcellX = int ($loc[0]/$gcellSizeX);
    my $gcellY = int ($loc[1]/$gcellSizeY);
    $GCellArray[$gcellX][$gcellY]->dbgGcellAddInst($inst) if($gcellX < $ngcellX && $gcellY < $ngcellY);
 }#foreach instance
}#sub create_gcell_db

#####################################################################################################################
############################################ subroutine to Instance Name Display #########################################
#####################################################################################################################
sub display_instance_name {
 my $t0 = new Benchmark;
 my ($x, $y, $z) = (1, 1, 1);
 my ($block_var, $seq_var, $comb_var) = (\$x,\$y,\$z);
 $block_var = $block_checkbutton->cget(-variable) if(Exists $block_checkbutton);
 $seq_var = $seq_checkbutton->cget(-variable) if (Exists $seq_checkbutton);
 $comb_var = $comb_checkbutton->cget(-variable) if (Exists $comb_checkbutton);
 
 my @bbox = $design_worldcanvas->getView();
 my @ids = $design_worldcanvas->find("enclosed", @bbox);
 foreach my $id(@ids){
   my @tagList = $design_worldcanvas->gettags($id);
   if($tagList[0] eq "INSTANCE"){
      my @coords = $design_worldcanvas->coords($id);
      my $instText = $design_worldcanvas->createText($coords[0],$coords[1], -fill=>"white",-anchor=>"sw", -text=> $tagList[1]);
      $design_worldcanvas->itemconfigure($rect, -tag =>'INSTANCETEXT');
      $design_worldcanvas->addtag($tagList[1] , "withtag", $instText);
   }#if instance
 }#foreach existing id
 $t1 = new Benchmark;
 my $td = timediff($t1, $t0);
 print "Text display took:",timestr($td),"\n";

}#sub display_instance_name

#####################################################################################################################
############################################ subroutine to PinRects Display #########################################
#####################################################################################################################
sub instPinRectDisplay {
 my $instanceName = $_[0];
 my @instIdList = @_;
 my $MICRONFACTOR = $GLOBAL->dbGlobalGetMicronFactor;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 my @location = $CADB{$instanceName}->dbCadbGetLoc;
 my $orient =   $CADB{$instanceName}->dbCadbGetOrient;
 my $cellref =  $CADB{$instanceName}->dbCadbGetCellref;
 my @cellSize = $PLDB{$cellref}->dbMdbGetSize;
 my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
 my @pins = $PLDB{$cellref}->dbMdbGetPins;
 foreach my $pinName ( @pins ) {
    my @RECTS = $PLDB{$cellref}->dbMdbGetPinRect($pinName);
    my @POLY = $PLDB{$cellref}->dbMdbGetPinPolygon($pinName);
    foreach my $rectLine ( @RECTS ) {
       my ($layer, $rllx1, $rlly1, $rurx1, $rury1)=(split(/\s+/,$rectLine))[0,2,3,4,5];
       my $color = $PTDB{$layer}->dbTechGetLayerColor;
       my @PinRect = &xformCellPinToInstPin($location[0],$location[1],$cellOrigin[0], $cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$rllx1,$rlly1,$rurx1,$rury1);
       my $llx = 20 + $PinRect[0]*$MulFactor;
       my $lly = 20 + $PinRect[1]*$MulFactor;
       my $urx = 20 + $PinRect[2]*$MulFactor;
       my $ury = 20 + $PinRect[3]*$MulFactor;
       my $pinRect = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -state =>"normal", -fill => $color, -stipple => "gray12");
       $design_worldcanvas->itemconfigure($pinRect, -tag =>'PINRECT');
       $design_worldcanvas->addtag($pinName , "withtag", $pinRect);
       $design_worldcanvas->addtag($instanceName , "withtag", $pinRect);
       $design_worldcanvas->addtag($layer , "withtag", $pinRect);
    }# for each rectangle
    foreach my $polyLine ( @POLY ) {
       my @polygon = ();
       my @rect_or_polygon = (split(/\s+/,$polyLine));
       my $layer = shift @rect_or_polygon;
       shift @rect_or_polygon;
       my $color = $PTDB{$layer}->dbTechGetLayerColor;
       my @poly = &xformCellPinPolyToInstPin($location[0],$location[1],$cellOrigin[0], $cellOrigin[1],$orient,$cellSize[0],$cellSize[1],@rect_or_polygon);
       for (my $xx=0; $xx<=$#poly; $xx = $xx+2){
         my $llx = 20 + $poly[$xx]*$MulFactor;
         my $lly = 20 + $poly[$xx+1]*$MulFactor;
         push(@polygon, $llx,$lly);
       }
       my $pinRect = $design_worldcanvas->createPolygon(@polygon,-outline,$color, -state, "normal", -fill,$color,-stipple,"gray12");
       $design_worldcanvas->itemconfigure($pinRect, -tag =>'PINRECT');
       $design_worldcanvas->addtag($pinName , "withtag", $pinRect);
       $design_worldcanvas->addtag($instanceName , "withtag", $pinRect);
       $design_worldcanvas->addtag($layer , "withtag", $pinRect);
    }#for each polygon
 }#for each pins
}#sub instPinRectDisplay


#####################################################################################################################
######################################### subroutine to ObsRects Display ############################################
#####################################################################################################################
sub instObsRectDisplay{
 my $instanceName = $_[0];
 my $MICRONFACTOR = $GLOBAL->dbGlobalGetMicronFactor;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 my @instIdList = $design_worldcanvas->find("withtag", "INSTANCE");
 my @location = $CADB{$instanceName}->dbCadbGetLoc;
 my $orient =   $CADB{$instanceName}->dbCadbGetOrient;
 my $cellref =  $CADB{$instanceName}->dbCadbGetCellref;
 my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
 my @cellSize = $PLDB{$cellref}->dbMdbGetSize;
 my @OBS = $PLDB{$cellref}->dbMdbGetObs;
 foreach my $obsLine ( @OBS ) {
    my ($layer, $llx, $lly, $urx, $ury)=(split(/\s+/,$obsLine))[0,2,3,4,5];
    my $color = $PTDB{$layer}->dbTechGetLayerColor;
    my @obsRect = &xformCellPinToInstPin($location[0],$location[1],$cellOrigin[0],$cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$llx,$lly,$urx,$ury); 
    my $llx1 = 20 + $obsRect[0]*$MulFactor;
    my $lly1 = 20 + $obsRect[1]*$MulFactor;
    my $urx1 = 20 + $obsRect[2]*$MulFactor;
    my $ury1 = 20 + $obsRect[3]*$MulFactor;
    my $obsRect = $design_worldcanvas->createRectangle($llx1,$lly1,$urx1,$ury1, -outline=>$color, -state =>"normal", -fill => $color, -stipple => "gray50");
    $design_worldcanvas->itemconfigure($obsRect, -tag =>'OBSRECT');
    $design_worldcanvas->addtag($instanceName , "withtag", $obsRect);
    $design_worldcanvas->addtag($layer , "withtag", $obsRect);
 } 
}#sub instObsRectDisplay

#####################################################################################################################
############################################### subroutine to Nets Display ##########################################
#####################################################################################################################
sub design_nets_display {
 my $MICRONFACTOR = $GLOBAL->dbGlobalGetMicronFactor;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 foreach my $net ( keys %NETS_ALREADY ) {
    my $netType = $NADB{$net}->dbNadbGetNetType;
    if($netType == 0){
       if(exists $NETS_ROUTING_ALREADY{$net}) {
          my @data = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetRegularRoute;
          my @RRdefDiffState = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetRRCompareDefState; 
          my @fixed_route_data = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetFixedRoute;
          my @FRdefDiffState = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetFRCompareDefState; 
          foreach my $segment ( @data ) {
             my @seg = split(/\s+/,$segment);
             my @routeBox = xformNetSegToRouteBox($segment);
             my $llx = 20 + $routeBox[0]*$MulFactor;
             my $lly = 20 + $routeBox[1]*$MulFactor;
             my $urx = 20 + $routeBox[2]*$MulFactor;
             my $ury = 20 + $routeBox[3]*$MulFactor;
             if(exists $PTDB{$seg[0]} ) {
                my $color = $PTDB{$seg[0]}->dbTechGetLayerColor;
                my $defDiffState = shift @RRdefDiffState;
                if($defDiffState == 1){$color = "white";}
                my $netStripe = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -state =>"normal", -fill =>$color, -stipple => "gray12");
                $design_worldcanvas->itemconfigure($netStripe, -tag =>'NETTAG');
                $design_worldcanvas->addtag($net , "withtag", $netStripe);
                $design_worldcanvas->addtag($seg[0] , "withtag", $netStripe);
  
             }#if the metal layer exists in the technology
          }#foreach segment of routing
          foreach my $segment ( @fixed_route_data ) {
             my @seg = split(/\s+/,$segment);
             my @routeBox = xformNetSegToRouteBox($segment);
             my $llx = 20 + $routeBox[0]*$MulFactor;
             my $lly = 20 + $routeBox[1]*$MulFactor;
             my $urx = 20 + $routeBox[2]*$MulFactor;
             my $ury = 20 + $routeBox[3]*$MulFactor;
             if(exists $PTDB{$seg[0]} ) {
                my $color = $PTDB{$seg[0]}->dbTechGetLayerColor;
                my $defDiffState = shift @FRdefDiffState;
                if($defDiffState == 1){$color = "white";}
                my $netStripe = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -state =>"normal", -fill =>$color, -stipple => "gray12");
                $design_worldcanvas->itemconfigure($netStripe, -tag =>'NETTAG');
                $design_worldcanvas->addtag($net , "withtag", $netStripe);
                $design_worldcanvas->addtag($seg[0] , "withtag", $netStripe);
             }#if the metal layer exists in the technology
          }#foreach segment of routing
       }# if routing data is present
    }#if net 
 }#for all nets in the database
}#sub design_nets_display

#####################################################################################################################
############################################ subroutine to SPecialNets Display ######################################
#####################################################################################################################
sub design_spnets_display{
 my $MICRONFACTOR = $GLOBAL->dbGlobalGetMicronFactor;
 my $MulFactor = $MICRONFACTOR/$DEF_DATABASE_UNIT;
 foreach my $net ( keys %NETS_ALREADY ) {
    my $netType = $NADB{$net}->dbNadbGetNetType;
    if(($netType == 1) || ($netType == 2)) {
        if(exists $NETS_ROUTING_ALREADY{$net}) { 
           my @data = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetSpecialRoute;
           my @SRdefDiffState = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetSRCompareDefState; 
           my @fixed_route_data = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetFixedRoute;
           my @FRdefDiffState = $NETS_ROUTING_ALREADY{$net}->dbNetRoutingDBGetFRCompareDefState; 
           foreach my $segment ( @data ) {
              my @seg = split(/\s+/,$segment);
              my @routeBox = xformNetSegToSpecialRouteBox($segment);
              my $llx = 20 + $routeBox[0]*$MulFactor;
              my $lly = 20 + $routeBox[1]*$MulFactor;
              my $urx = 20 + $routeBox[2]*$MulFactor;
              my $ury = 20 + $routeBox[3]*$MulFactor;
              if (exists $PTDB{$seg[0]} ) {
                 my $color = $PTDB{$seg[0]}->dbTechGetLayerColor;
                 my $defDiffState = shift @SRdefDiffState;
                 if($defDiffState == 1){$color = "white";}
                 my $spNetStripe = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -state =>"normal", -fill =>$color, -stipple => "gray12");
                 $design_worldcanvas->itemconfigure($spNetStripe, -tag =>'SPNETTAG');
                 $design_worldcanvas->addtag($net , "withtag", $spNetStripe);
                 $design_worldcanvas->addtag($seg[0] , "withtag", $spNetStripe);
              }
           }
           foreach my $segment ( @fixed_route_data ) {
              my @seg = split(/\s+/,$segment);
              my @routeBox = xformNetSegToSpecialRouteBox($segment);
              my $llx = 20 + $routeBox[0]*$MulFactor;
              my $lly = 20 + $routeBox[1]*$MulFactor;
              my $urx = 20 + $routeBox[2]*$MulFactor;
              my $ury = 20 + $routeBox[3]*$MulFactor;
              if (exists $PTDB{$seg[0]} ) {
                 my $color = $PTDB{$seg[0]}->dbTechGetLayerColor;
                 my $defDiffState = shift @FRdefDiffState;
                 if($defDiffState == 1){$color = "white";}
                 my $spNetStripe = $design_worldcanvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -state =>"normal", -fill =>$color, -stipple => "gray12");
                 $design_worldcanvas->itemconfigure($spNetStripe, -tag =>'SPNETTAG');
                 $design_worldcanvas->addtag($net , "withtag", $spNetStripe);
                 $design_worldcanvas->addtag($seg[0] , "withtag", $spNetStripe);
              }
           }
        }#if exists
    }#if type is 1 or 2
 }#foreach net
}#sub design_spnets_display

#####################################################################################################################
###################################### Subroutine to ZoomIn and ZoomOut #############################################
#####################################################################################################################
sub design_ZoomIn_ZoomOut_new{
 my @arg = @_;
 my $canvas = $arg[0];
 my @view_bbox = @{$arg[1]};
 #$canvas->CanvasFocus;
 #$canvas->configure(-bandColor => 'red');
 $canvas->CanvasBind('<3>'               => sub {$canvas->configure(-bandColor => "");
                                                 $canvas->configure(-bandColor => 'red');
                                                 $canvas->rubberBand(0)});
 $canvas->CanvasBind('<B3-Motion>'       => sub {$canvas->rubberBand(1)});
 $canvas->CanvasBind('<ButtonRelease-3>' => sub {my @box = $canvas->rubberBand(2);
                                                 $canvas->viewArea(@box, -border => 0);
                                                 #my @bbox = $canvas->getView();
                                                 &filterd_instance_display(@box);
                                                 });
 $canvas->CanvasBind('<2>'               => sub {$canvas->viewArea(@view_bbox, -border => 0);
                                                 #&delete_filtered_instance(@view_bbox);
                                                 &delete_all_zoomFit;
                                                 });               

 $canvas->CanvasBind('<i>' => sub {$canvas->zoom(1.25);
                                   my @bbox = $canvas->getView();
                                   &filterd_instance_display(@bbox);
                                   });
 $canvas->CanvasBind('<o>' => sub {$canvas->zoom(0.80);
                                   my @bbox = $canvas->getView();
                                   &delete_filtered_instance(@bbox);
                                   });
 $canvas->CanvasBind('<f>' => sub {$canvas->viewArea(@view_bbox, -border => 0);
                                   &delete_all_zoomFit;
                                  });

 $top->bind('WorldCanvas',    '<Up>' => "");
 $top->bind('WorldCanvas',  '<Down>' => "");
 $top->bind('WorldCanvas',  '<Left>' => "");
 $top->bind('WorldCanvas', '<Right>' => "");

 $canvas->CanvasBind('<KeyPress-Up>'   => sub {$canvas->panWorld(0,  200);});
 $canvas->CanvasBind('<KeyPress-Down>' => sub {$canvas->panWorld(0, -200);});
 $canvas->CanvasBind('<KeyPress-Left>' => sub {$canvas->panWorld(-200, 0);});
 $canvas->CanvasBind('<KeyPress-Right>'=> sub {$canvas->panWorld( 200, 0);});

}#sub design_ZoomIn_ZoomOut_new

####################################################################################################
sub dbWGuidatabase2WGui {
 my $dbX = $_[0];
 my $dbY = $_[1];
 my $guiX = 20 + ($dbX/$DEF_DATABASE_UNIT)*$MICRONFACTOR;
 my $guiY = 20 + ($dbY/$DEF_DATABASE_UNIT)*$MICRONFACTOR;
 return($guiX,$guiY);
}#sub dbWGuidatabase2WGui

sub dbfWGuiMicron2WGui {
 my $dbX = $_[0];
 my $dbY = $_[1];
 my $mufx = $GLOBAL->dbGlobalGetMicronFactor;
 my $guiX = 20 + ($dbX)*$mufx;
 my $guiY = 20 + ($dbY)*$mufx;
 return($guiX,$guiY);
}#sub dbfWGuiMicron2WGui

sub dbfWGuiWGui2Micron {
 my $dbX = $_[0];
 my $dbY = $_[1];
 
 my $mufx = $GLOBAL->dbGlobalGetMicronFactor;
 my $micX = sprintf("%.3f",($dbX -20)/$mufx) ;
 my $micY = sprintf("%.3f",($dbY -20)/$mufx);
 return($micX,$micY);
}#sub dbfWGuiWGui2Micron

sub dbWGuiCreatePin {
 my $originX = $_[0];
 my $originY = $_[1];
 my $orient = $_[2];
 my $dir = $_[3];
 my ($x1,$x2,$x3,$y1,$y2,$y3);
 
 if($dir eq "OUTPUT" || $dir eq "output"){
    if($orient eq "E") {
       $x1 = $originX ;
       $x2 = $originX + 2 ;   
       $x3 = $originX ;   
       $y1 = $originY + 1;
       $y2 = $originY;
       $y3 = $originY - 1;
    }elsif ( $orient eq "W" ) {
         $x1 = $originX;
         $x2 = $originX - 2;   
         $x3 = $originX;   
         $y1 = $originY + 1;
         $y2 = $originY;
         $y3 = $originY - 1;
    }elsif($orient eq "S"){
         $x1 = $originX -1;
         $x2 = $originX;   
         $x3 = $originX + 1;   
         $y1 = $originY;
         $y2 = $originY + 2;
         $y3 = $originY;
    }elsif($orient eq "N"){
         $x1 = $originX -1;
         $x2 = $originX;     
         $x3 = $originX + 1;
         $y1 = $originY;
         $y2 = $originY - 2;
         $y3 = $originY;
    }
 }elsif($dir eq "INPUT" || $dir eq "input"){
    if($orient eq "W"){
       $x1 = $originX - 2;
       $x2 = $originX;
       $x3 = $originX - 2;
       $y1 = $originY + 1;
       $y2 = $originY;
       $y3 = $originY - 1;
    }elsif($orient eq "E"){
         $x1 = $originX + 2;
         $x2 = $originX;
         $x3 = $originX + 2;
         $y1 = $originY + 1;
         $y2 = $originY;
         $y3 = $originY - 1;
    }elsif($orient eq "N"){
         $x1 = $originX -1;
         $x2 = $originX;
         $x3 = $originX + 1;
         $y1 = $originY - 2;
         $y2 = $originY;
         $y3 = $originY -2;
                          }
    elsif($orient eq "S"){
         $x1 = $originX -1;
         $x2 = $originX;
         $x3 = $originX + 1;
         $y1 = $originY + 2;
         $y2 = $originY;
         $y3 = $originY + 2;
    }
 }elsif($dir eq "INOUT" || $dir eq "inout"){
    if($orient eq "W"){
         $x1 = $originX - 2;
         $x2 = $originX;
         $x3 = $originX - 2;
         $y1 = $originY + 1;
         $y2 = $originY;
         $y3 = $originY - 1;
    }elsif($orient eq "E"){
         $x1 = $originX + 2;
         $x2 = $originX;
         $x3 = $originX + 2;
         $y1 = $originY + 1;
         $y2 = $originY;
         $y3 = $originY - 1;
    }elsif($orient eq "N"){
         $x1 = $originX -1;
         $x2 = $originX;
         $x3 = $originX + 1;
         $y1 = $originY - 2;
         $y2 = $originY;
         $y3 = $originY -2;
    }elsif($orient eq "S"){
         $x1 = $originX -1;
         $x2 = $originX;
         $x3 = $originX + 1;
         $y1 = $originY + 2;
         $y2 = $originY;
         $y3 = $originY + 2;
    }
 }else {print "WARN : GUI-001 : unknown direction of the pin\n"; }
 
 return($x1,$y1,$x2,$y2,$x3,$y3);
}# sub dbWGuiCreatePin


########################################################################################################
######################################### To query Pin Layers ##########################################
########################################################################################################
sub layerQueryDisplayPopUp{
 $GLOBAL->dbfGlobalSetLayerQueryPopup(1);
 $layerQueryPopUpWin = MainWindow->new();
 $layerQueryPopUpWin->title("Draw Pin Rectangles");
 $layerQueryPopUpWin->protocol('WM_DELETE_WINDOW',sub{ $GLOBAL->dbfGlobalSetLayerQueryPopup(0);$layerQueryPopUpWin->destroy;$layerQueryDisVar = 0;});
 my $top_frame = $layerQueryPopUpWin->Frame(-relief=>'sunken',-borderwidth=>2)->pack(-side => 'top',-expand=>1,-fill=>'both');
 my $bottom_frame = $layerQueryPopUpWin->Frame(-relief=>'sunken',-borderwidth=>2)->pack(-side => 'top',-expand=>1,-fill=>'both');
 
 my $topFrame1 = $top_frame->Frame(-relief=>'raised',-borderwidth=>2)->pack(-side => 'top');
 my $topFrame2 = $top_frame->Frame()->pack(-side => 'top', -expand=>1, -fill=>'x');
 my $topFrame3 = $top_frame->Frame()->pack(-side => 'top', -expand=>1, -fill=>'x');
 my $topFrame4 = $top_frame->Frame()->pack(-side => 'top', -expand=>1, -fill=>'x');
 my $topFrame5 = $top_frame->Frame()->pack(-side => 'top');
 
 #my ($pinDisVar,$obsDisVar) = (0,0);
 ####################### making Checkbuttons for Routing, Cut & Masterslice layers ############################
 $topFrame1->Checkbutton(-text =>"PinRect" ,-variable => \$pinDisVar, -onvalue => 1, -offvalue => 0)->pack(-side=>'left');
 $topFrame1->Checkbutton(-text =>"ObsRect" ,-variable => \$obsDisVar, -onvalue => 1, -offvalue => 0)->pack(-side=>'left');

 my @layers = sort{$RML{$a}<=>$RML{$b}}(keys(%RML));
 #my @varOnTheFly = (); 
 for(my $j = 0; $j<=$#layers; $j++){
     if($#layers < 0){last;}
     my $type = $PTDB{$layers[$j]}->dbTechGetLayerType;
     my $layerNo = $PTDB{$layers[$j]}->dbTechGetLayerNum;
     if($type eq "ROUTING"){                 
        $topFrame2->Checkbutton(-text => $layers[$j],-variable => \$varOnTheFly[$j],-onvalue => 1, -offvalue => 0,
                                -command => sub{
                                                setBusyCursor();                    
                                                if($varOnTheFly[$layerNo]==1){
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'display'); 
                                                }else{
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'hide'); 
                                                }
                                                unsetBusyCursor();                    
                                })->pack(-side => 'left', -anchor =>'w', -fill=>'x' );
     }
     if($type eq "CUT"){ 
        $topFrame3->Checkbutton(-text => $layers[$j],-variable => \$varOnTheFly[$j], -onvalue => 1, -offvalue => 0,
                                -command => sub{
                                                setBusyCursor();                    
                                                if($varOnTheFly[$layerNo]==1){                        
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'display'); 
                                                }else{
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'hide'); 
                                                }
                                                unsetBusyCursor();                    
                                })->pack(-side => 'left', -anchor =>'w', -fill=>'x' );
     }
     if($type eq "MASTERSLICE"){
        $topFrame4->Checkbutton(-text => $layers[$j],-variable => \$varOnTheFly[$j], -onvalue => 1, -offvalue => 0,
                                -command => sub{
                                                setBusyCursor();                    
                                                if($varOnTheFly[$layerNo]==1){
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'display'); 
                                                }else {
                                                   displayLayerRectAndObs($layers[$layerNo], $pinDisVar, $obsDisVar, 'hide'); 
                                                }
                                                unsetBusyCursor();                    
                                })->pack(-side => 'left', -anchor =>'w', -fill=>'x' );}
 }#for 
 $topFrame5->Button(-text=>'Delete All',-padx=>0,-pady=>0,
                    -command =>sub {
                                     setBusyCursor();                    
                                     for(my $i = 0 ; $i <= $#layers; $i++){
                                         $varOnTheFly[$i] = 0;
                                     }
                                     ($pinDisVar, $obsDisVar) = (0, 0);
                                     $design_worldcanvas->itemconfigure("PINRECT", -fill=>"", -outline=>"");
                                     $design_worldcanvas->itemconfigure("OBSRECT", -fill=>"", -outline=>"");
                                     unsetBusyCursor();                    
                    })->pack(-side => 'left');
 $topFrame5->Button(-text=>'Select All',-padx=>0,-pady=>0,
                    -command =>sub {
                                     setBusyCursor();                    
                                     if($pinDisVar == 1){
                                        my @instIdList = $design_worldcanvas->find("withtag", "PINRECT");
                                        foreach my $id (@instIdList) {
                                          my @tagList = $design_worldcanvas->gettags($id);
                                          if(exists $RML{$tagList[3]}){
                                             my $layerColor = $PTDB{$tagList[3]}->dbTechGetLayerColor;
                                             $design_worldcanvas->itemconfigure($id, -fill=>$layerColor, -outline=>$layerColor);
                                          }
                                        }
                                     }
                                     if($obsDisVar == 1){
                                        my @instIdList = $design_worldcanvas->find("withtag", "OBSRECT");
                                        foreach my $id (@instIdList) {
                                          my @tagList = $design_worldcanvas->gettags($id);
                                          if(exists $RML{$tagList[2]}){
                                             my $layerColor = $PTDB{$tagList[2]}->dbTechGetLayerColor;
                                             $design_worldcanvas->itemconfigure($id, -fill=>$layerColor, -outline=>$layerColor);
                                          }
                                        }
                                     }
                                     for(my $i = 0 ; $i <= $#layers; $i++){
                                         $varOnTheFly[$i] =1 ;
                                     }
                                     unsetBusyCursor();                    
                    })->pack(-side => 'left');
 
}#sub layerQueryDisplayPopUp

sub displayLayerRectAndObs{
 my $layer_name = $_[0];
 my $pin_rect_dis_var = $_[1];
 my $pin_obs_dis_var = $_[2];
 my $operation = $_[3];
 #print "$layer_name | $pin_obs_dis_var | $pin_obs_dis_var | $operation\n";

 my $layerColor = "";
 if($operation eq 'display'){
    $layerColor = $PTDB{$layer_name}->dbTechGetLayerColor;
 }

 if($pin_rect_dis_var == 1){
    my @instIdList = $design_worldcanvas->find("withtag", "PINRECT");
    foreach my $id (@instIdList) {
      my @tagList = $design_worldcanvas->gettags($id);
      if($tagList[3] eq $layer_name){
         $design_worldcanvas->itemconfigure($id, -fill=>$layerColor, -outline=>$layerColor);
      }
    }
 }
 if($pin_obs_dis_var == 1){
    my @instIdList = $design_worldcanvas->find("withtag", "OBSRECT");
    foreach my $id (@instIdList) {
      my @tagList = $design_worldcanvas->gettags($id);
      if($tagList[2] eq $layer_name){
         $design_worldcanvas->itemconfigure($id, -fill=>$layerColor, -outline=>$layerColor);
      }
    }
 }
}#sub displayLayerRectAndObs

#########################################################################################################################################
######################################################## Display Queries for Instance/Nets ############################################## 
#########################################################################################################################################
sub instanceQueryDisplayPopUp{
 $instQueryPopUpWin = MainWindow->new();
 $instQueryPopUpWin->title ("Highlight Selected Net/Instance");
 $instQueryPopUpWin->protocol('WM_DELETE_WINDOW',sub{ $GLOBAL->dbfGlobalSetInstanceQueryPopup(0);$instQueryPopUpWin->destroy;$instQueryDisVar = 0;});
 my $net_Frame1= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 my $net_Frame2= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 my $net_Frame3= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 #-------------------------------------------------------------------------------------------------#
 my $instance_Frame1= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 my $instance_Frame2= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 my $instance_Frame3= $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x');
 #-----------------------------------------------------------------------------------------------------#
 my $RlayerInsPin_Frame2 = $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x'); 
 my $ClayerInsPin_Frame2 = $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x'); 
 my $MlayerInsPin_Frame2 = $instQueryPopUpWin->Frame()->pack(-side => 'top',-anchor=>'n', -expand=>1, -fill=>'x'); 
 #-------------------------------------------------------------------------------------------------------#
 my ($searchNetStr,$searchInstStr,$netvar,$xn,$xn1)  = ("","","","","");
 
 $net_Frame1->Label(-text => "NetName")->pack(-side =>'left', -anchor => 'w');
 $net_Frame1->Entry(-textvariable =>\$searchNetStr,)->pack(-side =>'left',-fill => 'x', -expand=> '1' );
 $net_Frame2->Radiobutton(-variable=>\$netvar,-value=>"Layout",-text=>"LAYOUT",)->pack(-side =>"left");
 $net_Frame2->Radiobutton(-variable=>\$netvar,-value=>"NetList",-text=>"NETLIST")->pack(-side =>"left");
 $net_Frame3->Radiobutton(-variable =>\$xn,-value => "Select",-text => "Select",
                          -command => sub {setBusyCursor(); 
                                           if ($netvar eq "Layout"){&highlight_queryNet($searchNetStr);}
                                           if ($netvar eq "NetList"){&highlight_insts_pins_queryNet($searchNetStr);}
                                           unsetBusyCursor();
                                           })->pack(-side =>"left");
 $net_Frame3->Radiobutton(-variable =>\$xn,-value => "DeSelect",-text => "DeSelect",
                          -command => sub{ setBusyCursor();
                                           if ($netvar eq "Layout"){$design_worldcanvas->delete(NETHIGHLIGHT);}
                                           if ($netvar eq "NetList"){$design_worldcanvas->delete(INSTANCEHIGHLIGHT);} 
                                           unsetBusyCursor();
                                           })->pack(-side =>"left");
 
 $instance_Frame1->Label(-text => "InstanceName")->pack(-side =>'left', -anchor => 'w');
 $instance_Frame1->Entry(-textvariable =>\$searchInstStr,)->pack(-side =>'left',-fill => 'x', -expand=> '1' );
 $instance_Frame3->Label(-text => "Select the METAL LAYER for Given Instance")->pack(-side =>'left', -anchor => 'w');
 $instance_Frame2->Radiobutton(-variable =>\$xn1,-value => "Select",-text => "Select",
                               -command => sub {setBusyCursor(); &highlight_queryInstance($searchInstStr); unsetBusyCursor();}
                                                 )->pack(-side =>"left");
 $instance_Frame2->Radiobutton(-variable =>\$xn1,-value => "DeSelect",-text => "DeSelect",
                               -command => sub{setBusyCursor(); $design_worldcanvas->delete(SELECTINSTANCE); unsetBusyCursor();}
                                                )->pack(-side =>"left");
 ####################### making Checkbuttons for Routing, Cut & Masterslice layers ############################
 my @layers = sort{$RML{$a}<=>$RML{$b}}(keys(%RML));
 for (my $j = 0; $j<=$#layers; $j++){
      if ($#layers < 0){last;}
      my $type = $PTDB{$layers[$j]}->dbTechGetLayerType;
      if ($type eq "ROUTING"){                 
          $RlayerInsPin_Frame2->Radiobutton(-variable =>\$t,-value => $layers[$j],-text => $layers[$j],
                                            -command => sub {
                                                             setBusyCursor();
                                                             if ($t== 0){$design_worldcanvas->delete(METALRECTS);
                                                                        &highlight_pinlayerOfQueryInstance($searchInstStr,$t);}
                                                             unsetBusyCursor();
                                                              })->pack(-side =>"left");}
      if ($type eq "CUT"){ 
          $ClayerInsPin_Frame2->Radiobutton(-variable =>\$t,-value => $layers[$j],-text => $layers[$j],
                                            -command => sub {
                                                             #$top->Busy;
                                                             setBusyCursor();
                                                             if ($t== 0){$design_worldcanvas->delete(METALRECTS);
                                                                         &highlight_pinlayerOfQueryInstance($searchInstStr,$t)};
                                                             #$top->Unbusy;
                                                             unsetBusyCursor();
                                                              })->pack(-side =>"left");}
      if ($type eq "MASTERSLICE"){
          $MlayerInsPin_Frame2->Radiobutton(-variable =>\$t,-value => $layers[$j],-text => $layers[$j],
                                            -command => sub { 
                                                             setBusyCursor();
                                                             if ($t== 0){$design_worldcanvas->delete(METALRECTS);
                                                                         &highlight_pinlayerOfQueryInstance($searchInstStr,$t);}
                                                             unsetBusyCursor();
                                                              })->pack(-side =>"left");}
 }#for j
}#sub instanceQueryDisplayPopUp

################################################### highlight query net ############################################################## 
sub highlight_queryNet{
 my $netStr= $_[0];
 my @array_nets  = split(/\,/,$netStr);
 my @netIdList = $design_worldcanvas->find("withtag", "NETTAG");
 foreach my $id (@netIdList) {
   my @tagList = $design_worldcanvas->gettags($id);
   foreach my $pat (@array_nets){
     if($tagList[1] =~ /$pat/){
        my @rect_coords = $design_worldcanvas->coords($id);
        $design_worldcanvas->createRectangle(@rect_coords,-outline=>"yellow",-tags=>"NETHIGHLIGHT",-fill=>"yellow",-stipple=>"gray12");
     }#if pattern matched
   }#foreach pattern
 }#foreach id
}#sub highlight_queryNet

############################################### highlight query net's Instance and Pins connected ######################################## 
sub highlight_insts_pins_queryNet {
 my $DBSCALEFACTOR = $DEF_DATABASE_UNIT;
 my $netStr = $_[0];
 my @array_nets  = split(/\,/,$netStr);
 my @netIdList = $design_worldcanvas->find("withtag", "NETTAG");
 foreach my $id (@netIdList) {
   my @tagList = $design_worldcanvas->gettags($id);
   foreach my $pat (@array_nets){
     if($tagList[1] =~ /$pat/){
        my $netName = $tagList[1];
        foreach my $instance ( keys %{$NETS_ALREADY{$netName}}){
           if($instance eq "PIN"){
           }else{  
              my $pinName = $NETS_ALREADY{$netName}{$instance};
              if(exists $COMP_ALREADY{$instance} ) {
                 my $cellref = $CADB{$instance}->dbCadbGetCellref;
                 my @instLoc = $CADB{$instance}->dbCadbGetLoc;
                 my $orient = $CADB{$instance}->dbCadbGetOrient;
                 if(exists $PLDB{$cellref}){
                    my @cellSize = $PLDB{$cellref}->dbMdbGetSize;
                    my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
                    my @pins =     $PLDB{$cellref}->dbMdbGetPins;
                    foreach my $p(@pins){
                       if($p eq $pinName){
                          my @pinRects = $PLDB{$cellref}->dbMdbGetPinRect($pinName);
                          my $pinDire = $PLDB{$cellref}->dbMdbGetPinDir($pinName);
                          foreach $rectLine ( @pinRects ) {
                             my ($layer, $rllx1, $rlly1, $rurx1, $rury1)=(split(/\s+/,$rectLine))[0,2,3,4,5];
                             ######## #### changing the orientation of Pin Rectangles according to Instance orientation ######################## 
                             my @PinRect = &xformCellPinToInstPin($instLoc[0],$instLoc[1],$cellOrigin[0],$cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$rllx1,$rlly1,$rurx1,$rury1);
                             my ($llx1,$lly1) = dbWGuidatabase2WGui($PinRect[0],$PinRect[1]);  # Multiplying with database#  
                             my ($urx1,$ury1) = dbWGuidatabase2WGui($PinRect[2],$PinRect[3]);  # multiplication Factor    #
                             $design_worldcanvas->createRectangle($llx1,$lly1,$urx1,$ury1, -outline=>"yellow", -tags=>"INSTANCEHIGHLIGHT", -state =>"normal", -fill => "", -stipple => "gray12");
                          }# for rectangle
                          my $fortext = shift @pinRects;
                          my ($layer, $llx2, $lly2, $urx2, $ury2)=(split(/\s+/,$fortext))[0,2,3,4,5];
                          my @TextRect = &xformCellPinToInstPin($instLoc[0],$instLoc[1],$cellOrigin[0],$cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$llx2,$lly2,$urx2,$ury2);
                          ($llx2,$lly2) = dbWGuidatabase2WGui($TextRect[0],$TextRect[1]);  # Multiplying with database#  
                          ($urx2,$ury2) = dbWGuidatabase2WGui($TextRect[2],$TextRect[3]);            
                          my $midx = ($llx2 + $urx2)/2;
                          my $midy = ($lly2 + $ury2)/2;
                          if ($pinDire == 0){$text = "X";}
                          elsif ($pinDire == 1){$text = "O";}
                          $design_worldcanvas->createText($midx,$midy, -text=>$text, -fill=>"yellow", -anchor=>"sw", -tags=>"INSTANCEHIGHLIGHT" );
                       }# if pin Name
                    }#for each pinName
                 }#if instance exists
              }#if exists cellref
           }#if inst not PIN
        }#foreach instance
     }#if pattern matched
   }#foreach pattern
 }#foreach id
}#sub highlight_insts_pins_queryNet                           

##################################################### highlight query Instance ################################################# 
sub highlight_queryInstance {
 my $instStr = $_[0];
 my @array_inst  = split(/\,/,$instStr);
 my @instIdList = $design_worldcanvas->find("withtag", "INSTANCE");
 foreach my $id (@instIdList) {
   my @tagList = $design_worldcanvas->gettags($id);
   foreach my $pat (@array_inst){
     if($tagList[1] =~ /$pat/){
        my @rect_coords = $design_worldcanvas->coords($id);
        $design_worldcanvas->createRectangle(@rect_coords, -outline=>"yellow", -tags=>"SELECTINSTANCE", -state =>"normal", -fill => "", -stipple => "gray12");
     }#if pattern matched
   }#foreach pattern
 }#foreach id
}#sub  highlight_queryInstance
  
sub highlight_pinlayerOfQueryInstance{
 my $instStr = $_[0];
 my $layerName = $_[1];
 my @array_inst  = split(/\,/,$instStr);
 my @instIdList = $design_worldcanvas->find("withtag", "INSTANCE");
 foreach my $id (@instIdList) {
   my @tagList = $design_worldcanvas->gettags($id);
   foreach my $pat (@array_inst){
     if($tagList[1] =~ /$pat/){
        my $instanceName = $tagList[1];
        if(exists $COMP_ALREADY{$instanceName} ) {
           my $cellref = $CADB{$instanceName}->dbCadbGetCellref;
           my @instLoc = $CADB{$instanceName}->dbCadbGetLoc;
           my $orient = $CADB{$instanceName}->dbCadbGetOrient;
           if(exists $PLDB{$cellref} ) {
              my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
              my @cellSize = $PLDB{$cellref}->dbMdbGetSize;
              my @pins = $PLDB{$cellref}->dbMdbGetPins;
              foreach my $pinName (@pins ) {
                 my @RECTS = $PLDB{$cellref}->dbMdbGetPinRect($pinName);
                 foreach $rectLine ( @RECTS ) {
                    ($layer, $rllx1, $rlly1, $rurx1, $rury1)=(split(/\s+/,$rectLine))[0,2,3,4,5];
                     if ($layer eq $layerName){
                         my $color = $PTDB{$layer}->dbTechGetLayerColor;
                         my @PinRect = &xformCellPinToInstPin($instLoc[0],$instLoc[1],$cellOrigin[0],$cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$rllx1,$rlly1,$rurx1,$rury1);
                         my ($llx1,$lly1) = dbWGuidatabase2WGui($PinRect[0],$PinRect[1]);  # Multiplying with database#  
                         my ($urx1,$ury1) = dbWGuidatabase2WGui($PinRect[2],$PinRect[3]);  # multiplication Factor    #
                         $design_worldcanvas->createRectangle($llx1,$lly1,$urx1,$ury1, -outline=>$color,  -fill => $color,-tags=>"METALRECTS", -stipple => "gray12");
                     }#if layer found
                 }# foreach rectangle
              }#foreach pin
           }#if cellref found
        }#if Instance exists
     }#if pattern matched
   }#foreach pattern
 }#foreach id
}#sub highlight_pinlayerOfQueryInstance  

########################################################################################################
###### To show the Instance/Port/Net/SpecialNet Name and highlight by just click LMB on Instance #######
########################################################################################################
sub textDisplayWithKeyMouseBind{
 my @arg = @_;
 my $Canvas = $arg[0];
 $Canvas->CanvasBind("<t><1>"=> [sub {&callTextDisplayWithKeyMouseBind(@arg); }]);
 $Canvas->CanvasBind("<t><B1-ButtonRelease>"=> [sub{$Canvas->delete(TEMPTEXT);}]);
}#sub textDisplayWithKeyMouseBind

sub callTextDisplayWithKeyMouseBind {
 my @arg = @_;
 my $canvas = $arg[0];
 
 my @xy = $canvas->eventLocation();
 my $x = $xy[0];
 my $y = $xy[1];
 my @id      = $canvas->find(qw/withtag current/);
 my @tagList = $canvas->gettags($id[0]);
 my @coords  = $canvas->coords($id[0]);
 if ($tagList[0] eq "INSTANCE"){
     $canvas->createRectangle(@coords, -tags=>"TEMPTEXT", -outline=>"green");
     $canvas->createText($x,$y, -text=>$tagList[1] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }elsif($tagList[0] eq "PORTS"){
     $canvas->createPolygon(@coords, -tags=>"TEMPTEXT", -outline=>"green", -fill =>"yellow3", -stipple =>"gray12");
     $canvas->createText($x,$y, -text=>$tagList[1] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }elsif($tagList[0] eq "NETTAG"){
     $canvas->createRectangle(@coords, -tags=>"TEMPTEXT", -outline=>"green", -fill=>'white', -stipple=>"gray12");
     $canvas->createText($x,$y, -text=>$tagList[1] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }elsif($tagList[0] eq "SPNETTAG"){
     $canvas->createRectangle(@coords, -tags=>"TEMPTEXT", -outline=>"green", -fill=>'white', -stipple=>"gray12");
     $canvas->createText($x,$y, -text=>$tagList[1] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }elsif($tagList[0] eq "PINRECT"){
     if(@coords == 4){
        $canvas->createRectangle(@coords, -tags=>"TEMPTEXT", -outline=>"green",  -stipple=>"gray12");
     }else{
        $canvas->createPolygon(@coords, -tags=>"TEMPTEXT", -outline=>"green", -stipple =>"gray12");
     }
     $canvas->createText($x,$y, -text=>"PIN ".$tagList[1]." ".$tagList[3] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }elsif($tagList[0] eq "OBSRECT"){
     if(@coords == 4){
        $canvas->createRectangle(@coords, -tags=>"TEMPTEXT", -outline=>"green",  -stipple=>"gray12");
     }else{
        $canvas->createPolygon(@coords, -tags=>"TEMPTEXT", -outline=>"green", -stipple =>"gray12");
     }
     $canvas->createText($x,$y, -text=>"OBS ".$tagList[2] ,-anchor=>"sw",-tags=>"TEMPTEXT",-fill=>"white",-font=>"Times 12");
 }
}#sub callTextDisplayWithKeyMouseBind
#--------------------------------------#

##########################################################################################################
######################## Display the PinRects for selected Instance by p+scrollingLMB #################### 
##########################################################################################################
sub pinRectAndObsDisplayWithKeyMouseBind{
 my $canvas = $_[0];
 #$canvas->configure(-bandColor => 'purple');
 $canvas->CanvasBind('<p><1>'               => sub {$canvas->configure(-bandColor => "");
                                                    $canvas->configure(-bandColor => 'purple');
                                                    $canvas->rubberBand(0);});
 $canvas->CanvasBind('<p><B1-Motion>'        => sub {$canvas->rubberBand(1)});
 $canvas->CanvasBind('<p><B1-ButtonRelease>' => sub {my @box = $canvas->rubberBand(2);
                                                     setBusyCursor();
                                                     my @ids = $canvas->find('enclosed', @box);
                                                     foreach my $id (@ids) {
                                                          my @tagList = $canvas->gettags($id);
                                                          if($tagList[0] eq "INSTANCE"){ 
                                                             &instPinRectDisplay($tagList[1]);
                                                             &instObsRectDisplay($tagList[1]);
                                                             $pinDisVar = 1;
                                                             $obsDisVar = 1;
                                                             my $cnt = 0;
                                                             foreach (keys %RML){
                                                               $varOnTheFly[$cnt] =  1;
                                                               $cnt++;
                                                             } 
                                                          }
                                                      }
                                                      unsetBusyCursor();
                                                     });
 $canvas->CanvasBind('<p><2>'        => sub {$canvas->delete(PINRECT,OBSRECT)});
}#sub pinRectAndObsDisplayWithKeyMouseBind

#################################################################################################################
########################################## pin2pin Fly Lines display ############################################ 
#################################################################################################################
sub pin2pinFlyLinesDisplayWithKeyMouseBind {
 my $canvas = $_[0];
 $canvas->CanvasBind('<l><1>'               => sub {$canvas->configure(-bandColor => "");
                                                    $canvas->configure(-bandColor => 'orange');
                                                    $canvas->rubberBand(0);});
 $canvas->CanvasBind('<l><B1-Motion>'        => sub {$canvas->rubberBand(1)});
 $canvas->CanvasBind('<l><B1-ButtonRelease>' => sub {my @box = $canvas->rubberBand(2);
                                                     setBusyCursor();
                                                     my @ids = $canvas->find('enclosed', @box);
                                                     foreach my $id (@ids) {
                                                          my @tagList = $canvas->gettags($id);
                                                          if($tagList[0] eq "INSTANCE"){ 
                                                             &call_display_pin2pin_flyLines($tagList[1],"FLYLINES");
                                                          }
                                                     }
                                                     unsetBusyCursor();
                                                    });
 $canvas->CanvasBind('<l><2>'        => sub {$canvas->delete(FLYLINES)});
#----------------------------------------------------------------------#
 $canvas->CanvasBind("<L><1>"=> [sub {
                                      my @xy = $canvas->eventLocation();
                                      my $x = $xy[0];
                                      my $y = $xy[1];
                                      my @id      = $canvas->find(qw/withtag current/);
                                      my @tagList = $canvas->gettags($id[0]);
                                      &call_display_pin2pin_flyLines($tagList[1],"FLY_LINES") if($tagList[0] eq "INSTANCE");     
                                      $canvas->bind($tagList[1], "<Leave>"=> sub{$canvas->delete(FLY_LINES);});
                       }]);

}#sub pin2pinFlyLinesDisplayWithKeyMouseBind

#-------------------------------------------------------------------------------------#
sub call_display_pin2pin_flyLines {
 my $inst = $_[0];
 my $tag = $_[1];
 my $flyLineMode = $GLOBAL->dbfGlobalGetFlyLineMode;
 
 foreach my $pin (keys %{$COMP_ALREADY{$inst}} ){
    my $cellRef = $CADB{$inst}->dbCadbGetCellref;
    my $pinDirection = $PLDB{$cellRef}->dbMdbGetPinDir($pin);
    my @sourceInst = ();
    my @destinationInst = ();
    my $net = $COMP_ALREADY{$inst}{$pin};
    my $total_inst_connected = keys %{$NETS_ALREADY{$net}};
    my $very_high_fanout = $GLOBAL->dbfGlobalGetFanoutLimit;
    if($total_inst_connected < 2 || $total_inst_connected > 100){next;}    
    if($flyLineMode eq "LimitedFanouts" && $total_inst_connected >= $very_high_fanout){next;}   
    foreach my $instance (keys %{$NETS_ALREADY{$net}}){
       my $pinName = $NETS_ALREADY{$net}{$instance};
       if(exists $PORTS_ALREADY{$TOP_MODULE}{$instance}){
          my $status = $PORTS_ALREADY{$TOP_MODULE}{$instance}->dbPortGetStatus;
          my @loc = $PORTS_ALREADY{$TOP_MODULE}{$instance}->dbPortGetLoc;
          my ($X,$Y) = dbWGuidatabase2WGui($loc[0],$loc[1]);
          if($inst eq $instance) {push(@sourceInst, $X, $Y);
          }else {push(@destinationInst, $X, $Y);}
       }elsif(exists $COMP_ALREADY{$instance}){
          my $cellref = $CADB{$instance}->dbCadbGetCellref;
          my @instLoc = $CADB{$instance}->dbCadbGetLoc;
          my $orient = $CADB{$instance}->dbCadbGetOrient;
          if(exists $PLDB{$cellref} ){
             #---- check if the connected pin exists ----#
             my @cellOrigin = $PLDB{$cellref}->dbMdbGetOrigin;
             my @cellSize = $PLDB{$cellref}->dbMdbGetSize;
             my @pinRects = $PLDB{$cellref}->dbMdbGetPinRect($pinName);
             my $firstrect = shift @pinRects;
             my ($layer, $llx2, $lly2, $urx2, $ury2)=(split(/\s+/,$firstrect))[0,2,3,4,5];
             my @FirstRect = &xformCellPinToInstPin($instLoc[0],$instLoc[1],$cellOrigin[0],$cellOrigin[1],$orient,$cellSize[0],$cellSize[1],$llx2,$lly2,$urx2,$ury2);
             my ($llx,$lly) = dbWGuidatabase2WGui($FirstRect[0],$FirstRect[1]);  # Multiplying with database#  
             my ($urx,$ury) = dbWGuidatabase2WGui($FirstRect[2],$FirstRect[3]);            
             my $midx = $llx + ($urx - $llx)/4;
             my $midy = $lly + ($ury - $lly)/2;
             if($inst eq $instance) {push(@sourceInst, $midx, $midy);
             }else {push(@destinationInst, $midx, $midy);}
          }#if cellref exists
       }else {}
    }#foreach instance
    my $n = @destinationInst;
    for(my $i = 0; $i<$n/2; $i++){
        my $x1 = $sourceInst[0];
        my $y1 = $sourceInst[1];
        my $x2 = shift@destinationInst;
        my $y2 = shift@destinationInst;
        if ($pinDirection == 0){
            #$design_worldcanvas->createLine($x1, $y1, $x2, $y2, -fill=>"yellow",-arrow => 'first',-width=>1,-tags=>"FLYLINES");
            $design_worldcanvas->createLine($x1, $y1, $x2, $y2, -fill=>"yellow",-width=>1, -tags=>$tag);
        }else {
            #$design_worldcanvas->createLine($x1, $y1, $x2, $y2, -fill=>"blue",-arrow => 'last',-width=>1, -tags=>"FLYLINES");
            $design_worldcanvas->createLine($x1, $y1, $x2, $y2, -fill=>"blue",-width=>1, -tags=>$tag);
        }
    }#for each connection
 }#foreach pin
}#sub call_display_pin2pin_flyLines

#################################################################################################################
################################ ruler to measure distance in design components ################################# 
#################################################################################################################
sub create_ruler_popup{
 $rulerPopUpWin = MainWindow->new();
 $rulerPopUpWin->title("Create Ruler");
 $GLOBAL->dbfGlobalSetRulerPopupOpen(1);
 
 $rulerPopUpWin->protocol('WM_DELETE_WINDOW',sub{$rulerPopUpWin->destroy;$GLOBAL->dbfGlobalSetRulerPopupOpen(0);$rulerDisVar = 0;});
 
 my ($mode, $type) = ("Snap", "manhattan");
 
 my $Frame1 = $rulerPopUpWin->Frame()->pack(-side=>'top', -fill=>'x', -expand=>1);
 my $Frame2 = $rulerPopUpWin->Frame()->pack(-side=>'top', -fill=>'x', -expand=>1);
 my $buttonFrame = $rulerPopUpWin->Frame()->pack(-side=>'top', -fill=>'x', -expand=>1);

 $Frame1->Label(-text=>"Ruler Mode")->pack(-side=>'left');
 $Frame1->Radiobutton(-text=>'No Snapping', -variable => \$mode, -value=>"Nosnap", -command=>sub{&create_ruler("-mode",$mode,"-type",$type)})->pack(-side => 'right');
 $Frame1->Radiobutton(-text=>'Snapping', -variable => \$mode, -value=>"Snap", -state=>"active",-command=>sub{&create_ruler("-mode",$mode,"-type",$type)})->pack(-side => 'right');
 
 $Frame2->Label(-text=>"Ruler Type")->pack(-side=>'left');
 $Frame2->Radiobutton(-text=>'Euclidean', -variable => \$type, -value=>"euclidean", -command=>sub{&create_ruler("-mode",$mode,"-type",$type);})->pack(-side => 'right');
 $Frame2->Radiobutton(-text=>'Manhattan', -variable => \$type, -value=>"manhattan", -command=>sub{&create_ruler("-mode",$mode,"-type",$type);})->pack(-side => 'right');
 
 $buttonFrame->Button(-text=>"Exit", -command=>sub{$rulerPopUpWin->destroy;$GLOBAL->dbfGlobalSetRulerPopupOpen(0);$rulerDisVar = 0;})->pack();
 &create_ruler("-mode",$mode,"-type",$type);
}#sub create_ruler_popup

############################################################################################
sub create_ruler{

#****f* / create_ruler
# NAME
#   create_ruler
# FUNCTION
#  to create ruler for distance measurement
# SYNOPSIS
#   create_ruler -mode <snapping/no snapping>
#                -type <manhattan/euclidean>
#
# INPUTS
#   options: -mode <snapping/no snapping>, -type <manhattan/euclidean>
#   
# OUTPUTS
#    ruler created
#****

my $noOfArg = @_;
my $rulerMode = "";
my $rulerType = "";

 if($noOfArg < 4 || $_[0] eq "-h" || $_[0] eq "-help" || $_[0] eq "-HELP"){
    print "Usage:  create_ruler -mode <Snap/Nosnap>\n";
    print "                     -type <manhattan/euclidean>\n";
 }else{  
    for(my $i=0; $i<$noOfArg; $i++){
        if ($_[$i] eq "-mode"){$rulerMode = $_[$i+1];}
        if ($_[$i] eq "-type"){$rulerType = $_[$i+1];}
    }
    if($rulerMode eq "Snap"){
       if($rulerType eq "manhattan"){
          &create_manhattanRulerWithSnapping ;
       }else{
          &create_euclideanRulerWithSnapping ;
       }
    }elsif($rulerMode eq "Nosnap"){
       if($rulerType eq "manhattan"){
          &create_manhattanRulerWithoutSnapping ;
       }else{
          &create_euclideanRulerWithoutSnapping ;
       }
    }
 }#if correct Arg
 clear_ruler($design_worldcanvas);
}#sub create_ruler

sub create_manhattanRulerWithSnapping{
my $canvas = $design_worldcanvas;

my $srcMod = "";
my $srcId;
my $ruler_activate = 0;
my ($srcX, $srcY) = ("", "");
my @topCoords = ();

$canvas->CanvasBind('<k><1>' => sub {
   $ruler_activate = 0;         
   $srcMod = "";
   my @xy = $canvas->eventLocation();
   my $x = $xy[0];
   my $y = $xy[1];
   $srcX = $xy[0];
   $srcY = $xy[1];
   my @id = $canvas->find(qw/withtag current/);
   $srcId = $id[0];
   my @tagList = $canvas->gettags($srcId);
   @topCoords = $canvas->coords($TOP_MODULE);
   if(@topCoords > 4){@topCoords = ($topCoords[0], $topCoords[1], $topCoords[4], $topCoords[5]);}

   if($x<=$topCoords[0] || $x>=$topCoords[2] || $y<=$topCoords[1] || $y>=$topCoords[3]){    
      $srcMod = $TOP_MODULE;
      $ruler_activate = 1; 
   }else{
      $srcMod = $tagList[1];
      $ruler_activate = 1; 
   }
});
$canvas->CanvasBind('<1>' => sub{
   if($ruler_activate == 1){   
      my @xy = $canvas->eventLocation();
      my $x = $xy[0];
      my $y = $xy[1];
      my @id = $canvas->find(qw/withtag current/);
      my $sinkId = $id[0];
      my @tagList = $canvas->gettags($sinkId);

      my @src_coords = $canvas->coords($srcId);
      if(@src_coords > 4){@src_coords = ($src_coords[0], $src_coords[1], $src_coords[4], $src_coords[5]);}
      
      my @ruler_coords = ();
      my $sinkMod = ""; 
       
      if($x <= $topCoords[0] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randY = rand($src_coords[3]-$src_coords[1]) + $src_coords[1]; 
         @ruler_coords = ($src_coords[0],$randY,$topCoords[0],$randY);
      }elsif($x >= $topCoords[2] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randY = rand($src_coords[3]-$src_coords[1]) + $src_coords[1]; 
         @ruler_coords = ($src_coords[2],$randY,$topCoords[2],$randY);
      }elsif($y <= $topCoords[1] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randX = rand($src_coords[2]-$src_coords[0]) + $src_coords[0]; 
         @ruler_coords = ($randX,$src_coords[1],$randX, $topCoords[1]);
      }elsif($y >= $topCoords[3] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randX = rand($src_coords[2]-$src_coords[0]) + $src_coords[0]; 
         @ruler_coords = ($randX,$src_coords[3],$randX, $topCoords[3]);
      }else {
         $sinkMod = $tagList[1];
         my @sink_coords = $canvas->coords($sinkId);
         if(@sink_coords > 4){@sink_coords = ($sink_coords[0], $sink_coords[1], $sink_coords[4], $sink_coords[5]);}

         if($srcMod eq $TOP_MODULE) {
            if($srcX <= $topCoords[0]){
               my $randY = rand($sink_coords[3]-$sink_coords[1]) + $sink_coords[1]; 
               @ruler_coords = ($sink_coords[0],$randY,$topCoords[0],$randY);
            }elsif($srcX >= $topCoords[2]){
               my $randY = rand($sink_coords[3]-$sink_coords[1]) + $sink_coords[1]; 
               @ruler_coords = ($sink_coords[2],$randY,$topCoords[2],$randY);
            }elsif($srcY <= $topCoords[1]){
               my $randX = rand($sink_coords[2]-$sink_coords[0]) + $sink_coords[0]; 
               @ruler_coords = ($randX,$sink_coords[1],$randX, $topCoords[1]);
            }elsif($srcY >= $topCoords[3]){
               my $randX = rand($sink_coords[2]-$sink_coords[0]) + $sink_coords[0]; 
               @ruler_coords = ($randX,$sink_coords[3],$randX, $topCoords[3]);
            }
            
         }else{
            if($src_coords[0] >= $sink_coords[2] && $src_coords[3] <= $sink_coords[1]){  #sink on top left
               @ruler_coords = ($src_coords[0], $src_coords[3], $sink_coords[2], $src_coords[3], $sink_coords[2], $sink_coords[1]); 
            }elsif($src_coords[2] <= $sink_coords[0] && $src_coords[3] <= $sink_coords[1]){  #sink on top right
               @ruler_coords = ($src_coords[2], $src_coords[3], $sink_coords[0], $src_coords[3], $sink_coords[0], $sink_coords[1]); 
            }elsif($src_coords[0] >= $sink_coords[2] && $src_coords[1] >= $sink_coords[3]){  #sink on bottom left
               @ruler_coords = ($src_coords[0], $src_coords[1], $src_coords[0], $sink_coords[3], $sink_coords[2], $sink_coords[3]); 
            }elsif($src_coords[2] <= $sink_coords[0] && $src_coords[1] >= $sink_coords[3]){  #sink on bottom right
               @ruler_coords = ($src_coords[2], $src_coords[1], $src_coords[2], $sink_coords[3], $sink_coords[0], $sink_coords[3]); 
            }elsif($src_coords[0] >= $sink_coords[2]){  #sink on left
               my @sortedY = sort{$a<=>$b}($src_coords[1],$src_coords[3], $sink_coords[1], $sink_coords[3]);
               my $randY = $sortedY[1] + rand($sortedY[2] - $sortedY[1]);   
               @ruler_coords = ($src_coords[0], $randY, $sink_coords[2], $randY); 
            }elsif($src_coords[2] <= $sink_coords[0]){  #sink on right
               my @sortedY = sort{$a<=>$b}($src_coords[1],$src_coords[3], $sink_coords[1], $sink_coords[3]);
               my $randY = $sortedY[1] + rand($sortedY[2] - $sortedY[1]);   
               @ruler_coords = ($src_coords[2], $randY, $sink_coords[0], $randY); 
            }elsif($src_coords[3 ]<= $sink_coords[1]){  #sink on sink on top 
               my @sortedX = sort{$a<=>$b}($src_coords[0],$src_coords[2], $sink_coords[0], $sink_coords[2]);
               my $randX = $sortedX[1] + rand($sortedX[2] - $sortedX[1]);   
               @ruler_coords = ($randX, $src_coords[3], $randX, $sink_coords[1]); 
            }elsif($src_coords[1] >= $sink_coords[3]){  #sink on bottom
               my @sortedX = sort{$a<=>$b}($src_coords[0],$src_coords[2], $sink_coords[0], $sink_coords[2]);
               my $randX = $sortedX[1] + rand($sortedX[2] - $sortedX[1]);   
               @ruler_coords = ($randX, $src_coords[1], $randX, $sink_coords[3]); 
            }
         }
      }
      $canvas->createLine(@ruler_coords, -fill=>"yellow", -arrow=>"both", -tags=>"RULER") if($srcMod ne $sinkMod);
      if(@ruler_coords == 4){
         if($ruler_coords[0] == $ruler_coords[2]) {
            my $distance = abs($ruler_coords[3] - $ruler_coords[1]);
            $distance = &convert_gui2micron($distance); 
            $canvas->createText($ruler_coords[0],($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e') if($srcMod ne $sinkMod);
         }else {
            my $distance = abs($ruler_coords[2] - $ruler_coords[0]);
            $distance = &convert_gui2micron($distance); 
            $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'n') if($srcMod ne $sinkMod);
         }
      }else{
         if($ruler_coords[1] == $ruler_coords[3]) {
            my $dis1 = abs($ruler_coords[2] - $ruler_coords[0]); 
            my $dis2 = abs($ruler_coords[5] - $ruler_coords[3]); 
            $dis1 = &convert_gui2micron($dis1); 
            $dis2 = &convert_gui2micron($dis2); 
            $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$dis1, -fill=>"white", -tags=>"RULER", -anchor=>'n') if($srcMod ne $sinkMod);
            $canvas->createText($ruler_coords[2],($ruler_coords[3]+$ruler_coords[5])/2, -text=>$dis2, -fill=>"white", -tags=>"RULER", -anchor=>'e') if($srcMod ne $sinkMod);
         }else{
            my $dis1 = abs($ruler_coords[3] - $ruler_coords[1]); 
            my $dis2 = abs($ruler_coords[4] - $ruler_coords[2]); 
            $dis1 = &convert_gui2micron($dis1); 
            $dis2 = &convert_gui2micron($dis2); 
            $canvas->createText($ruler_coords[0],($ruler_coords[3]+$ruler_coords[1])/2, -text=>$dis1, -fill=>"white", -tags=>"RULER", -anchor=>'e') if($srcMod ne $sinkMod);
            $canvas->createText(($ruler_coords[2]+$ruler_coords[4])/2,$ruler_coords[3], -text=>$dis2, -fill=>"white", -tags=>"RULER", -anchor=>'n') if($srcMod ne $sinkMod);
         }
      }

      $ruler_activate = 0;
   }
});
}#sub create_manhattanRulerWithSnapping

############################################################################################
sub create_euclideanRulerWithSnapping{
my $canvas = $design_worldcanvas;

my $srcMod = "";
my $srcId;
my $ruler_activate = 0;
my ($srcX, $srcY) = ("", "");
my @topCoords = ();

$canvas->CanvasBind('<k><1>' => sub {
   $ruler_activate = 0;         
   $srcMod = "";
   my @xy = $canvas->eventLocation();
   my $x = $xy[0];
   my $y = $xy[1];
   $srcX = $xy[0];
   $srcY = $xy[1];
   my @id = $canvas->find(qw/withtag current/);
   $srcId = $id[0];
   my @tagList = $canvas->gettags($srcId);
   @topCoords = $canvas->coords($TOP_MODULE);
   if(@topCoords > 4){@topCoords = ($topCoords[0], $topCoords[1], $topCoords[4], $topCoords[5]);}
   if($x<=$topCoords[0] || $x>=$topCoords[2] || $y<=$topCoords[1] || $y>=$topCoords[3]){    
      $srcMod = $TOP_MODULE;
      $ruler_activate = 1; 
   }else{
      $srcMod = $tagList[1];
      $ruler_activate = 1; 
   }
});
$canvas->CanvasBind('<1>' => sub{
   if($ruler_activate == 1){   
      my @xy = $canvas->eventLocation();
      my $x = $xy[0];
      my $y = $xy[1];
      my @id = $canvas->find(qw/withtag current/);
      my $sinkId = $id[0];
      my @tagList = $canvas->gettags($id[0]);

      my @src_coords = $canvas->coords($srcId);
      if(@src_coords > 4){@src_coords = ($src_coords[0], $src_coords[1], $src_coords[4], $src_coords[5]);}

      my @ruler_coords = ();
      my $sinkMod = ""; 
       
      if($x <= $topCoords[0] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randY = rand($src_coords[3]-$src_coords[1]) + $src_coords[1]; 
         @ruler_coords = ($src_coords[0],$randY,$topCoords[0],$randY);
      }elsif($x >= $topCoords[2] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randY = rand($src_coords[3]-$src_coords[1]) + $src_coords[1]; 
         @ruler_coords = ($src_coords[2],$randY,$topCoords[2],$randY);
      }elsif($y <= $topCoords[1] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randX = rand($src_coords[2]-$src_coords[0]) + $src_coords[0]; 
         @ruler_coords = ($randX,$src_coords[1],$randX, $topCoords[1]);
      }elsif($y >= $topCoords[3] && $srcMod ne $TOP_MODULE){
         $sinkMod = $TOP_MODULE;
         my $randX = rand($src_coords[2]-$src_coords[0]) + $src_coords[0]; 
         @ruler_coords = ($randX,$src_coords[3],$randX, $topCoords[3]);
      }else {
         $sinkMod = $tagList[1];
         my @sink_coords = $canvas->coords($sinkId);
         if(@sink_coords > 4){@sink_coords = ($sink_coords[0], $sink_coords[1], $sink_coords[4], $sink_coords[5]);}
         if($srcMod eq $TOP_MODULE) {
            if($srcX <= $topCoords[0]){
               my $randY = rand($sink_coords[3]-$sink_coords[1]) + $sink_coords[1]; 
               @ruler_coords = ($sink_coords[0],$randY,$topCoords[0],$randY);
            }elsif($srcX >= $topCoords[2]){
               my $randY = rand($sink_coords[3]-$sink_coords[1]) + $sink_coords[1]; 
               @ruler_coords = ($sink_coords[2],$randY,$topCoords[2],$randY);
            }elsif($srcY <= $topCoords[1]){
               my $randX = rand($sink_coords[2]-$sink_coords[0]) + $sink_coords[0]; 
               @ruler_coords = ($randX,$sink_coords[1],$randX, $topCoords[1]);
            }elsif($srcY >= $topCoords[3]){
               my $randX = rand($sink_coords[2]-$sink_coords[0]) + $sink_coords[0]; 
               @ruler_coords = ($randX,$sink_coords[3],$randX, $topCoords[3]);
            }
            
         }else{
            if($src_coords[0] >= $sink_coords[2] && $src_coords[3] <= $sink_coords[1]){  #sink on top left
               @ruler_coords = ($src_coords[0], $src_coords[3], $sink_coords[2], $sink_coords[1]); 
            }elsif($src_coords[2] <= $sink_coords[0] && $src_coords[3] <= $sink_coords[1]){  #sink on top righ
               @ruler_coords = ($src_coords[2], $src_coords[3], $sink_coords[0], $sink_coords[1]); 
            }elsif($src_coords[0]>= $sink_coords[2] && $src_coords[1] >= $sink_coords[3]){  #sink on bottom left
               @ruler_coords = ($src_coords[0], $src_coords[1], $sink_coords[2], $sink_coords[3]); 
            }elsif($src_coords[2] <= $sink_coords[0] && $src_coords[1] >= $sink_coords[3]){  #sink on bottom right
               @ruler_coords = ($src_coords[2], $src_coords[1], $sink_coords[0], $sink_coords[3]); 
            }elsif($src_coords[0] >= $sink_coords[2]){  #sink on left
               my @sortedY = sort{$a<=>$b}($src_coords[1],$src_coords[3], $sink_coords[1], $sink_coords[3]);
               my $randY = $sortedY[1] + rand($sortedY[2] - $sortedY[1]);   
               @ruler_coords = ($src_coords[0], $randY, $sink_coords[2], $randY); 
            }elsif($src_coords[2] <= $sink_coords[0]){  #sink on right
               my @sortedY = sort{$a<=>$b}($src_coords[1],$src_coords[3], $sink_coords[1], $sink_coords[3]);
               my $randY = $sortedY[1] + rand($sortedY[2] - $sortedY[1]);   
               @ruler_coords = ($src_coords[2], $randY, $sink_coords[0], $randY); 
            }elsif($src_coords[3] <= $sink_coords[1]){  #sink on sink on top 
               my @sortedX = sort{$a<=>$b}($src_coords[0],$src_coords[2], $sink_coords[0], $sink_coords[2]);
               my $randX = $sortedX[1] + rand($sortedX[2] - $sortedX[1]);   
               @ruler_coords = ($randX, $src_coords[3], $randX, $sink_coords[1]); 
            }elsif($src_coords[1] >= $sink_coords[3]){  #sink on bottom
               my @sortedX = sort{$a<=>$b}($src_coords[0],$src_coords[2], $sink_coords[0], $sink_coords[2]);
               my $randX = $sortedX[1] + rand($sortedX[2] - $sortedX[1]);   
               @ruler_coords = ($randX, $src_coords[1], $randX, $sink_coords[3]); 
            }
         }
      }
      $canvas->createLine(@ruler_coords, -fill=>"yellow", -arrow=>"both", -tags=>"RULER") if($srcMod ne $sinkMod);
      if($ruler_coords[0] == $ruler_coords[2]) {
         my $distance = abs($ruler_coords[3] - $ruler_coords[1]);
         $distance = &convert_gui2micron($distance); 
         $canvas->createText($ruler_coords[0],($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e') if($srcMod ne $sinkMod);
      }elsif($ruler_coords[1] == $ruler_coords[3]){
         my $distance = abs($ruler_coords[2] - $ruler_coords[0]);
         $distance = &convert_gui2micron($distance); 
         $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'n') if($srcMod ne $sinkMod);
      }else{
         my $distance = sqrt(($ruler_coords[2] - $ruler_coords[0])*($ruler_coords[2] - $ruler_coords[0]) + ($ruler_coords[3] - $ruler_coords[1])*($ruler_coords[3] - $ruler_coords[1]));
         $distance = &convert_gui2micron($distance); 
         $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e') if($srcMod ne $sinkMod);
      }
      $ruler_activate = 0;
   }
});
}#sub create_euclideanRulerWithSnapping

############################################################################################
sub create_manhattanRulerWithoutSnapping{
my $canvas = $design_worldcanvas;

my $ruler_activate = 0;
my ($srcX, $srcY) = ("", "");

$canvas->CanvasBind('<k><1>' => sub {
        $ruler_activate = 0;         
        my @xy = $canvas->eventLocation();
        $srcX = $xy[0];
        $srcY = $xy[1];
        $ruler_activate = 1;         
});
$canvas->CanvasBind('<1>' => sub{
   if($ruler_activate == 1){   
        my @xy = $canvas->eventLocation();
        my $x = $xy[0];
        my $y = $xy[1];
        if ($srcX == $x || $srcY == $y){
            my @ruler_coords = ($srcX, $srcY, $x, $y);
            $canvas->createLine(@ruler_coords, -fill=>"yellow", -arrow=>"both", -tags=>"RULER");
            if($srcY == $y){
               my $distance = abs($ruler_coords[2] - $ruler_coords[0]);
               $distance = &convert_gui2micron($distance); 
               $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'n');
            }else{
               my $distance = abs($ruler_coords[3] - $ruler_coords[1]);
               $distance = &convert_gui2micron($distance); 
               $canvas->createText($ruler_coords[0],($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e');
            }
        }else{
            my @ruler_coords = ($srcX, $srcY, $x, $srcY, $x, $y); 
            my $dis1 = abs($ruler_coords[2] - $ruler_coords[0]);
            my $dis2 = abs($ruler_coords[5] - $ruler_coords[3]);
               $dis1 = &convert_gui2micron($dis1); 
               $dis2 = &convert_gui2micron($dis2); 
            $canvas->createLine(@ruler_coords, -fill=>"yellow", -arrow=>"both", -tags=>"RULER");
            $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$dis1, -fill=>"white", -tags=>"RULER", -anchor=>'n');
            $canvas->createText($ruler_coords[2],($ruler_coords[3]+$ruler_coords[5])/2, -text=>$dis2, -fill=>"white", -tags=>"RULER", -anchor=>'e');
        }
   }
   $ruler_activate = 0; 
 });
}#sub create_manhattanRulerWithoutSnapping

############################################################################################
sub create_euclideanRulerWithoutSnapping{
my $canvas = $design_worldcanvas;

my $ruler_activate = 0;
my ($srcX, $srcY) = ("", "");

$canvas->CanvasBind('<k><1>' => sub {
        $ruler_activate = 0;         
        my @xy = $canvas->eventLocation();
        $srcX = $xy[0];
        $srcY = $xy[1];
        $ruler_activate = 1;         
});
$canvas->CanvasBind('<1>' => sub{
   if($ruler_activate == 1){   
        my @xy = $canvas->eventLocation();
        my $x = $xy[0];
        my $y = $xy[1];
        my @ruler_coords = ($srcX, $srcY, $x, $y);
        $canvas->createLine(@ruler_coords, -fill=>"yellow", -arrow=>"both", -tags=>"RULER");
        if ($srcX == $x || $srcY == $y){
            if($srcY == $y){
               my $distance = abs($ruler_coords[2] - $ruler_coords[0]);
               $distance = &convert_gui2micron($distance); 
               $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,$ruler_coords[1], -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'n');
            }else{
               my $distance = abs($ruler_coords[3] - $ruler_coords[1]);
               $distance = &convert_gui2micron($distance); 
               $canvas->createText($ruler_coords[0],($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e');
            }
        }else{
            my $distance = sqrt(($ruler_coords[2] - $ruler_coords[0])*($ruler_coords[2] - $ruler_coords[0]) + ($ruler_coords[3] - $ruler_coords[1])*($ruler_coords[3] - $ruler_coords[1]));
            $distance = &convert_gui2micron($distance); 
            $canvas->createText(($ruler_coords[0]+$ruler_coords[2])/2,($ruler_coords[1]+$ruler_coords[3])/2, -text=>$distance, -fill=>"white", -tags=>"RULER", -anchor=>'e');
        }
   }
   $ruler_activate = 0; 
 });

}#sub create_euclideanRulerWithoutSnapping

############################################################################################
sub convert_gui2micron {
my $dbP = $_[0];
my $mufp = $GLOBAL->dbGlobalGetMicronFactor;
my $micP = sprintf("%.2f",$dbP/$mufp) ;
return $micP;
}#sub convert_gui2micron

sub clear_ruler{
 my $canvas = $_[0];
 $canvas->CanvasBind('<k><Delete>', => sub{$canvas->delete("RULER");});
}#sub clear_ruler

########################################################################################
sub setBusyCursor{
 #my @widgets = @_;
 #foreach my $widget(@widgets){
 #  $widget->Busy(-recurse=> 1);
 #}
 #$top->Busy;
 #$design_worldcanvas->Busy(-recurse=> 1, -cursor=>'circle');
 #$topFrame->Busy(-recurse=> 1);
 #print "Button has been pressed...\n";
 $top->configure(-cursor => 'watch');
 $top->update;
}#sub setBusyCursor

sub unsetBusyCursor{
 #my @widgets = @_;
 #foreach my $widget(@widgets){
 #  $widget->Unbusy;
 #}
 #$top->Unbusy;
 #$design_worldcanvas->Unbusy;
 #$topFrame->Unbusy;
 $top->update;
 $top->configure(-cursor => '');
}#sub unsetBusyCursor

########################################################################################



1;

