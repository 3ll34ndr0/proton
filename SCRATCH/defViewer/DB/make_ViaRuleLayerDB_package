package ViaRuleLayerDB;
###############explanation of database################

sub new {

$viaRuleLayer = {
                     VRLname => "",
                     VRdir => "",
                     VRoverhang => "",
                     VRmetalOverhang => "",
                     @VRspacing => (),
                     @VRrect => (),
                     @VRenclosure => (),
                     @VRwidth => (),
                     @VRcutsize => (),
                     @VRcutsp => (),
                    };
bless $viaRuleLayer, 'ViaRuleLayerDB';
return $viaRuleLayer;
}#sub new


#--------------------------------------------------------------------------------------#
sub dbSetViaRuleLayerName {
my($self,$vrl) = @_;
$self->{VRLname} = $vrl;
}#sub dbSetViaRuleLayerName

sub dbGetViaRuleLayerName {
my ($self) = @_;
my $vrl = $self->{VRLname};
return($vrl);
}#sub dbGetViaRuleLayerName

#---------------------------------------------------------------------------------------#

sub dbSetViaDir {
my($self,$dir) = @_;
$self->{VRdir} = $dir;
}#sub dbSetViaDir

sub dbGetViaDir {
my ($self) = @_;
my $dir = $self->{VRdir};
return($dir);
}#sub dbGetViaDir

#---------------------------------------------------------------------------------------#

sub dbSetViaOverhang {
my ($self,$voh) = @_;
$self->{VRoverhang} = $voh;
}#sub dbSetViaOverhang

sub dbGetViaOverhang {
my ($self) = @_;
$voh = $self->{VRoverhang};
return($voh);
}#sub dbGetViaOverhang

#--------------------------------------------------------------------------------------#

sub dbSetViaMetalOverhang {
my ($self,$vmoh) = @_;
$self->{VRmetalOverhang} = $vmoh;
}#sub dbSetViaMetalOverhang

sub dbGetViaMetalOverhang {
my ($self) = @_;
$vmoh = $self->{VRmetalOverhang};
return($vmoh);
}#sub dbGetViaMetalOverhang

#----------------------------------------------------------------------------------------#

sub dbSetViaSpacing {
my ($self,$sp0,$sp1) = @_;
    ${$self->{VRspacing}}[0] = $sp0;
    ${$self->{VRspacing}}[1] = $sp1;
}#sub dbSetViaSpacing

sub dbGetViaSpacing {
my($self) = @_;
@sp = @{$self->{VRspacing}};
return(@sp);
}#sub dbGetViaSpacing

#----------------------------------------------------------------------------------------#

sub dbSetViaRuleRect {
my ($self, @rect) = @_;
push(@{$self->{VRrect}},[@rect]); 
}#sub dbSetViaRuleRect

sub dbGetViaRuleRect {
my($self) = @_;
@rect = @{$self->{VRrect}};
return(@rect);
}#sub dbGetViaRuleRect

#-----------------------------------------------------------------------------------------#
sub dbSetViaRuleEnclosure {
my ($self,$ve0,$ve1,$ve2,$ve3) = @_;
    ${$self->{VRenclosure}}[0] = $ve0;
    ${$self->{VRenclosure}}[1] = $ve1;
    ${$self->{VRenclosure}}[2] = $ve2;
    ${$self->{VRenclosure}}[3] = $ve3;
}#sub dbSetViaRuleEnclosure

sub dbGetViaRuleEnclosure {
my($self) = @_;
@ve = @{$self->{VRenclosure}};
return(@ve);
}#sub dbGetViaRuleEnclosure

#----------------------------------------------------------------------------------------#

sub dbSetViaRuleWidth {
my ($self,$w0,$w1) = @_;
    ${$self->{VRwidth}}[0] = $w0;
    ${$self->{VRwidth}}[1] = $w1;
}#sub dbSetViaRuleWidth

sub dbGetViaRuleWidth {
my ($self) = @_;
@w = @{$self->{VRwidth}};
return(@w);
}#sub dbGetViaRuleWidth

#---------------------------------------------------------------------------------------#

sub dbSetViaRulecutsize {
my ($self,$cs0,$cs1) = @_;
    ${$self->{VRcutsize}}[0] = $cs0;
    ${$self->{VRcutsize}}[1] = $cs1;
}#sub dbSetViaRulecutsize

sub dbGetViaRulecutsize {
my ($self) = @_;
@cs = @{$self->{VRcutsize}};
return(@cs);
}#sub dbGetViaRulecutsize

#--------------------------------------------------------------------------------------#

sub dbSetViaRulecutspacing {
my ($self,$csp0,$csp1) = @_;
    ${$self->{VRcutsp}}[0] = $csp0;
    ${$self->{VRcutsp}}[1] = $csp1;
}#sub dbSetViaRulecutspacing

sub dbGetViaRulecutspacing {
my ($self) = @_;
@csp = @{$self->{VRcutsp}};
return(@csp);
}#sub dbGetViaRulecutspacing

1;
