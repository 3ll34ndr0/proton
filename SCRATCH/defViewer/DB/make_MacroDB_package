package MacroDB;

####  explanation of database ####
##    S is Size
##    O is Orentation
##    PIN is a multilevel hash to store pin data 
##    PIN { A => [dir][flags][lay1]->{rects}
##                           [lay2]->{rects}
##    SN tells whether the spice netlist exists or not 1 means exists 0 means does not exist
##    F is cell function
##    T is cell type sequential or combinational 0 means combi 1 means seq 2 means block
##    R is pin routibility factor
##
##    FLAGS Explanation : 0 == signal 
##                        1 == power
##                        2 == ground
##                        3 == clock
##                        4 == primary reg input
##                        5 == secondary reg input
##                        6 == scan reg input
##                        7 == preset reg input
##                        8 == clear reg input
##                        9 == primary reg output
##                        10 == secondary reg output
##                        11 == scan reg output
##   C is CLASS of the macro
##          0 : CORE
##          1 : BLOCK
##          2 : AREAIO
##          3 : PAD
##          4 : PAD AREAIO
##          5 : COVER
##          6 : COVER BUMP
##          7 : BLACKBOX
##          8 : ILM
##          9 : SOFT-MODULE
##   OBS is an array with stores the obstruction information
##   OBS_POLYGON is an array with stores the obstruction information

sub new {
    
my $Cellref = {
                    S => [],
                    O => "N",
                    PIN => MacroPinDB::createEmpty(),
                    SN => 0,
                    F => "UND",
                    T => 0,
                    C => 0,
                    OBS => [],
                    OBS_POLYGON => [],
                    R => 0, 
                    ANTENNA_FOUND => 0,
                    FR_COORDS => [],
                    };
bless $Cellref, 'MacroDB';
return $Cellref;
}#sub new

#------------------------------------------------------------------#
sub dbMdbDoesPinExist {
my  ($self,$pinName) = @_;
if ( exists ${$self->{PIN}}{$pinName} ) {
return(1); } else { return(0);}
}#sub dbMdbDoesPinExist

sub dbMdbGetPinNum {
my  ($self,$pinName) = @_;
my @pins = $self->dbMdbGetPins;
my $found = -1;
for ($x = 0 ; $x < @pins; $x++ ) {
     if ( $pins[$x] eq $pinName ) { $found = $x; }
                                  }
return($found);
}#sub dbMdbGetPinNum

sub dbMdbDoesBusExist {
my  ($self,$busName) = @_;
my @pins = $self->dbMdbGetPins;
my $cnt = 0 ;
   foreach my $pinName ( @pins ) {
           if ( $pinName =~ /$busName\[[0-9]+\]/ ) { $cnt++; }
                                 }
if( $cnt > 0 ) {return(1); } else { return(0);}
}#sub dbMdbDoesBusExist

sub dbMdbGetPinsFromBus {
my  ($self,$busName) = @_;
my @allPins = $self->dbMdbGetPins;
my @pins = ();
   foreach my $pinName ( @allPins ) {
           if ( $pinName =~ /$busName\[[0-9]+\]/ ) { push(@pins,$pinName);  }
                                 }
my @sortedPins = sort {$a <=> $b} @pins;
print "From Inside DB\n";
print join "," , @sortedPins;
print "\n";
return(@sortedPins);
}#sub dbMdbGetPinsFromBus


#------------------------------------------------------------------#
sub dbMdbSetPinAccess {
my ($self,$pinName,$type,$val) =@_;
    ${$self->{PIN}}{$pinName}->{AF}->[$type] = $val;
}# sub dbMdbSetPinAccess

sub dbMdbGetPinAccess {
my ($self,$pinName) =@_;
my @accessData = @{${$self->{PIN}}{$pinName}->{AF}};
return(@accessData)
}# sub dbMdbGetPinAccess
#------------------------------------------------------------------#

sub dbMdbSetClass {
my ($self,$class) =@_;
       if ($class =~ m/^CORE$/i) { $self->{C} = 0; }
    elsif ($class  =~ m/^BLOCK$/i) { $self->{C} = 1; }
    elsif ($class  =~ m/^AREAIO$/i) { $self->{C} = 2; }
    elsif ($class  =~ m/^PAD$/i) { $self->{C} = 3; }
    elsif ($class  =~ m/^PAD AREAIO$/i) { $self->{C} = 4; }
    elsif ($class  =~ m/^COVER BUMP$/i) { $self->{C} = 6; }
    elsif ($class  =~ m/^CORE FEEDTHRU$/i) { $self->{C} = 7; }
    elsif ($class  =~ m/^CORE ANTENNACELL$/i) { $self->{C} = 8; }
    elsif ($class  =~ m/^CORE WELLTAP$/i) { $self->{C} = 9; }
    elsif ($class  =~ m/^CORE SPACER$/i) { $self->{C} = 10; }
    elsif ($class  =~ m/^ENDCAP PRE$/i) { $self->{C} = 11; }
    elsif ($class =~ m/^CORE TIELOW$/i){$self->{C} = 12;}
    elsif ($class =~ m/^CORE TIEHIGH$/i){$self->{C} = 13;}
    elsif ($class =~ m/^ENDCAP BOTTOMLEFT$/i){$self->{C} = 14;}
    elsif ($class =~ m/^PAD SPACER$/i){$self->{C} = 15;}
       else { print "WARN-PLDB : macro class is not recognised\n"; }
}# sub dbMdbSetClass

sub dbMdbGetClass {
my ($self) =@_;
my $class ;
       if ($self->{C} == 0 ) { $class = "CORE";}
    elsif ($self->{C} == 1 ) { $class = "BLOCK";}
    elsif ($self->{C} == 2 ) { $class = "AREAIO";}
    elsif ($self->{C} == 3 ) { $class = "PAD";}
    elsif ($self->{C} == 4 ) { $class = "PAD AREAIO";}
    elsif ($self->{C} == 6 ) { $class = "COVER BUMP";}
    elsif ($self->{C} == 7 ) { $class = "CORE FEEDTHRU";}
    elsif ($self->{C} == 8 ) { $class = "CORE ANTENNACELL";}
    elsif ($self->{C} == 9 ) { $class = "CORE WELLTAP";}
    elsif ($self->{C} == 10 ) { $class = "CORE SPACER";}
    elsif ($self->{C} == 11 ) { $class = "ENDCAP PRE";}
    elsif ($self->{C} == 12 ) { $class = "CORE TIELOW";}
    elsif ($self->{C} == 13 ) {$class = "CORE TIEHIGH";}
    elsif ($self->{C} == 14 ) {$class = "ENDCAP BOTTOMLEFT";}
    elsif ($self->{C} == 15 ) {$class = "PAD SPACER";}
       else { print "WARN-PLDB : macro class is not recognised\n"; }
    return $class;
}# sub dbMdbGetClass
#------------------------------------------------------------------#
sub dbMdbAddPinBusWidth {
my ($self,$pinName,$width) =@_;
    ${$self->{PIN}}{$pinName}->{BW} = $width;
}#sub dbMdbAddPinBusWidth

sub dbMdbGetPinBusWidth {
my ($self,$pinName) =@_;
my $width = ${$self->{PIN}}{$pinName}->{BW};
return($width);
}#sub dbMdbGetPinBusWidth

#------------------------------------------------------------------#
sub dbMdbAddPinBusBaseName {
my ($self,$pinName,$base) =@_;
    ${$self->{PIN}}{$pinName}->{BN} = $base;
}#sub dbMdbAddPinBusBaseName

sub dbMdbGetPinBusBaseName {
my ($self, $pinName) = @_;
my $base = "";
if ( exists ${$self->{PIN}}{$pinName} ) {
  $base = ${$self->{PIN}}{$pinName}->{BN};
}
return ($base); 
}#sub dbMdbGetPinBusBaseName


sub dbMdbAddPinBusBit {
my ($self,$pinName,$bit) =@_;
    ${$self->{PIN}}{$pinName}->{BB} = $bit;
}#sub dbMdbAddPinBusBit

sub dbMdbGetPinBusBit {
my ($self, $pinName) = @_;
my $bit;
if ( exists ${$self->{PIN}}{$pinName} ) {
  $bit = ${$self->{PIN}}{$pinName}->{BB};
}
return ($bit);
}#sub dbMdbGetPinBusBit

sub dbMdbGetPinBusBits {
my ($self, $pinName) = @_;
#my $pinbase = &dbMdbGetPinBusBaseName($self,$pinName);
my @pins = &dbMdbGetPins($self);
my @pinBits = ();
foreach $pin ( @pins ) { 
          my $base = &dbMdbGetPinBusBaseName($self,$pin);
          if ( $base eq $pinName ) { 
               push(@pinBits,&dbMdbGetPinBusBit($self,$pin) );
                                   }
                  }#foreach
@pinBits = sort {$a <=> $b} @pinBits;
# print join ",", @pinBits; pring "\n";
my $len = @pinBits;
my $str = "[".$pinBits[0].":".$pinBits[$len-1]."]";
print "DB-INFO : $str\n" ;
return($str);
}#sub dbMdbGetPinBusBits

sub dbMdbIsPinBus {
my ($self, $pinName) = @_;
my $found = 0;
my @pins = &dbMdbGetPins($self);
foreach $pin ( @pins ) {
          my $base = &dbMdbGetPinBusBaseName($self,$pin); 
          if ( $base eq $pinName ) { $found = 1;}
                  }#foreach
return($found);
}#sub dbMdbIsPinBus



#------------------------------------------------------------------#


sub dbMdbSetPinIsSignal {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 0;
}# sub dbMdbSetPinIsSignal

sub dbMdbGetPinIsSignal {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==0){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsSignal

sub dbMdbSetPinIsPower {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 1;
}# sub dbMdbSetPinIsPower

sub dbMdbGetPinIsPower {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==1){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsPower

sub dbMdbSetPinIsGround {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 2;
}# sub dbMdbSetPinIsGround

sub dbMdbGetPinIsGround {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==2){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsGround

sub dbMdbSetPinIsClock {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 3;
}# sub dbMdbSetPinIsClock

sub dbMdbGetPinIsClock {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==3){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsClock

sub dbMdbSetPinIsRegIn1 {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 4;
}# sub dbMdbSetPinIsRegIn1

sub dbMdbGetPinIsRegIn1 {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==4){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsRegIn1

sub dbMdbSetPinIsRegOut1 {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 9;
}# sub dbMdbSetPinIsRegOut1

sub dbMdbGetPinIsRegOut1 {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==9){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsRegOut1

sub dbMdbSetPinIsRegOut2 {
my ($self,$pinName) =@_;
    ${$self->{PIN}}{$pinName}->{F} = 10;
}# sub dbMdbSetPinIsRegOut2

sub dbMdbGetPinIsRegOut2 {
my ($self,$pinName) =@_;
  my $flag = ${$self->{PIN}}{$pinName}->{F} ;
  if($flag ==10){
    return 1 ;
  }else {
    return 0 ;
  }
}# sub dbMdbGetPinIsRegOut2

sub dbMdbGetPinType {
my ($self,$pinName) =@_;
my $flag =  ${$self->{PIN}}{$pinName}->{F};
return($flag);
}# sub dbMdbGetPinType



sub dbMdbGetIsSpiceNetlist {
my ($self) =@_;
  my $status =  $self->{SN};
return($status);
}# sub dbMdbGetIsSpiceNetlist

sub dbMdbSetIsSpiceNetlist {
my ($self,$status) =@_;
    $self->{SN} = $status,
}# sub dbMdbSetIsSpiceNetlist

sub dbMdbAddPinRect {
my ($self,$pinName,$data) = @_;
   push( @{${$self->{PIN}}{$pinName}->{RECT}}, $data);
}#sub dbMdbAddPinRect

sub dbMdbModifyPinRect {
my ($self,$pinName,@data) = @_;
    @{${$self->{PIN}}{$pinName}->{RECT}} = @data;
}#sub dbMdbModifyPinRect



sub dbMdbGetPinRect {
my ($self,$pinName) = @_;
   my @data = @{${$self->{PIN}}{$pinName}->{RECT}};
return(@data);
}#sub dbMdbGetPinRect

sub dbgMdbGetPinRect {
my ($self,$pinName) = @_;
   my @data = @{${$self->{PIN}}{$pinName}->{RECT}};
   foreach $_ ( @data ) { print "$_\n"; };
}#sub dbgMdbGetPinRect


sub dbMdbSetPinDir {
my ($self,$pinName,$direction) = @_;
my $dir = 2;
   if ( $direction eq "input" ) { $dir = 0;}
   elsif ( $direction eq "output" ) { $dir = 1;}
   elsif ( $direction eq "inout" ) { $dir = 2;}
   else { print "unknown direction\n"; }
${$self->{PIN}}{$pinName}->{D} = $dir;
}#sub dbMdbSetPinDir

sub dbMdbGetPinDir {
my ($self,$pinName) = @_;
my $direction = ${$self->{PIN}}{$pinName}->{D};
return($direction);
}#sub dbMdbGetPinDir


sub dbgMdbGetPinDir {
my ($self,$pinName) = @_;
my $direction = ${$self->{PIN}}{$pinName}->{D};
print "Pin $pinName direction is $direction\n";
}#sub dbgMdbGetPinDir

sub dbMdbAddPin {
my ($self,$pinName) = @_;
    ${$self->{PIN}}{$pinName} = MacroPinDB::new();
}#sub dbMdbAddPin

sub dbMdbGetPins {
my ($self) = @_;
my @pins = ();
   foreach my $pinName ( keys %{$self->{PIN}} ) { push(@pins,$pinName); }
return(@pins);
}#sub dbMdbGetPins

sub dbgMdbGetPins {
my ($self) = @_;
   foreach my $pinName ( keys %{$self->{PIN}} ) { print "$pinName\n"; }
}#sub dbgMdbGetPins

#-------------------------------------------------------------#
sub dbMdbSetOrigin {
my ($self,$x,$y) = @_;
   push(@{$self->{OR}}, $x);
   push(@{$self->{OR}}, $y);
}#sub dbMdbSetOrigin

sub dbMdbGetOrigin {
my ($self) = @_;
my @or = @{$self->{OR}};
return(@or);
}#sub dbMdbGetOrigin

sub dbgMdbGetOrigin {
my ($self) = @_;
my @or = @{$self->{OR}};
   print "ORIGIN = $or[0] by $or[1]\n";
}#sub dbgMdbGetOrigin

#-------------------------------------------------------------#
sub dbMdbSetSize {
my ($self,$x,$y) = @_;
   push(@{$self->{S}}, $x);
   push(@{$self->{S}}, $y);
}#sub dbMdbSetSize

sub dbMdbGetSize {
my ($self) = @_;
my @size = @{$self->{S}};
return(@size);
}#sub dbMdbGetSize

sub dbgMdbGetSize {
my ($self) = @_;
my @size = @{$self->{S}};
   print "SIZE = $size[0] by $size[1]\n";
}#sub dbgMdbGetSize
#-------------------------------------------------------------#
sub dbMdbAddObs {
my ($self,$obsLine) = @_;
   push(@{$self->{OBS}}, $obsLine);
}#sub dbMdbAddObs

sub dbMdbGetObs {
my ($self) = @_;
my @obs = @{$self->{OBS}};
return(@obs);
}#sub dbMdbGetObs

sub dbgMdbGetObs {
my ($self) = @_;
my @obs = @{$self->{OBS}};
foreach my $l ( @obs ) { print "$l\n"; }
}#sub dbgMdbGetObs
#-------------------------------------------------------------#
sub dbMdbSetOrient {
my ($self,$orient) = @_;
    $self->{O} = $orient;
}#sub dbMdbSetOrient

sub dbMdbGetOrient {
my ($self) = @_;
my $orient = $self->{O};
return($orient);
}#sub dbMdbGetOrient

sub dbgMdbGetOrient {
my ($self) = @_;
my $orient = $self->{O};
   print "ORIENTATION  = $orient\n";
}#sub dbgMdbGetOrient

sub dbMdbSetFunction {
my ($self,$funct) = @_;
    $self->{F} = $funct;
}#sub dbMdbSetFunction

sub dbMdbGetFunction {
my ($self) = @_;
my $funct = $self->{F};
return($funct);
}#sub dbMdbGetFunction

sub dbgMdbGetFunction {
my ($self) = @_;
my $funct = $self->{F};
   print "Function  = $funct\n";
}#sub dbgMdbGetFunction

sub dbMdbSetType {
my ($self,$type) = @_;
    if ( $type =~ /comb/ || $type =~ /COMB/ ) { $self->{T} = 0; }
    elsif ( $type =~ /seq/ || $type =~ /SEQ/ ) { $self->{T} = 1; }
    elsif ( $type =~ /block/ || $type =~ /BLOCK/ ) { $self->{T} = 2; }
    else { print "WARN : 0 :  the cell type is unknown\n"; }
}#sub dbMdbSetType

sub dbMdbGetType {
my ($self) = @_;
my $type = $self->{T};
return($type);
}#sub dbMdbGetType

sub dbgMdbGetType {
my ($self) = @_;
my $type = $self->{T};
   print "Type  = $type\n";
}#sub dbgMdbGetType

##----------------------------------------------------##
sub dbMdbSetPinRoutibility {
my ($self,$route) = @_;
    $self->{R} = $route;
}#sub dbMdbSetPinRoutibility

sub dbMdbGetPinRoutibility {
my ($self) = @_;
my $route = $self->{R};
return($route);
}#sub dbMdbGetPinRoutibility
##----------------------------------------------------##

sub dbMdbGetWirePins {
my ($self) = @_;
my @pins = $self->dbMdbGetPins;
my @wirePins = ();
foreach my $pinName ( @pins ) {
  if ( $pinName =~ /\[[0-9]+\]/ ) {
    next;
  }
  push(@wirePins, $pinName);
}
return(@wirePins);
}#sub dbMdbGetWirePins

sub dbMdbGetBusPins {
my ($self) = @_;
my @pins = $self->dbMdbGetPins;
my @busPins = ();
foreach my $pinName ( @pins ) {
  if ( $pinName =~ /\[[0-9]+\]/ ) {
    push(@busPins, $pinName);
  }
}
return(@busPins);
}#sub dbMdbGetBusPins

##----------------------------------------------------##
sub dbMdbAddPinPolygon {
my ($self,$pinName,$data) = @_;
   push( @{${$self->{PIN}}{$pinName}->{POLYGON}}, $data);
}#sub dbMdbAddPinPolygon

sub dbMdbGetPinPolygon {
my ($self,$pinName) = @_;
   my @data = @{${$self->{PIN}}{$pinName}->{POLYGON}};
return(@data);
}#sub dbMdbGetPinPolygon
#--------------------------------------------------------------------------------------------------------------------------------------------#
sub dbMdbAddObsPolygon {
my ($self,$obsdata) = @_;
   push(@{$self->{OBS_POLYGON}}, $obsdata);
}#sub dbMdbAddObsPolygon

sub dbMdbGetObsPolygon {
my ($self) = @_;
my @obs = @{$self->{OBS_POLYGON}};
return(@obs);
}#sub dbMdbGetObsPolygon


#---------------------------------------------------------------------------------------------------------------------------------------------------#
sub dbMdbSetAntennaFound {
my ($self,$pinName,$antenna_found) = @_;
 ${$self->{PIN}}{$pinName}->{ANTENNA_FOUND} = $antenna_found;
}#sub dbMdbSetAntennaFound

sub dbMdbGetAntennaFound {
my ($self,$pinName) = @_;
my $antenna_found = ${$self->{PIN}}{$pinName}->{ANTENNA_FOUND};
return($antenna_found);
}#sub dbMdbGetAntennaFound
#---------------------------------------------------------------------------------------------------------------------#
sub dbMdbSetForeignCoords{
my ($self,$x,$y) = @_;
  push(@{$self->{FR_COORDS}},$x);
  push(@{$self->{FR_COORDS}},$y);
}#sub dbMdbSetForeignCoords

sub dbMdbGetForeignCoords{
my ($self) = @_;
my @fr_coords = @{$self->{FR_COORDS}};
return(@fr_coords);
}#sub dbMdbGetForeignCoords

sub dbgMdbGetForeignCoords{
my ($self) = @_;
my @fr_coords = @{$self->{FR_COORDS}};
   print "FOREIGN = $fr_coords[0] by $fr_coords[1]\n";
}#sub dbgMdbGetForeignCoords
#---------------------------------------------------------------------------------------------------------------------#
1;
