package GDS;

sub new {
my $dd = {
          #TOP     => 'UND',
          #UU     => '',
          #DBU     => '',
          poly     => [],
          sref     => [],
          aref => [],
          };
bless $dd, 'GDS';
return $dd;
}# sub new

##-----------------------------------------#
#sub dbGDSSetTopCell {
#my ($self,$top) = @_;
#$self->{TOP} = $top;
#}#sub dbGDSSetTopCell
#
#sub dbGDSGetTopCell {
#my ($self) = @_;
#my $top = $self->{TOP};
#return($top);
#}#sub dbGDSGetTopCell
#
##-----------------------------------------#
#sub dbGDSSetUserUnit {
#my ($self,$uu) = @_;
#$self->{UU} = $uu;
#}#sub dbGDSSetUserUnit
#
#sub dbGDSGetUserUnit {
#my ($self) = @_;
#my $uu = $self->{UU};
#return($uu);
#}#sub dbGDSGetUserUnit
#
##-----------------------------------------#
#sub dbGDSSetDBU {
#my ($self,$dbu) = @_;
#$self->{DBU} = $dbu;
#}#sub dbGDSSetDBU
#
#sub dbGDSGetDBU {
#my ($self) = @_;
#my $dbu = $self->{DBU};
#return($dbu);
#}#sub dbGDSGetDBU
#
#-----------------------------------------#
sub dbGDSAddPoly {
my ($self,$poly) = @_;
push(@{$self->{poly}}, $poly);
}#sub dbGDSAddPoly

sub dbGDSGetPoly {
my ($self) = @_;
my @polys = @{$self->{poly}};
return(@polys);
}#sub dbGDSGetPoly

sub dbGDSWipePoly {
my ($self) = @_;
undef (@{$self->{poly}});
}#sub dbGDSWipePoly

#-----------------------------------------#
sub dbGDSAddSref {
my ($self,$sref) = @_;
push(@{$self->{sref}}, $sref);
}#sub dbGDSAddSref

sub dbGDSGetSref {
my ($self) = @_;
my @srefs = @{$self->{sref}};
return(@srefs);
}#sub dbGDSGetSref

#-----------------------------------------#
sub dbGDSAddAref {
my ($self,$aref) = @_;
push(@{$self->{aref}}, $aref);
}#sub dbGDSAddAref

sub dbGDSGetAref {
my ($self) = @_;
my @arefs = @{$self->{aref}};
return(@arefs);
}#sub dbGDSGetAref

#-----------------------------------------#

1;
