sub read_gds{
  use GDS2;
  use List::Part;
  use List::Flatten;
  use Benchmark;
  my $t0 = new Benchmark;
  
  my $noOfArg = @_;
  my $gdsFile;
  if($noOfArg < 2 || $_[0] eq '-h' || $_[0] eq '-help' || $_[0] eq '-HELP') {
     print "usage : read_gds  -gds < gds file >\n";
  }else {
     for(my $i=0 ; $i<$noOfArg; $i++){
         if($_[$i] eq "-gds"){$gdsFile = $_[$i+1];} 
     }#for correct no.of Arguments
  
     my %cell_size = ();
     my %boundary_layer_hash = ();
     my %overlap_layer_hash = ();
     my %via_hash = ();
     my %rev_overlap_layer_hash = ();
     my %rev_via_hash = ();
     my %temp_layer_map = ();
     my %text_layer_hash = ();
     ######################### Reading GDS file ###############################
     my %CELL_POLYGONS = ();
     my %PIN_TEXT_COORDS = ();
     my %AREF_DATA = ();
     my %SREF_DATA = ();
     my %cell_hash = ();
  
     my $string_found = 0;
     my $boundary_found = 0;
     my $path_found = 0;
     my $node_found = 0;
     my $box_found = 0;
     my $text_found = 0;
     my $aref_found = 0;
     my $sref_found = 0;
     my $compact = 0;
  
    
     my $gds2File = new GDS2(-fileName=>"$gdsFile");
     my ($string_name, $layer_name, $boundary_data_type, $path_layer, $path_data_type, $path_type, $path_width, $path_bgnExtn, $path_endExtn, $path_unitWidth, $path_xyInt);
     #my ($string_name, $layer_name, $boundary_data_type, $path_layer, $path_data_type, $path_type, $path_width, $path_bgnExtn, $path_endExtn, $path_unitWidth, $path_xyInt);
     #my ($sname, $text_layer, $textType, $presentation, $strans, $mag, $angle, $col, $row, $sname1, $sref_strans, $sref_mag, $sref_angle);
     #my @pin_coords = ();
     #my @total_poly = ();
     #my @aref_data = ();
     #my @sref_data = ();
     #my @X_COORDS = ();
     #my @Y_COORDS = ();
     #my @xy = ();
  
     while ($gds2File->readGds2Record) {
       if($gds2File->isUnits){
         my ($uu,$dbu) = $gds2File->returnUnitsAsArray;
         $GLOBAL->dbfGlobalSetGDSUserUnit($uu); 
         $GLOBAL->dbfGlobalSetGDSDBU($dbu); 
       }elsif($gds2File->isBgnstr){
          $string_found = 1;
          $string_name = "";
          #@pin_coords = ();
          #@total_poly = ();
          #@aref_data = ();
          #@sref_data = ();
          #@X_COORDS = ();
          #@Y_COORDS = ();
       }elsif($gds2File->isEndstr){
          #@{$CELL_POLYGONS{$string_name}}= @total_poly if(@total_poly > 0);
          #@{$PIN_TEXT_COORDS{$string_name}}= @pin_coords if(@pin_coords > 0);
          #@{$AREF_DATA{$string_name}}= @aref_data if(@aref_data > 0);
          #@{$SREF_DATA{$string_name}}= @sref_data if(@sref_data > 0);
          if(!exists $cell_size{$string_name}){
            my ($width, $height) = (0, 0);
            @X_COORDS = sort{$a<=>$b}@X_COORDS;
            @Y_COORDS = sort{$a<=>$b}@Y_COORDS;
            $width = $X_COORDS[-1] - $X_COORDS[0] if(@X_COORDS > 0);
            $height = $Y_COORDS[-1] - $Y_COORDS[0] if(@Y_COORDS > 0);
            $cell_size{$string_name} = [$layer_name, $width, $height];
          }
          $string_found = 0;
       }elsif($gds2File->isBoundary){
          $boundary_found = 1;
          $layer_name = "";
          $boundary_data_type = "";
       }elsif($gds2File->isPath){
          $path_found = 1;
          $path_layer = 0;
          $path_data_type = "";
          $path_type = 0;
          $path_width = 0.0;
  	  $path_bgnExtn = 0;
          $path_endExtn = 0;
          #$path_unitWidth = "";
          #$path_xyInt = "";
       }elsif($gds2File->isNode){
          $node_found = 1;
          print "WARN:NODE format is found. We are not supporting this\n";
       }elsif($gds2File->isBox){
          $box_found = 1;
          print "WARN:BOX format is found. We are not supporting this\n";
       }elsif($gds2File->isText){
          $text_found = 1;
          $text_layer = "";
          $textType = "";
          $presentation = 0000000000000000;
          $strans = 0000000000000000;
          $mag = 1;
          @xy = ();
       }elsif($gds2File->isAref){
          $aref_found = 1;
          $sname = "";
          $strans = 0000000000000000;
          $mag = 1;
          $angle = 0;
          $col = 0;
          $row = 0;
       }elsif($gds2File->isSref){
          $sref_found = 1;
          $sname1 = "";
          $sref_strans = 0000000000000000;
          $sref_mag = 1;
          $sref_angle = 0;
       }elsif($gds2File->isEndel){
          $boundary_found = 0;
          $path_found = 0;
          $node_found = 0;
          $box_found = 0;
          $text_found = 0;
          $aref_found = 0;
          $sref_found = 0;
       }
       if($string_found == 1){
          if($gds2File->isStrname){
             $string_name = $gds2File->returnStrname;
             if(exists $cell_hash{$string_name}){
                my $val = $cell_hash{$string_name};
                $cell_hash{$string_name} = $val+1;
             }else{
                $cell_hash{$string_name} = 0;
             }
          }elsif($boundary_found == 1){
             if($gds2File->isLayer){
                $layer_name = $gds2File->returnLayer;
                if((!exists $boundary_layer_hash{$layer_name}) && $layer_name != $boundary_layer){$boundary_found = 0;}
             }elsif($gds2File->isDatatype){
                $boundary_data_type = $gds2File->returnDatatype;
             }elsif($gds2File->isXy){
                my @poly_coords = $gds2File->returnXyAsArray;
  
                ############ calculating cellsize ##############
                my $j=0;
                my @parted_poly_coords = part { $j++/2 } @poly_coords[0 .. $#poly_coords];
                my ($minx, $miny, $maxx, $maxy) = polygon_bbox @parted_poly_coords;
                if(!exists $cell_size{$string_name}){
                   $cell_size{$string_name} = [$layer_name, $maxx-$minx, $maxy - $miny]; 
                }else{
                   my ($layer, $width, $height) = @{$cell_size{$string_name}};
                   if($width < ($maxx-$minx) || $height < ($maxy - $miny)){
                      $cell_size{$string_name} = [$layer_name, $maxx-$minx, $maxy - $miny]; 
                   }
                }
                ################################################
                push(@total_poly, [$layer_name, @poly_coords]);
             }else{next;}
          }elsif($path_found == 1){
             if($gds2File->isLayer){
                $path_layer = $gds2File->returnLayer;
                if(!exists $boundary_layer_hash{$path_layer}){$path_found = 0;}
             }elsif($gds2File->isDatatype){
                $path_data_type = $gds2File->returnDatatype;
             }elsif($gds2File->isPathtype){
                $path_type = $gds2File->returnPathtype;
             }elsif($gds2File->isWidth){
                $path_width = $gds2File->returnWidth;
                #$path_width = $path_width * $uu;
             }elsif($gds2File->isBgnextn){
                $path_bgnExtn = $gds2File->returnBgnextn;
                #$path_bgnExtn = $path_bgnExtn * $uu;
             }elsif($gds2File->isEndextn){
                $path_endExtn = $gds2File->returnEndextn;
                #$path_endExtn = $path_endExtn * $uu;
             }elsif($gds2File->isXy){
                my @path_coords = $gds2File->returnXyAsArray;
                #$_ *= $uu for @path_coords;
                push(@total_poly, [$path_layer, xformPathSegToPolygon(\@path_coords,$path_data_type, $path_type, $path_width, $path_bgnExtn, $path_endExtn)]);
             }else{next;}
          }elsif($text_found == 1){
             if($gds2File->isXy){
                @xy = $gds2File->returnXyAsArray;
                #$_ *= $uu for @xy;
             }elsif($gds2File->isLayer){
                $text_layer = $gds2File->returnLayer;
                if($text_layers_str ne ""){     
                  if(!exists $text_layer_hash{$text_layer}){
                     $text_found = 0;
                  }#if exists in text_layer_hash
                }#if text_layer entry is given in config file
             }elsif($gds2File->isTexttype){
                $textType = $gds2File->returnTexttype;
             }elsif($gds2File->isPresentation){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $presentation = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isStrans){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $strans = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isMag){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $mag = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isString){
                my $pinName = $gds2File->returnString;
                push(@pin_coords, [$pinName, $text_layer, $textType, $presentation, $strans, $mag, @xy]);
             }else{next;}
          }elsif($aref_found == 1){
             if($gds2File->isSname){
                $sname = $gds2File->returnSname;
                if(exists $cell_hash{$sname}){
                   my $val = $cell_hash{$sname};
                   $cell_hash{$sname} = $val+1;
                }else{
                   $cell_hash{$sname} = 0;
                }
             }elsif($gds2File->isStrans){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $strans = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isMag){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $mag = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isAngle){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $angle = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isColrow){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                ($col,$row) = (split(/\s+/,$string))[1,2]; 
             }elsif($gds2File->isXy){
                my @poly_coords = $gds2File->returnXyAsArray;
                #$_ *= $uu for @poly_coords;
                push(@aref_data, [$sname, $strans, $mag, $angle, $col, $row, @poly_coords]);
             }else{next;}
          }elsif($sref_found == 1){
             if($gds2File->isSname){
                $sname1 = $gds2File->returnSname;
                if(exists $cell_hash{$sname1}){
                   my $val = $cell_hash{$sname1};
                   $cell_hash{$sname1} = $val+1;
                }else{
                   $cell_hash{$sname1} = 0;
                }
             }elsif($gds2File->isStrans){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $sref_strans = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isMag){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $sref_mag = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isAngle){
                my $string = $gds2File->returnRecordAsString(-compact=>$compact);
                $string =~ s/^\s+//g;
                $sref_angle = (split(/\s+/,$string))[1]; 
             }elsif($gds2File->isXy){
                my @poly_coords = $gds2File->returnXyAsArray;
                #$_ *= $uu for @poly_coords;
                push(@sref_data, [$sname1, $sref_strans, $sref_mag, $sref_angle, @poly_coords]);
             }else{next;}
          }else{next;}
       }else{next;}
     }#while
  }#if correct num of arg
  
  my $tfinal = new Benchmark;
  my $tdfinal = timediff($tfinal, $t0);
  print "script read_gds took:",timestr($tdfinal),"\n";
}#sub read_gds

1;


