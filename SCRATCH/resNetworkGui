#!/usr/bin/perl
use Tk;
use Tk::Frame;
use Tk::Scrollbar;
use Tk::WorldCanvas;


my $top = MainWindow->new();
$top->title (" Resistive Network ");
$top->geometry("750x700+0+0");

my $canvas = $top->Scrolled('WorldCanvas', -scrollbars=>'se',-bg =>'black',-width=>540, -height=>540)->pack(qw/-side left -expand 1 -fill both/);
$canvas->Subwidget('xscrollbar')->configure(-takefocus => 0);
$canvas->Subwidget('yscrollbar')->configure(-takefocus => 0);
$canvas->configure(-confine => 1);
$canvas->CanvasFocus;

&display_resistive_graph($ARGV[0], $canvas);

MainLoop();

##################################################################################################
################################### display resistive graph ######################################
##################################################################################################
sub display_resistive_graph{
  my $file = $_[0];
  my $canvas = $_[1];
  
  my $mulFactor = 1; 
  my $netName;
  open(READ, $file);
  while (<READ>){
    chomp($_);
    if($_ =~ /^\s*#/) { next; }
    if($_ =~ /^\s*$/) { next; }
    if($_ =~ /^DIEAREA/) {
       my @bbox = split(/\s+/, $_);
       shift @bbox;

       my $dieWMultFact  = 500/($bbox[2] - $bbox[0]);
       my $dieHMultFact  = 500/($bbox[3] - $bbox[1]);
       if($dieHMultFact < $dieWMultFact){
          $mulFactor = $dieHMultFact;
       }else{
          $mulFactor =  $dieWMultFact; 
       }
       $_ *= $mulFactor for @bbox;
       $_ += 20 for @bbox;
       $canvas->createRectangle(0,0,540,540, -outline,"black");
       $canvas->createRectangle(@bbox, -outline,"yellow");
    }elsif($_ =~ /^NET/){
      $netName = (split(/\s+/, $_))[1];
    }else{
      my ($node1, $node2, $node1_coords_str, $node2_coords_str, $resistance) = split(/\s+/, $_);
      my @node1XY = split(/\|/, $node1_coords_str);
      my @node2XY = split(/\|/, $node2_coords_str);
      $_ *= $mulFactor for @node1XY;
      $_ += 20 for @node1XY;
      $_ *= $mulFactor for @node2XY;
      $_ += 20 for @node2XY;

      my $is_node1_found = $canvas->find("withtag", "node_".$node1);
      my $is_node2_found = $canvas->find("withtag", "node_".$node2);
    
      $canvas->createLine(@node1XY,@node2XY, -fill=>"green");
      $canvas->createText(@node1XY, -fill=>"red", -tags=>"node_".$node1, -anchor=>"sw", -text=>$node1) if($is_node1_found == 0);
      $canvas->createText(@node2XY, -fill=>"red", -tags=>"node_".$node2, -anchor=>"sw", -text=>$node2) if($is_node2_found == 0);

    }
  }
  close (READ);

  $canvas->viewAll;
  my @box_org = $canvas->getView();
  &canvas_zoomIn_zoomOut($top, $canvas,\@box_org);

}#sub display_resistive_graph

##################################################################################################
##################################### zoom-in & zoom-out #########################################
##################################################################################################
sub canvas_zoomIn_zoomOut{
  my $top = $_[0];
  my $canvas = $_[1];
  my @view_bbox = @{$_[2]};

  $canvas->CanvasBind('<3>'               => sub {$canvas->configure(-bandColor => "");$canvas->configure(-bandColor => 'red');$canvas->rubberBand(0)});
  $canvas->CanvasBind('<B3-Motion>'       => sub {$canvas->rubberBand(1)});
  $canvas->CanvasBind('<ButtonRelease-3>' => sub {my @box = $canvas->rubberBand(2);$canvas->viewArea(@box, -border => 0);});
  $canvas->CanvasBind('<2>'               => sub {$canvas->viewArea(@view_bbox, -border => 0)});               

  $canvas->CanvasBind('<i>' => sub {$canvas->zoom(1.25);my @bbox = $canvas->getView();});
  $canvas->CanvasBind('<o>' => sub {$canvas->zoom(0.80);my @bbox = $canvas->getView();});
  $canvas->CanvasBind('<f>' => sub {$canvas->viewArea(@view_bbox, -border => 0);});

  $canvas->CanvasBind('<KeyPress-Up>'   => sub {$canvas->panWorld(0,  200);});
  $canvas->CanvasBind('<KeyPress-Down>' => sub {$canvas->panWorld(0, -200);});
  $canvas->CanvasBind('<KeyPress-Left>' => sub {$canvas->panWorld(-200, 0);});
  $canvas->CanvasBind('<KeyPress-Right>'=> sub {$canvas->panWorld( 200, 0);});
}#sub canvas_zoomIn_zoomOut


