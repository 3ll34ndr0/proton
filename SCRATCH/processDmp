#!/usr/bin/perl -w

my $in_vcd_file = "" ;
my $out_vcd_file = "" ;
my $overwrite_output_vcd = 0;
for(my $i =0; $i<=$#ARGV;$i++){
  if($ARGV[$i] eq "-vcd_in"){
    $in_vcd_file = $ARGV[$i+1];
  }
  if($ARGV[$i] eq "-vcd_out"){
    $out_vcd_file = $ARGV[$i+1];
  }
  if($ARGV[$i] eq "--overwrite"){
    $overwrite_output_vcd = 1;
  }
  if($ARGV[$i] eq "-help"){ 
    print "Usage :\n"; 
    print "processFlipSimVcd -vcd_in <fileName> -vcd_out <fileName>\n";
    print "      : --overwrite\n";
    print "      : -help\n";
  }
}
if($in_vcd_file eq ""){ 
  print "Usage :\n"; 
  print "processFlipSimVcd -vcd_in <fileName> -vcd_out <fileName>\n";
  print "      : --overwrite\n";
  print "      : -help\n";
  exit;
}elsif(!(-e $in_vcd_file)){
  print "Error: vcd file $in_vcd_file doesn't exists\n";
  exit;
}elsif(!(-r $in_vcd_file)){
  print "Error: vcd file $in_vcd_file doesn't have permission to be read\n";
  exit;
}
if($out_vcd_file eq ""){
  $out_vcd_file = $in_vcd_file;
  $out_vcd_file =~ s/\.vcd//;
  $out_vcd_file = $out_vcd_file."_out.vcd";
}
if(-e $out_vcd_file){
  if($overwrite_output_vcd == 0){
    print "Error: vcd file $out_vcd_file exists,please use --overwrite\n";
    exit;
  }
  if(!(-w $out_vcd_file)){
    print "Error: vcd file $out_vcd_file doesn't have permission to be written\n";
    exit;
  }
}
open(READ,"<$in_vcd_file");
open(WRITE,">$out_vcd_file");
my %time_vs_sig_values = ();
my $var_val_section = 0;
my $dump_var_section = 0;
my $temp_hash_val = "";
my $current_time_val = "";
my $current_vars_val = "";
my @current_vars_val_array = ();
my $current_var_val = "";
my $previous_var_val = "";
while(<READ>) {
  chomp();
  if($var_val_section == 0){
    print WRITE "$_\n";
    if($_ =~ /\$enddefinitions/){
      $var_val_section = 1;
    }
  }else{
    if(($dump_var_section == 0) && ($_ eq "\$dumpvars")){
      $dump_var_section = 1;
      $current_time_val = "#0";
      next;
    }
    if($_=~ /^#/){
      $current_time_val = $_;
      if($dump_var_section == 2){
        if($current_time_val eq "#0"){
          delete $time_vs_sig_values{$current_time_val};
          $dump_var_section = 3;
        }
      }elsif($dump_var_section == 1){
        if($current_time_val eq "#0"){
          delete $time_vs_sig_values{$current_time_val};
          $dump_var_section = 3;
        }else {
          $dump_var_section = 2;
        }
      }
      next;
    }
    if(exists $time_vs_sig_values{$current_time_val}){
      $temp_hash_val = $time_vs_sig_values{$current_time_val};
      $temp_hash_val = $temp_hash_val."_slvr_".$_;
      $time_vs_sig_values{$current_time_val} = $temp_hash_val;
    }else {
      $time_vs_sig_values{$current_time_val} = $_;
    }
  }
}
close READ;
foreach $current_time_val (sort {substr($a,1) <=> substr($b,1)}keys %time_vs_sig_values){
  print WRITE "$current_time_val\n";
  $current_vars_val = $time_vs_sig_values{$current_time_val};
  @current_vars_val_array = (split(/_slvr_/,$current_vars_val));
  $previous_var_val = "";
  foreach $current_var_val (sort {substr($a,1) cmp substr($b,1)}@current_vars_val_array){
    if(($previous_var_val eq "") || (substr($previous_var_val,1) ne substr($current_var_val,1))){
      print WRITE "$current_var_val\n";
      $previous_var_val = $current_var_val;
    }
  }
}
close WRITE;
