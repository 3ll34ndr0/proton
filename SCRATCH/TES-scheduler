
use DBI;
use lib "/usr/lib/perl5/site_perl/5.8.5/i386-linux-thread-multi/DBD";
use DBD::mysql;

use POSIX qw(setsid);
use Schedule::Load::Schedule;

my $SQLDB ="";
my $SQLU = "";
my $SQLP = "";
my $noOfArguments = @ARGV;
print "$noOfArguments\n";
if($_[0] eq "-h" || $noOfArguments < 6)  {
        print "Usage :  scheduler\n";
        print "                       -sqldb <sql database in qoutes>\n";
        print "                              example \"DB\;aditya.lnx4.com\"\n";
        print "                       -sqluser <uername authorised to access SQL database>\n";
        print "                       -sqlpasswd <password>\n";
        print "                       -luser <username which will launch qa jobs>\n";
        print "                       -lpasswd <password>\n";
        print "                       <-debug>\n";

  }
  else {
  for(my $i = 0; $i < $noOfArguments; $i++){
  if($ARGV[$i] eq "-sqldb"){ $SQLDB = $ARGV[$i+1]; }
  if($ARGV[$i] eq "-sqluser"){ $SQLU = $ARGV[$i+1]; }
  if($ARGV[$i] eq "-sqlpasswd"){ $SQLP = $ARGV[$i+1]; }
  if($ARGV[$i] eq "-luser"){ $User = $ARGV[$i+1]; }
  if($ARGV[$i] eq "-lpasswd"){ $Passwd = $ARGV[$i+1]; }
                                           }#for all arguments


chdir '/'                 or die "Can't chdir to /: $!";
umask 0;
open STDIN, '/dev/null'   or die "Can't read /dev/null: $!";
open STDOUT, '>/home/rajeevs/mac.rpt' or die "Can't write to /dev/null: $!";
#open STDOUT, '/dev/null' or die "Can't write to /dev/null: $!";
open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";
defined(my $pid = fork)   or die "Can't fork: $!";
exit if $pid;
setsid                    or die "Can't start a new session: $!";

$path2eq = $GLOBAL->dbfGlobalGetProtonHome;
while(1) {
sleep(2);
my $waitTime = 300;
my $estRunTime = 1500;


#----------------------------------------------#
#query SQL data base for testcases             # 
#----------------------------------------------#
print "$SQLDB,$SQLU,$SQLP\n";
$dbh = DBI->connect( "dbi:mysql:$SQLDB",$SQLU,$SQLP ) || die "Cannot connect: $DBI::errstr";
$sth = $dbh->prepare( "SELECT Status, TestPath, TestName  FROM designStat WHERE RID=0 ");
$sth->execute;
my @jobQueue = ();
while (($status,$tp,$t) = $sth->fetchrow_array) { my $str = $t." ".$tp." ".$status ; print "$str\n";  push(@tests,$str); }
my $len = @tests;
print "INFO:scheduler running through $len testcases\n";
while ( defined ($str = shift @tests )) {
my ($t , $tp , $status ) = ( split(/\s+/,$str))[0,1,2];
print "INFO:scheduler $t : $tp : $status\n";
if ( $status == 0 ) {
		#----------------------------------------------#
		# get status of machines                       #
		#----------------------------------------------#
		print "INFO:scheduler get the best machine\n";
		my $chooosenMachine = qx/$path2eq\/tesStatusd/;
		chomp($chooosenMachine);
		print "INFO:scheduler system choose $chooosenMachine\n";
		#-------------------------------------------------------------------------------------------------------------------#
                    print "INFO:scheduler preparing to execute $t on $chooosenMachine\n";
                    push(@jobQueue,$t);
                    print "INFO:scheduler Launching a job on the machine $chooosenMachine as $User:$Passwd and dir $tp ....\n";
                    system("$path2eq/tesLauncher -host $chooosenMachine -luser $User -lpasswd $Passwd -path $tp &");
                    sleep($waitTime);
                    print "INFO:scheduler finished job ....\n";
                    $jobcount ++;
                    $sth1 = $dbh->prepare( "UPDATE designStat SET Status = '2' WHERE TestName='$t'" );
                    $sth1->execute;
                    print "INFO:scheduler Setting the status of test case $t as 2 : in process of execution\n";
                    }
$status = -1;
                                                  }# while
$sth->finish;

#----------------------------------------------#
#send email of successful job execution        # 
#----------------------------------------------#
}# while
                   }#if correct arguments
