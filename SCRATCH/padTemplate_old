#!/usr/bin/perl
use Benchmark;
my $t0 = new Benchmark;
use Spreadsheet::ParseExcel;

my $input_file = "";
for(my $i=0;$i<=$#ARGV;$i++){
  if($ARGV[$i] eq "-xls"){$input_file = $ARGV[$i+1];}
}#for
my $xls = Spreadsheet::ParseExcel::Workbook->Parse($input_file);
&call_read_template($xls);
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "padTemplate took: ",timestr($td),"\n";

#--------------------------------------------------------------------------------------------#
sub call_read_template {
  my $xl = $_[0];
  open(WRITE_TCL,">t.tcl");
  my $top_module = "";
  for my $sheet ( @{$xl->{Worksheet}}){
    for my $row ( $sheet->{MinRow}..$sheet->{MaxRow}){
      my ($llx,$lly,$space,$pad_pitch) = (0,0,0,0);
      my ($parent_module,$modName,$instName,$orient) = ("","","","");
      for my $col ($sheet->{Mincol}..$sheet->{MaxCol}){
        my $First_cell = $sheet->{Cells}[0][$col]; 
        my $cell = $sheet->{Cells}[$row][$col];
        my $headers = $First_cell->{Val};
        my $cell_value = $cell->{Val};
        if($headers =~ /module/i){
          if($cell_value eq ""){last LOOPA;}
            $modName = $cell_value;
            $modName =~ s/^\s+|\s+$//g;
            $MODULE{$modName} = 1;
        }elsif($headers =~ /parent/i){
            $parent_module = $cell_value;
            $parent_module =~ s/^\s+|\s+$//g;
        }elsif($headers =~ /instance/i){
            $instName = $cell_value;
            $instName =~ s/^\s+|\s+$//g;
        }elsif($headers =~ /locX/i){
            $llx = $cell_value if($cell_value ne "");
        }elsif($headers =~ /locY/i){
            $lly = $cell_value if($cell_value ne "");
        }elsif($headers =~ /width/i){
            $mod_width = $cell_value if($cell_value ne "");
        }elsif($headers =~ /height/i){
            $mod_height = $cell_value if($cell_value ne "");
        }elsif($headers =~ /orient/i){
            $orient = $cell_value if($cell_value ne "");
            $orient =~ s/^\s+|\s+$//g;
        }
      }#for
      if($row == 1 ){
        print WRITE_TCL "createPseudoTopModule -top $modName -W $mod_width  -H $mod_height\n";
        $top_module = $parent_module;
      }elsif($row > 1) {
        print WRITE_TCL "createPseudoInstance -parent $parent_module -cell $modName -inst $instName -loc {$llx,$lly} -orient $orient\n";
       }
    }#for
  }#for 
      print WRITE_TCL "commit_module -module $top_module\n";
      print WRITE_TCL "hier2flat --logical --physical\n"; 
      print WRITE_TCL "write_def -output $top_module.def --overwrite --write_unconnected_instances\n";
      print WRITE_TCL "def2gds -output $top_module --inst  --include_cell --cell_pin_text\n"; 
      print WRITE_TCL "create_gds_image -gds $top_module.gds -width 500 -height 500 -out $top_module.png\n";
}#sub call_read_template

