#!/usr/bin/perl 
use Benchmark;
my $t0 = new Benchmark;
my $noOfArguments = @ARGV; 

if($ARGV[0] eq "-h" || $ARGV[0] eq "-help" || $ARGV[0] eq "-HELP"){
  print "Usage : vcd2sstvFast\n";
  print "      : -vcd <fileName>\n";
  print "      : -output<fileName>\n";
}else {
  my $vcd_file = "";
  my $output = "";
  for(my $i =0; $i<$noOfArguments;$i++){
    if($ARGV[$i] eq "-vcd"){$vcd_file = $ARGV[$i+1];}
    if($ARGV[$i] eq "-output"){$output = $ARGV[$i+1];}
  }#for
  if(( -e $vcd_file) && (-r $vcd_file)){
    print "INFO : 001 : $vcd_file file exists and is readable!\n";
  }else{
    print "INFO : 001 : either $vcd_file file does not exists or it is not readable!\n";
    return;
  }
  open(WRITE,">$output");
  open(READ_VCD,$vcd_file);
  while(<READ_VCD>){
    chomp();
    if($_ =~ /^\s*\$timescale\b/){
      my $statement = $_;
      my $line = $_;
      while ($line !~ /^\s*\$end\b/){
         $line = <READ_VCD>;
         $statement .= " $line";
      }
    }elsif ($_ =~ /^\s*\$scope\b/) {
      my $scope = (split(/\s+/,$_))[2];
      push(@hier,$scope);
    }elsif ($_ =~ /^\s*\$upscope\b/){
      pop @hier;
    }elsif ($_ =~ /^\s*\$var\b/) {
      my ($type, $size, $code, $temp_name,$bus) = (split (/\s+/, $_))[1,2,3,4,5];
      my $name;
      if($bus =~ /\[/){
        $name = $temp_name."".$bus;
      }else {
        $name = $temp_name;
      }
      push (@{$full_vcd_net_vs_code{$code}},$name);
    }elsif($_ =~ /^\s*\$enddefinitions\b/){
      $time = 0 ;
    }elsif($_ =~ /^\s*\$dumpvars\b/){
      $dumpvars_begin = 1;
      $time = 0 ;
    }elsif($_ =~ /^\s*\$end\b/){
      $dumpvars_begin = 0;
    }elsif(($_ =~ /^([01zx])(.+)/i )||($_ =~  /^[br](\S+)\s+(.+)/i)){
      my $value = lc $1;
      my $code  = $2;
      if($_ !~ /^b/){
        print WRITE "$value$code "; 
      }else {
        if (exists $full_vcd_net_vs_code{$code}) {
          my @sig_list = @{$full_vcd_net_vs_code{$code}};
          foreach my $sig (@sig_list){
            if($sig =~ /\[/){
              $sig =~s/.*\[//;
              $sig =~s/\]//;
              my($min,$max) = (split(/\s*:\s*/,$sig))[0,1];
              my @port_with_bit_blast = ();
              my @value_list = ();
              my @net_vs_value_arr = ();
              if($min < $max){
                for(my $i = $min;$i <=$max;$i++){
                  push(@port_with_bit_blast,$code."[".$i."]");
                }#for
              }elsif($min > $max){
                for(my $i = $min;$i>=$max;$i--){
                  push(@port_with_bit_blast,$code."[".$i."]");
                }#for
              }elsif($min == $max){
                $i =  $min;
                push(@port_with_bit_blast,$code."[".$i."]");
              }
              foreach my $val (split //,$value){ 
                push (@value_list,$val);
              }#foreach
              my $diff_port_size_value_size = ($#port_with_bit_blast - $#value_list);
              for(my $i=0;$i < $diff_port_size_value_size;$i++){
                unshift (@value_list,0);
              }
              for (my $i =0;$i<=$#port_with_bit_blast;$i++){
                my $net_bit = $port_with_bit_blast[$i];
                my $net_value = $value_list[$i];
                push(@net_vs_value_arr,$net_value.$net_bit);
              }#for
              print WRITE"@net_vs_value_arr ";
            }  
          }#foreach
        }
      }
    }elsif ($_ =~ /^[#](\d+)/) {
      $time =  $1;
      print WRITE "\n$_ ";
    }
  }#while
  close(WRITE);
}#else
my $t1 = new Benchmark;
my $td = timediff($t1, $t0);
print "Command vcd2sstvFast took:",timestr($td),"\n";
