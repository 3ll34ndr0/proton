#!/usr/bin/perl
use Tk;
use Tk::WorldCanvas;
use Tk::Scrollbar;
use Tk::DummyEncode;
use Tk::Widget;
use utf8;


my $mw = MainWindow->new();

my $topFrame = $mw->Frame()->pack(-side => 'top');
my $bottomFrame = $mw->Frame()->pack(-side => 'top',-expand=>1, -fill=>'both');


my $canvas = $bottomFrame->Scrolled('WorldCanvas', -scrollbars=>'se',-bg =>'black',-width=>540, -height=>540)->pack(qw/-side left -expand 1 -fill both/);
$canvas->Subwidget('xscrollbar')->configure(-takefocus => 0);
$canvas->Subwidget('yscrollbar')->configure(-takefocus => 0);
$canvas->configure(-confine => 1);
$canvas->CanvasFocus;

my $button1 = $topFrame->Button(-text=>"Display Input", -command=>sub{&display_input($canvas);})->pack(-side=>'left');
my $button2 = $topFrame->Button(-text=>"Display Output", -command=>sub{&display_output($canvas);})->pack(-side=>'left');

&read_router_input("-file","hier_routes.grf");
&read_router_output("-file","hier_routes.grf.output");
&color_hash;
#&display_input($canvas);
#&display_output($canvas);
#&get;
&show_text($canvas);
&show_coords($canvas);

MainLoop;


################################### Reading Input Router File ###################################################
sub read_router_input {
my $noOfArguments = @_;
my @RECTS = ();
my @NETS = ();
   @BLOCKAGES_DISPLAY = ();
   @LAYERS = ();
my $inputFile = "";
my $netName = "";
my $blockagefound = 0;
my $netFound = 0;
my $layerSection = 0;
my $routingFound = 0;
my $layerName = "";
my $blklayerName = "";
my $type = "";
my $width = 0;

for(my $i = 0; $i < $noOfArguments; $i++ ) {
    if ($_[$i] eq "-file"){
        $inputFile = $_[$i+1];
    }
}
if($inputFile eq ""){ 
   print "WARN: Write the Router input file in corresponding entry box\n";
   return;
}

if ( -e $inputFile) {
open(READ_ROUTER_FILE, "$inputFile");
print "Begin reading the input router file $inputFile\n";
while(<READ_ROUTER_FILE>){
chomp($_);
$_ =~ s/^\s+//;
if($_ =~ /^\s*#/) { next; }
if($_ =~ /^\s*$/) { next; }

   if($_ =~ m/^DBUNITS\s+(\d+)/){
      $DBUNIT = $1; 
   }elsif($_ =~ m/^LAYER\s+(\w+)/){
      $layerName = $1;
      $layerSection = 1;  
   }elsif($_ =~ m/^END LAYER/){
      $layerSection = 0;
      $routingFound = 0;
   }elsif($_ =~ m/^DIEAREA\s+\((\d+) (\d+)\) \((\d+) (\d+)\)/){
      $DIEAREA{diellx} = $1;                 
      $DIEAREA{dielly} = $2;                 
      $DIEAREA{dieurx} = $3;                 
      $DIEAREA{dieury} = $4;                 
   }elsif($_ =~ /^BLOCKAGES/) {
      $blockagefound=1;
      next;
   }elsif($_ =~ /^END BLOCKAGES/) {
      $blockagefound=0;
      next;
   }elsif($_ =~ /^NETS/) {
      $netFound=1;
      next;
   }elsif( $_ =~ /^END NETS/){
      @{$NETS_HASH{$NETS[-1]}} = @RECTS; 
      $netFound =0;
      next;
   }else{
      if($netFound == 1){
         if($_ =~ m/^\-\s+(\w+)/){
            $netName = $1;
            if($#NETS > -1){
               @{$NETS_HASH{$NETS[-1]}} = @RECTS;
            }
            @RECTS = ();
            push(@NETS, $netName);
         }elsif($_ =~ m/^\+\s+\((\d+) (\d+)\)\s+(\w+)/){
            push(@RECTS, [$1,$2,$3]);
         }
      }elsif($blockagefound == 1){
            if($_ =~ m/^- LAYER\s+(.*)/){
              $blklayerName = $1;
            }elsif($_ =~ m/^RECT\s+\((.*) (.*)\)\s+\((.*) (.*)\)/){  
              push(@BLOCKAGES_DISPLAY, [$1,$2,$3,$4,$blklayerName]);
            } 
      }elsif($layerSection == 1){
         if($_ =~ m/^TYPE\s+(\w+)/){
            $type = $1;
            $routingFound = 1 if($type eq "ROUTING"); 
         }elsif($routingFound == 1){
            if($_ =~ m/^WIDTH\s+(\d+)/){  
               $width = $1;
               $LAYER_HASH{$layerName} = $width;
               push(@LAYERS,$layerName);  
            }else{next;}
         }
      }
   }
}#while read
close(READ_ROUTER_FILE);
} else {
  print "$inputFile DOES NOT EXIST\n";
}
}#sub read_router_input

################################### Reading Output Router File ###################################################
sub read_router_output {
my $noOfArguments = @_;
my $outputFile = "";
my $netStart = 0;
my $netName = "";
my @DATA = ();

for(my $i = 0; $i < $noOfArguments; $i++ ) {
    if ($_[$i] eq "-file"){
        $outputFile = $_[$i+1];
    }
}
if($outputFile eq ""){ 
   print "WARN: Write the Router Output file in corresponding entry box\n";
   return;
}

if ( -e $outputFile) {
open(READ_ROUTER_OUTFILE, "$outputFile");
print "Begin reading the output router file\n";
while(<READ_ROUTER_OUTFILE>){
chomp($_);
$_ =~ s/^\s+//;
if($_ =~ /^\s*#/) { next; }
if($_ =~ /^\s*$/) { next; }

   if($netStart == 0){
      $netStart =1;
      ($netName) = (split(/\s+/, $_))[0];
   }elsif($_ =~ /^!/) {
      @{$NETS_ROUTING{$netName}} = @DATA;
      $netStart = 0;
      $netName = "";
      @DATA = ();
   }else{
       if($netStart == 1){
          push(@DATA,$_);
       }
   }
}#while read
close(READ_ROUTER_OUTFILE);
} else {
  print "$outputFile DOES NOT EXIST\n";
}
}#sub read_router_output

####################################### Making Color Hash ##############################################
sub color_hash {
my @color = ("blue", "green", "orange", "red", "pink", "maroon", "tan", "peru", "cyan", "gold");
my $count = 0;
my $val;
foreach my $layer (@LAYERS){
     if($count < 10){
        $val = $color[$count];
     }else{$val = "red";}
        $COL_HASH{$layer} = $val;
        $count++;
}
}#sub color_hash  

############################## display Roter Input  #############################################################
sub display_input {
my $canvas = $_[0];
my $guiWidth = 520;
my $guiHeight = 520;

$canvas->delete("all");
my $die_llx = $DIEAREA{diellx};
my $die_lly = $DIEAREA{dielly};
my $die_urx = $DIEAREA{dieurx};
my $die_ury = $DIEAREA{dieury};

my $chipWidth = $die_urx - $die_llx;
my $chipHeight = $die_ury - $die_lly;

my $XdispFact = $guiWidth/$chipWidth; 
my $YdispFact = $guiHeight/$chipHeight; 
if($XdispFact < $YdispFact){$dfact = $XdispFact;
}else {$dfact = $YdispFact;}

$canvas->createRectangle(0,0,520,520, -outline=>"black");

my $llx = 10 + $die_llx*$dfact;
my $lly = 10 + $die_lly*$dfact;
my $urx = 10 + $die_urx*$dfact;
my $ury = 10 + $die_ury*$dfact;
$canvas->createRectangle($llx,$lly,$urx,$ury, -outline=>"green");

foreach my $net(keys %NETS_HASH){
   my @wire_coords = ();
   my $arrRect = $NETS_HASH{$net};
   foreach my $rect (@$arrRect){
        my @coords = @$rect;  
        my $llx1 = (10 + $coords[0]*$dfact) - 2;
        my $lly1 = (10 + $coords[1]*$dfact) - 2;
        my $urx1 = (10 + $coords[0]*$dfact) + 2;
        my $ury1 = (10 + $coords[1]*$dfact) + 2;
        my $color = $COL_HASH{$coords[2]} ;
$canvas->createRectangle($llx1,$lly1,$urx1,$ury1, -outline=>$color, -fill=>$color, -stipple=>"gray12",-tags=>$coords[2]);
        my $pointX = 10 + $coords[0]*$dfact;
        my $pointY = 10 + $coords[1]*$dfact;
        push(@wire_coords,$pointX,$pointY);
   }
$canvas->createLine(@wire_coords, -fill=>'yellow',-width=>3,-arrow=>'both',-tags=>$net);
 }
foreach my $blkgRect (@BLOCKAGES_DISPLAY){
   my $llx = 10 + @$blkgRect[0]*$dfact;       
   my $lly = 10 + @$blkgRect[1]*$dfact;       
   my $urx = 10 + @$blkgRect[2]*$dfact;       
   my $ury = 10 + @$blkgRect[3]*$dfact; 
   my $color = $COL_HASH{@$blkgRect[4]};  
$canvas->createRectangle($llx,$lly,$urx,$ury, -outline=>$color, -fill=>$color, -stipple=>"gray12",-tags=>$coords[2]);

}
$canvas->viewArea(0,0,540,540, -border => 0);
my @box_org = $canvas->getView();
&design_ZoomIn_ZoomOut($canvas,\@box_org);
}#sub display_input


############################## display Roter Output  #############################################################
sub display_output{
my $canvas = $_[0];
foreach my $net(keys %NETS_ROUTING){
     my $val = $NETS_ROUTING{$net};
     foreach my $rect (@$val){
          my @routeBox = xformHierNetSegToRouteBox($rect, \@LAYERS);
          my $llx  = 10 + $routeBox[0]*$dfact;
          my $lly  = 10 + $routeBox[1]*$dfact;
          my $urx  = 10 + $routeBox[2]*$dfact;
          my $ury  = 10 + $routeBox[3]*$dfact;
          my $layer = $routeBox[4];
          my $color = $COL_HASH{$layer}; 
$canvas->createRectangle($llx,$lly,$urx,$ury,-outline=>$color,-tags=>$net,-fill=>$color,-stipple=>"gray12");
     }
}
$canvas->viewArea(0,0,540,540, -border => 0);
}#sub display_output

sub xformHierNetSegToRouteBox {
my $netSeg = $_[0];
my @RLayers = @{$_[1]};
   if($netSeg =~m/\((\d+)\,(\d+)\,(\d+)\)\-\((\d+)\,(\d+)\,(\d+)\)/){
      if($3 == $6){
         my $layer = $RLayers[$3-1]; 
             my $defaultWidth = 2;
             my $W = $defaultWidth*$DBUNIT;
             my $llx = $1-($W/2);
             my $lly = $2-($W/2);
             my $urx = $4+($W/2);
             my $ury = $5+($W/2);
             return($llx,$lly,$urx,$ury,$layer);
          }#if the routiung layer exists
      }#if layer found
}#sub xformHierNetSegToRouteBox

###########################################################################################################
sub design_ZoomIn_ZoomOut{
my @arg = @_;
my $canvas = $arg[0];
my @view_bbox = @{$arg[1]};
   $canvas->CanvasBind('<3>'               => sub {$canvas->configure(-bandColor => "");
                                                   $canvas->configure(-bandColor => 'red');
                                                   $canvas->rubberBand(0)});
   $canvas->CanvasBind('<B3-Motion>'       => sub {$canvas->rubberBand(1)});
   $canvas->CanvasBind('<ButtonRelease-3>' => sub {my @box = $canvas->rubberBand(2);
                                                   $canvas->viewArea(@box, -border => 0);});
   $canvas->CanvasBind('<2>'               => sub {$canvas->viewArea(@view_bbox, -border => 0);});               

   $canvas->CanvasBind('<i>' => sub {$canvas->zoom(1.25)});
   $canvas->CanvasBind('<o>' => sub {$canvas->zoom(0.8)});
   $canvas->CanvasBind('<f>' => sub {$canvas->viewArea(@view_bbox, -border => 0);});

   $canvas->CanvasBind('<KeyPress-Up>'   => sub {$canvas->panWorld(0,  200);});
   $canvas->CanvasBind('<KeyPress-Down>' => sub {$canvas->panWorld(0, -200);});
   $canvas->CanvasBind('<KeyPress-Left>' => sub {$canvas->panWorld(-200, 0);});
   $canvas->CanvasBind('<KeyPress-Right>'=> sub {$canvas->panWorld( 200, 0);});

}#sub design_ZoomIn_ZoomOut
###############################################################################################################
sub show_text {
my $canvas = $_[0];
$canvas->CanvasBind("<t><1>"=> [sub {
                                        my @xy = $canvas->eventLocation();
                                        my $x = $xy[0];
                                        my $y = $xy[1];
                                        my @id      = $canvas->find(qw/withtag current/);
                                        my @tagList = $canvas->gettags($id[0]);
                         $canvas->createText($x,$y, -text=>$tagList[0] ,-anchor=>"sw",-tags=>"TEMP",-fill=>"white",-font=>"Times 12");
                   }]);
$canvas->CanvasBind("<B1-ButtonRelease>"=> [sub{$canvas->delete(TEMP);$canvas->delete(TEMPCOORD);}]);
}#sub show_text

################################################################################################################
sub show_coords{
my $canvas = $_[0];
$canvas->CanvasBind("<Button-1>"=> [sub {
                                        my @xy = $canvas->eventLocation();
                                        my $x = int(($xy[0] - 10)/$dfact);
                                        my $y = int(($xy[1] - 10)/$dfact);
                    $canvas->createText($xy[0],$xy[1], -text=>$x.",".$y ,-anchor=>"sw",-tags=>"TEMPCOORD",-fill=>"yellow",-font=>"Times 12");
                                    }]);    
}#sub show_coords

################################################################################################################
sub get {
#foreach my $net(keys %NETS_HASH){
#   my $val = $NETS_HASH{$net};
#   print "NET $net\n";
#   foreach my $rect (@$val){
#         print "RECT @$rect\n";
#   }
#}
##foreach my $net(keys %NETS_ROUTING){
##my $val = $NETS_ROUTING{$net};
##   print "$net\n";
#   foreach my $rect (@$val){
#         print "@$rect\n";
#   }
#
#}
#foreach my $layer (keys %LAYER_HASH){
#     my $width = $LAYER_HASH{$layer};
#      print "layer $layer, width $width\n";
# }
#print "arr @LAYERS\n";
}



