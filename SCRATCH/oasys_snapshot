#!/usr/bin/perl 
use lib "/usr/lib/perl5/vendor_perl/5.8.5/";
use Tk;
use Tk::BrowseEntry;
use Tk::Scrollbar;
use Tk::Radiobutton;
use Tk::Menubutton;
use Tk::Canvas;
use Tk::DummyEncode;
use Tk::ROText;
use DBI;
use DBD::mysql;
use lib "/usr/lib/perl5/5.8.5/";

   #$KB_DATABASE = "DB;aditya.lnx4.com";
   $KB_DATABASE = "DB;aksu.oasys-ds.com";
   $KB_ADMIN = "qaadmin";
   $KB_PASSWD = "qaadmin";
   $guiCanvasHeight = 500;
   $guiCanvasWidth = 700;
my $box = [0, 0, $guiCanvasWidth, $guiCanvasHeight];
my $mw = MainWindow->new();
$mw->title (" GRAPH DISPLAY ");


my $menubar = $mw->Frame(-relief=>"ridge", -borderwidth=>0,-background=>"wheat");
   $menubar->pack(-side=>'top', -fill=>'both');
my $test ="";
my $data = "";
my $ref = "RID";
my $Limit = "";
my $Offset = "";
my $Order = "";

$menubar->Label(-text => "Test",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
$testDropdown = $menubar->BrowseEntry(-textvariable =>\$test, -width => 10,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$menubar->Label(-text => "DataFd",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
$dataDropdown = $menubar->BrowseEntry(-textvariable =>\$data, -width => 5,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$menubar->Label(-text => "RefFd",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
$menubar->Entry(-textvariable =>\$ref, -width => 5,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$menubar->Label(-text => "Limit",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
#$menubar->Entry(-textvariable =>\$Limit, -width => 3,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$limitDropdown = $menubar->BrowseEntry(-textvariable =>\$Limit, -width => 3,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$menubar->Label(-text => "OffSet",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
$menubar->Entry(-textvariable =>\$Offset, -width => 3,-background=>"LightYellow2")->pack(-side =>'left', -anchor => 'w');
$menubar->Label(-text => "Order",-background=>"pink")->pack(-side =>'left', -anchor => 'w');
$menubar->Radiobutton(-variable =>\$Order,-background=>"pink",
  		     -value => "ASC",-activebackground=>"pink",
  		     -text => "ASC",)->pack(-side =>"left");
                                          
$menubar->Radiobutton(-variable =>\$Order,-activebackground=>"pink",
  		     -value => "DESC",-background=>"pink",
                     -text => "DESC",)->pack(-side =>"left");

my $displayButton = $menubar->Button(-text=>"DisplayGraph", -underline => 0,-background=>"pink",-foreground=>"blue",-activebackground=>"orange",-activeforeground=>"black",-relief=>"raised",-highlightthickness=>1,-highlightbackground=>"purple",-pady=>0, -command => sub {&plot_graph('-testName',$test,'-refField',$ref,'-dataField',$data,'-limit',$Limit,'-order',$Order,'-offset',$Offset);});
$displayButton->pack(-side=>'right');

$graph_canvas  = $mw->Scrolled(qw/Canvas -bg grey67 -xscrollincrement 40 -yscrollincrement 40 -confine 1 -scrollbars se/, -width => $guiCanvasWidth, -height => $guiCanvasHeight, -scrollregion => $box,);
$graph_canvas->Subwidget("xscrollbar")->configure(-width=>10,-borderwidth=>0,-background=>'orange',-activebackground=>"red",-highlightbackground=>"green");
$graph_canvas->Subwidget("yscrollbar")->configure(-width=>10,-borderwidth=>0,-background=>'orange',-activebackground=>"red",-highlightbackground=>"green");
$graph_canvas->pack(qw/-fill both -expand 1 -side top/);

&test_dropdown;
&datafield_dropdown;
$testDropdown->bind('<KeyRelease>' , sub{&limit_dropdown($test);});
MainLoop;

#################################### Populate dropdowns ##################################
sub test_dropdown {
my $dbh = DBI->connect( "dbi:mysql:$KB_DATABASE","$KB_ADMIN","$KB_PASSWD" ) || die "Cannot connect: $DBI::errstr";
my $sth = $dbh->prepare( "SELECT TestName FROM designStat WHERE RID = 0");
$sth->execute();
while (($t )= $sth->fetchrow_array) { push(@test_list,$t);}
foreach (sort @test_list){
         $testDropdown->insert('end',$_);
                          }#foreach
}#sub test_dropdown

sub datafield_dropdown {
my @COLUMNS = ();
my $dbh = DBI->connect( "dbi:mysql:$KB_DATABASE","$KB_ADMIN","$KB_PASSWD" ) || die "Cannot connect: $DBI::errstr";
$sth = $dbh->prepare("SHOW COLUMNS FROM designStat");
$sth->execute();
while (($colName) = $sth->fetchrow_array) { if ($colName eq "ID" || $colName eq "RID" || $colName eq "TestName" || $colName eq "TestPath"){}
                                            else {push(@COLUMNS,$colName);} }
foreach (sort @COLUMNS){
         $dataDropdown->insert('end',$_);
                          }#foreach

}#sub datafield_dropdown

sub limit_dropdown {

my $testName = $_[0];
my @limit = ();
my $dbh = DBI->connect( "dbi:mysql:$KB_DATABASE","$KB_ADMIN","$KB_PASSWD" ) || die "Cannot connect: $DBI::errstr";
my $sth = $dbh->prepare( "SELECT RID FROM designStat WHERE TestName = '$testName'");
$sth->execute();
while (($t )= $sth->fetchrow_array) { push(@limit,$t);}
#foreach (sort @limit){
foreach (@limit){
         $limitDropdown->insert('end',$_);
                          }#foreach
}#sub limit_dropdown


############################################ Graph Plotting Code ###############################################
sub plot_graph {
$graph_canvas->delete("all");
my $noOfArguments = @_;
if( $noOfArguments < 6 ) { 
                           print "Usage : plot_graph -testName <testname> \n";
                           print "                   -dataField <dataField> \n";
                           print "                   -refField <refField> \n";
                           print "                   -order <ASC or DESC> \n";
                           print "limit is optional   [-limit <limitno> ] \n";
                           print "offset is optional  [-offset <offsetno> ] \n";
                           
                                                 }#if no. of arg not eq
else {#correct no of arguments

#------------------------ Initialising Limit-------------------------#
my $dbh = DBI->connect( "dbi:mysql:$KB_DATABASE","$KB_ADMIN","$KB_PASSWD" ) || die "Cannot connect: $DBI::errstr";
   $testName = "";
   $dataField = "";
   $refField = ""; 
my $limitNo = "";   
my $offsetNo = ""; 
if ($offsetNo eq ""){$offsetNo = 0;}
my $order = "";

for (my $i =0; $i< $noOfArguments ; $i++){
if($_[$i] eq "-testName"){
   $testName = $_[$i+1];
 @array_testName  = split(/\,/,$testName);
                           }
if($_[$i] eq "-dataField"){
$dataField = $_[$i+1];
 @array_dataField = split(/\,/,$dataField);
                              }
if($_[$i] eq "-refField"){
$refField = $_[$i+1];
                             }
if($_[$i] eq "-limit"){
$limitNo = $_[$i+1];

                         }
if($_[$i] eq "-offset"){
$offsetNo = $_[$i+1];
if ($offsetNo eq ""){$offsetNo = 0;}
else {$offsetNo = $offsetNo;}

                         }
if($_[$i] eq "-order"){
$order = $_[$i+1];
                         }

                                         } # for no. of arguments


if ($limitNo eq ""){
my @count=();
foreach $testName(@array_testName){
#--------------------------------------------------------#
my @ref1=();
my $sth1 = $dbh->prepare( "SELECT $refField FROM designStat WHERE TestName = '$testName'");
$sth1->execute();
while (($tp1 )= $sth1->fetchrow_array) { push(@ref1,$tp1); }
my $count_reffield = @ref1;
push (@count, $count_reffield);
@count =sort {$b<=>$a} @count;
                             }#foreach testcase
$limitNo = $count[0];
                 }#if limit is empty
#--------------------------------------------------------#

my @plotData=();
my @ref = ();
my @refStorage = ();
my @refLengths = ();
my @refLengths1 = ();

foreach $testName(@array_testName){
my @ref1=();
my $n;
my $sth = $dbh->prepare( "SELECT $refField FROM designStat WHERE TestName = '$testName' ORDER BY $refField $order LIMIT $limitNo OFFSET $offsetNo");
$sth->execute();
while (($tp) = $sth->fetchrow_array) { push(@ref1,$tp); }
$n = @ref1;
push (@refStorage, [@ref1]);
push (@refLengths, $n);
                                   }#foreach testname
my $m = @refLengths;
@refLengths1 = sort {$b<=>$a} @refLengths;
for (my $k = 0; $k<$m ; $k++){
if ($refLengths1[0] == $refLengths[$k]){
@ref = @{$refStorage[$k]};}}
  @plotData = (@plotData,[@ref]);

foreach $testName(@array_testName){
foreach $dataField(@array_dataField){
my $sth = $dbh->prepare( "SELECT $dataField FROM designStat WHERE TestName = '$testName' ORDER BY $refField $order LIMIT $limitNo OFFSET $offsetNo");
$sth->execute();
my @data=();
my @data1= ();
my @data2 = ();
while (($tp) = $sth->fetchrow_array) {
                                     if ($tp eq ""){push(@data,"NULL");}
                                     else {push(@data,$tp);}
                                     }

my $datalen = @data;

if ($datalen==$refLengths1[0]){@data2 = @data;}
else {my $lenDiff = $refLengths1[0]-$datalen;
    if ($order eq "DESC"){
        for (my $i=0; $i<$lenDiff; $i++){
                                      push (@data1,"NULL");
                                         }
           push (@data2,@data1);
           push (@data2,@data);
                         }
   else {
       for (my $i=0; $i<$lenDiff; $i++){
                                      push (@data1,"NULL");
                                         }
           push (@data2,@data);
           push (@data2,@data1);

               }
      }#else
        
@plotData = (@plotData,[@data2]);
                                     }#foreach dataField
                                      }#foreach testName
                                                   
&Plot_Kb_Graph(@plotData);
                         }#else correct no. of arguments
}#sub plot_graph

sub Plot_Kb_Graph {
my @data = @_;
my $canvas = $graph_canvas;
my $CanvasWidth = $guiCanvasWidth;
my $CanvasHeight = $guiCanvasHeight;
my @LineColor=("OliveDrab1", "orange","orange red", "red","SeaGreen1","sienna", "sienna2","sienna4", "VioletRed","purple");
my @LineType = ([2,4],[2,8],[4,4],[6,4],[6,4,2,4],[6,4,2,4,2,4]);
my @Stipple = ("gray12","gray25","gray50","gray75");
my $graphTitle = "Graph:->  For ".$testName.":-{".$dataField." vs ".$refField."}";
my $xLabel = $refField."  ----->";
my $yLabel = $dataField."  ----->";
my $test = $testName;
&Call_Plot_Kb_Graph(\@data,$CanvasWidth,$CanvasHeight,\@LineColor,\@LineType,\@Stipple,$graphTitle,$xLabel,$canvas,$dataField,$test);
}#sub Plot_Kb_Graph

########################################################################################################
sub Call_Plot_Kb_Graph {

my @arg =@_;
my @data = @{$arg[0]};
my $KbCanvasWidth = $arg[1];
my $KbCanvasHeight = $arg[2];
my @color = @{$arg[3]};
my @linetype = @{$arg[4]};
my @type = @{$linetype[1]};
my @stipple = @{$arg[5]};
my $title = $arg[6];
my $xLabel = $arg[7];
my $plotCanvas = $arg[8];
my $dataFields = $arg[9];
my @dataField = split(/\,/,$dataField);
my $testName = $arg[10];
my @testName = split(/\,/,$testName);
##### remove hardcoding ####
my $llx = 150;
my $lly = $KbCanvasHeight-50;
my $urx = $KbCanvasWidth-50;
my $ury = 50;
############################
my $width = $urx-$llx;
my $height = $lly-$ury;
my @coords = @data;
my $n = @coords;
my @ref= @{$coords[0]};
my @refSorted = sort {$a<=>$b} @ref;
my $refsize = @ref;
##############-----find the Min & Max Data Field----############
my @Mindata = ();
my @Maxdata = ();
my @datafield = ();
for (my $i=1; $i<$n; $i++){
my @data = ();
@data = @{$coords[$i]};
@datafield = sort{$a <=> $b}@data;
@Mindata = (@Mindata ,$datafield[0]);
@Maxdata = (@Maxdata ,$datafield[$refsize-1]);
                         }#for
@Mindata = sort {$a <=> $b} @Mindata;  
@Maxdata = sort {$a <=> $b} @Maxdata;
my $Maxdatalength = @Maxdata;

my $Minref = $ref[0];
my $MinSortedref = $refSorted[0];
my $Maxref = $ref[$refsize-1];
my $Mindata = $Mindata[0];
my $Maxdata = $Maxdata[$Maxdatalength-1];
 
my $dataDiff = $Maxdata - $Mindata;
my $refDiff = $Maxref - $Minref;
my $dataStepSize = $dataDiff/6;
my $refStepSize = $refDiff/$refsize;

my $dataStepSize_integer = int ($dataDiff/6);
if ($dataStepSize > $dataStepSize_integer){
    $dataStepSize = $dataStepSize_integer+1;
 				           }#if dataStepSize
my $refStepSize_integer = int ($refDiff/$refsize);
if ($refStepSize > $refStepSize_integer){ 
    $refStepSize = $refStepSize_integer+1;
                                         }#if refStepSize

$plotCanvas->createRectangle($llx,$lly,$urx,$ury, -outline,"green");

##------------------- to create data fields in left Canvas -----------------##
$plotCanvas->createRectangle(5,$lly,115,$ury, -outline,"yellow");
$plotCanvas->createRectangle(5,$ury,115,$ury+25, -outline,"yellow");
$plotCanvas->createText(65,$ury+10, -text,"Data Fields", -font,"Times 14",-fill,"magenta");

#-----------------------------------------------------------------------------------#


for (my $i=0; $i<=6; $i++){
##Co-ordinates for data fields Y-Axis##
my $llx1 = $llx-4;
my $lly1 = $lly- (($height*$i)/6); 
my $llx2 = $llx+4; 
my $lly2 = $lly - (($height*$i)/6);
my $dataText = $Mindata +$dataStepSize*$i;

$plotCanvas->createLine($llx1,$lly1,$llx2,$lly2, -fill,"red");
$plotCanvas->createText($llx1-14,$lly1, -text=>$dataText,-fill,"magenta");

###### if dataStepSize =0 #######
if ($dataStepSize == 0){last;}
#######################################

                           }#for Y-Axis coordinates 

for (my $j=1; $j<=$refsize; $j++){
##Co-ordinates for ref fields##
my $llx3 = $llx+($width*$j)/($refsize+1);
my $lly3 = $lly+4;
my $llx4 = $llx+($width*$j)/($refsize+1);
my $lly4 = $lly-4; 
#my $refText = $Minref+ $refStepSize*($j-1);

$plotCanvas->createLine($llx3,$lly3,$llx4,$lly4, -fill,"red");
$plotCanvas->createText($llx3,$lly+9, -text=>$ref[$j-1],-fill,"magenta");
                                   }#for ref

###########---plots for each data Field---############
my $count = 1;
for (my $k=1; $k<$n; $k++){
my @data = ();
@data = @{$coords[$k]};
my $datasize = @data;
my @linepoint =();
my $color;
my @lineType= ();
my $stipple;
my $tag = "graph".$k;
my $m = @testName;

if ($k <=10){$color = $color[$k-1];}
else {$color = $color[$k-11];}
if ($k <=6){@lineType = @{$linetype[$k-1]};$stipple = "";}
else {
    if($k> 6 && $k<=10){
         @lineType = (4,4);
         $stipple = $stipple[$k-7];
                         }
   else { @lineType = "";
          $stipple = "";}
     }

######## case when dataStepSize = 0 ########

my $x1;
my $y1;
if ($data[0] eq "NULL"){}
else {
 $x1 = $llx+($width/($refsize+1));
    
#-----------------------------------------------------------#
if ($dataStepSize == 0) { 
$y1 = $lly- ($height/6)*($data[0]-$Mindata);
                          }#if dataStepSize is zero
else {
$y1 = $lly- (($height/6)*($data[0]-$Mindata)/$dataStepSize);
      }#if dataStepSize not zero
   push (@linepoint, $x1,$y1);  
#-----------------------------------------------------------#

$plotCanvas->createOval($x1-3,$y1+3,$x1+3,$y1-3, -fill=>$color,-tags,$tag);##creating circle joints 
      }
################### draw plot ##################################
#for (my $l=1; $l< $refsize; $l++){
for (my $l=1; $l< $datasize; $l++){
my $x2;
my $y2;
if ($data[$l] eq "NULL"){}
else {
 $x2 = $llx+(($width/($refsize+1))*(1 + $l));
#-------------------------------------------------------------#
if ($dataStepSize == 0) { 
$y2 = $lly- ($height/6)*($data[$l]-$Mindata);
                          }#if dataStepSize is zero
else {
$y2 = $lly- (($height/6)*($data[$l]-$Mindata)/$dataStepSize);
      }#if dataStepSize not zero
    
#-------------------------------------------------------------#

$plotCanvas->createOval($x2-3,$y2+3,$x2+3,$y2-3, -fill=>$color,-tags,$tag);##creating circle joints

push (@linepoint, $x2,$y2);
     }#if dataStepSize is not zero
}#for plot

my $XX = 5; my $YY = $ury+25+20*$k;
my $XX1 = 30; my $YY1 = $ury+25+20*$k;

$plotCanvas->createLine(@linepoint, -dash,[@lineType],-stipple,$stipple,-fill,$color,-tags,$tag);
$plotCanvas->createLine($XX,$YY,$XX1,$YY1, -dash,[@lineType],-stipple,$stipple,-fill,$color);## sample lines for leftside Display   

my $t = ($n-1)/$m*$count;
if ($k <= $t){$count = $count;}
else {$count = $count+1;}

$plotCanvas->createText(45,$YY,-text,$testName[$count-1],-fill,$color,-tags,$tag);## dataField text for leftside Display  
$plotCanvas->createText(85,$YY,-text,$dataField[$k-1-($n-1)/$m*($count-1)],-fill,$color,-tags,$tag);## dataField text for leftside Display  

 $plotCanvas->bind($tag,"<Enter>"=> sub{$plotCanvas->itemconfigure($tag,-fill=>'white')});
 $plotCanvas->bind($tag,"<Leave>"=> sub{ $plotCanvas->itemconfigure($tag,-fill=>$color);});
                                  
                           }#for each data field
&graph_zoomIn_zoomOut($plotCanvas,$KbCanvasWidth,$KbCanvasHeight);
&draw_lable_title_color_graph($plotCanvas,$title,$xLabel,$llx,$lly,$width,$height);
&print_xy($plotCanvas,$llx,$lly,$Minref,$Mindata,$refsize,$refStepSize,$dataStepSize,$width,$height,$MinSortedref);
}#sub Call_Plot_Kb_Graph

################ ZoomIn ZoomOut for GUI ####################

sub graph_zoomIn_zoomOut {

my($plotCanvas,$KbCanvasWidth,$KbCanvasHeight) = @_;
my $box = [0,0,$KbCanvasWidth,$KbCanvasHeight];
 my $zoomRect;
 my @zoomRectCoords;
        $plotCanvas->CanvasBind('<3>' => sub {
            my $x = $plotCanvas->canvasx($Tk::event->x);
            my $y = $plotCanvas->canvasy($Tk::event->y);

            @zoomRectCoords = ($x, $y, $x, $y);

            $zoomRect = $plotCanvas->createRectangle(
                                            @zoomRectCoords,
                                            -outline => 'red',
                                            );
        });
                $plotCanvas->CanvasBind('<B3-Motion>' => sub {
            @zoomRectCoords[2,3] = ($plotCanvas->canvasx($Tk::event->x),
                                    $plotCanvas->canvasy($Tk::event->y));

            $plotCanvas->coords($zoomRect => @zoomRectCoords);
        });
                $plotCanvas->CanvasBind('<B3-ButtonRelease>' => sub {
            # Delete the rectangle.
            $plotCanvas->delete($zoomRect);

            # Was the rectangle big enough?
            return if
                abs($zoomRectCoords[0] - $zoomRectCoords[2]) < 10 ||
                    abs($zoomRectCoords[1] - $zoomRectCoords[3]) < 10;

            # Let's find the zooming factor.
            my $dx = $plotCanvas->width  /abs($zoomRectCoords[0] - $zoomRectCoords[2]);
            my $dy = $plotCanvas->height /abs($zoomRectCoords[1] - $zoomRectCoords[3]);

            my $scale = [$dx => $dy] -> [$dy <= $dx];

            # Let's scale everything up.
            $plotCanvas->Subwidget('scrolled')->scale('all' => 0, 0, $scale, $scale);

            # Modify the bounding box.
            $_ *= $scale for @$box;

            # Resize the scrollregion.
            $plotCanvas->configure(-scrollregion => $box);

            # Now we change the view to center on correct area.
            $plotCanvas->xviewMoveto($zoomRectCoords[0] * $scale / $box->[2]);
            $plotCanvas->yviewMoveto($zoomRectCoords[1] * $scale / $box->[3]);
        });

            $plotCanvas->CanvasBind('<2>' => sub {
             #my $scale = $KbCanvasWidth/$box->[2];
             my $scale = $KbCanvasHeight/$box->[3];

            $plotCanvas->Subwidget('scrolled')->scale('all' => 0, 0, $scale, $scale);
            $box = [0, 0, $KbCanvasWidth, $KbCanvasHeight];
            $plotCanvas->configure(-scrollregion => $box);
        });

}#sub graph_zoomIn_zoomOut

######################## create label, Title of Graph ########################
sub draw_lable_title_color_graph{
my ($plotCanvas,$graphTitle,$labelX,$llx,$lly,$width,$height) = @_;
my $labelY = "y-Axis ------->";

my $X = $llx+$width/2;
my $Y = $lly-$height - 15;
my $X1 = $llx+$width/2;
my $Y1 = $lly + 22;
$plotCanvas->createText($X,$Y, -text,$graphTitle, -fill,"orange red",-font=>"Times 14");  
$plotCanvas->createText($X1,$Y1, -text,$labelX, -font,"Times 14", -fill,"orange red");  

}#sub draw_lable_title_color_graph

######################################################################
sub canvasToDisplay {
my ($plotCanvas,$llx, $lly,$MinRef,$MinData,$refSize,$refStepSize,$dataStepSize,$width,$height,$MinSortedRef) = @_;
my $x = $plotCanvas->canvasx($Tk::event->x);
my $y = $plotCanvas->canvasy($Tk::event->y);
my $x1;
if ($MinRef == $MinSortedRef){
$x1 = ($MinRef/$refStepSize)+(($x-$llx)*($refSize+1)/$width)-1;
                              }
else {
$x1 = ($MinRef/$refStepSize)+(($x-$llx)*($refSize+1)/$width);
$x1 = -$x1;
}
my $y1 = $MinData + (($lly-$y)*6*$dataStepSize/$height);

my $t= sprintf("(x,y ) %7.3f,%7.3f\n" ,  $x1,$y1);
$plotCanvas->createRectangle($x-60,$y-25,$x+60,$y-5, -outline=>"green",-fill=>"white",-tags=>"COORDSTEXT");
$plotCanvas->createText($x,$y-5, -text=>$t ,-tags=>"COORDSTEXT");
$plotCanvas->createLine($llx,$y,$x,$y, -width=> 0,-fill=>"yellow",-dash=>[6,4],-tags=>"COORDSTEXT");
$plotCanvas->createLine($x,$lly,$x,$y, -width=> 0,-fill=>"yellow",-dash=>[6,4],-tags=>"COORDSTEXT");
 
}#sub canvasToDisplay

sub print_xy {
my @arg = @_;
my $plotCanvas = $arg[0];
$plotCanvas->CanvasBind("<Button-1>"=> [sub {&canvasToDisplay(@arg); }]);
$plotCanvas->CanvasBind("<B1-ButtonRelease>"=> [sub{$plotCanvas->delete(COORDSTEXT);}]);
            
}#sub print_xy



