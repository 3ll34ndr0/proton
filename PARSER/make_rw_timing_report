sub read_report_timing {
#****f* /read_report_timing
# NAME
#  read_report_timing 
# FUNCTION
#  reads a timing report file
# SYNOPSIS
#  read_report_timing -f <input file>
# INPUTS
#   read_report_timing -f <input file>
#  -f <input report file>
#  -s_mtrx <s_mtrx input report file> (read only Path,BeginPoint,EndPoint,SlackTime)
#OUTPUTS
# 
#****

use Benchmark;
my $t0 = new Benchmark;

my $noOfArguments = @_;
if ( $noOfArguments < 0 ) {print "Usage: read_report_timing -f <input file>\n";
                           print "                          -s_mtrx <input file>\n";
                          }#if
else {
      my $input_file = 0;
      my $smtrx_file = 0;
      my $INPUTREPORTFILE;
  	for ( my $x = 0 ; $x < $noOfArguments ; $x++ ) {
  	      if($_[$x] eq "-f") {$INPUTREPORTFILE = $_[$x+1];$input_file = 1;}
  	      if($_[$x] eq "-s_mtrx") {$S_MATRIX = $_[$x+1];$smtrx_file = 1;}
  	}#for
  if($input_file == 1){
     #&read_rpt_timing($INPUTREPORTFILE);
     &read_report_timing_wth_hd($INPUTREPORTFILE);
  }#if
  elsif($smtrx_file == 1){
	&read_smatrix_rpt_timing($S_MATRIX);
  }#elsif
}#else
my $t1 = new Benchmark;
my $td = timediff($t1,$t0);
print "Command read_report_timing:",timestr($td),"\n";
}#sub read_report_timing
 
sub read_rpt_timing {
%TRDB = ();
my $inputReportFile = $_[0];
if( -e "$inputReportFile" ) {
open (READ,"$inputReportFile");
my $hd_st = 0;
while (<READ>) {
chomp();
if($_ =~ (/Path/)||(/PATH/)){($pathNum)=(split(/\s+/,$_))[1];
                              $pathNum =~ s/://;
                              $TRDB{$pathNum} = TimingRptDB::new();
                              $TRDB{$pathNum}->dbTRptSetPathNum($pathNum);
                            }#if path

elsif($_ =~ /^Endpoint/){   s/Endpoint:\s+//;
                         s/\(.*\)//;
                         s/\s+//;
                         $end_point = $_;
                         $TRDB{$pathNum}->dbTRptSetEndPoint($end_point);
                     }#elsif end point
elsif($_ =~ /^Beginpoint/){s/Beginpoint:\s+//;
                           s/\(.*\)//;
                           s/\s+//;
                           $begin_point = $_;
                           $TRDB{$pathNum}->dbTRptSetbeginPoint($begin_point);
                          }#elsif begin point
elsif($_ =~ /Slack Time/){$slack_time = (split(/\s+/,$_))[3];
                             $TRDB{$pathNum}->dbTRptSetSlkTime($slack_time);
                            }#elsif slack time
elsif($_ =~/\+--.*/){$hd_st = 1;}
      if($hd_st == 1){
         if($_ =~ /\+.*/){next;}
	 elsif($_ =~/\-\>/){
             my @temp_array =(split(/\s+\|\s+/,$_));
             my ($instanceName,$instloc,$arc)=@temp_array[1,2,3];
   	     my	 ($cell,$delay,$load,$artime,$reqtime) = @temp_array[4,5,6,7,8];
		    $data = $instanceName.":".$instloc.":".$cell.":".$delay.":".$load.":".$artime.":".$reqtime.":".$arc;
		    $TRDB{$pathNum}->dbTRptAddInstData($data);
        }#elsif
	elsif($_ =~ /\^/ ) {
		my @temp_array =(split(/\|/,$_));
		my ($instanceName,$instloc,$arc,$cell,$delay,$load,$artime,$reqtime)=@temp_array[1,2,3,4,5,6,7,8];
		    $data = $instanceName.":".$instloc.":".$cell.":".$delay.":".$load.":".$artime.":".$reqtime.":".$arc;
		    $TRDB{$pathNum}->dbTRptAddInstData($data);
        }#elsif
        else {
             my @temp_array =(split(/\|/,$_));
             my ($instanceName,$instloc,$arc,$cell,$delay,$load,$artime,$reqtime)=@temp_array[1,2,3,4,5,6,7,8];                 
                 if($_ =~ /\,/){
                    $data = $instanceName.":".$instloc.":".$cell.":".$delay.":".$load.":".$artime.":".$reqtime.":".$arc;
                    $TRDB{$pathNum}->dbTRptAddInstData($data);
                 }#if
        }#else
      }#if $hd_st
    }#while
   }#if file exists
}#sub read_rpt_timing

sub read_smatrix_rpt_timing {
%TRDB = ();
my $InputReportFile = $_[0];
if( -e "$InputReportFile" ) {
open (READ_FILE,"$InputReportFile");
while (<READ_FILE>) {
chomp();
if($_ =~ (/Path/)||(/PATH/)){($pathNum)=(split(/\s+/,$_))[1];
                              $pathNum =~ s/://;
                              $TRDB{$pathNum} = TimingRptDB::new();
                              $TRDB{$pathNum}->dbTRptSetPathNum($pathNum);
                            }#if path
elsif($_ =~ /^Endpoint/){s/Endpoint:\s+//;
                         s/\(.*\)//;
                         s/\s+//;
                         $end_point = $_;
                         $TRDB{$pathNum}->dbTRptSetEndPoint($end_point);
                         }#elsif 
elsif($_ =~ /^Beginpoint/){s/Beginpoint:\s+//;
                           s/\(.*\)//;
                           s/\s+//;
                           $begin_point = $_;
                           $TRDB{$pathNum}->dbTRptSetbeginPoint($begin_point);
                          }#elsif begin point
elsif($_ =~ /Slack Time/){$slack_time = (split(/\s+/,$_))[3];
                          $TRDB{$pathNum}->dbTRptSetSlkTime($slack_time);
                         }#elsif slack time
}#while
}#if exists file
}#sub read_smatrix_rpt_timing

#----------------------------------------------------------------------------------------------------------------------#

sub read_report_timing_wth_hd {
%TRDB = ();
my $inputReportFile = $_[0];
if( -e "$inputReportFile" ) {
open (READ,"$inputReportFile");
my $hd_st = 0;
my $read_data = 0;
my @columns = () ;
my $instance_pos = -1 ;                        
my $instanceLocation_pos = -1 ;        
my $arc_pos = -1 ;              
my $cell_pos = -1 ;        
my $delay_pos = -1 ;   
my $load_pos = -1 ;  
my $arrivalTime_pos = -1 ;  
my $requiredTime_pos = -1 ;
my $slew_pos = -1;
my $instance_val = "" ;                        
my $instanceLocation_val = "" ;        
my $arc_val = "" ;              
my $cell_val = "" ;        
my $delay_val = "" ;   
my $load_val = "" ;  
my $arrivalTime_val = "" ;  
my $requiredTime_val = "" ;
my $slew_val = "";
my $path_reads = 0;
my $end_path_reads = 0;

while (<READ>) {
chomp();

if($_ =~ (/^\s*Path\s*\d+/)||(/^\s*PATH\s*\d+/)){$path_reads = 1;$end_path_reads = 0;}
elsif($_ =~ (/\s*End\s*Path/)||(/\s*END\s*PATH/)){$end_path_reads=1; $path_reads = 0;}

if($path_reads == 1 || $end_path_reads == 0){
  if($_ =~ (/^\s*Path\s*\d+/)||(/^\s*PATH\s*\d+/)){
    ($pathNum)=(split(/\s+/,$_))[1];
    $pathNum =~ s/://;
    $TRDB{$pathNum} = TimingRptDB::new();
    $TRDB{$pathNum}->dbTRptSetPathNum($pathNum);
    @columns = () ;
  }#if path
  elsif($_ =~ /^Endpoint/){
    ($end_point) = (split(/\s+/,$_))[1];
    $TRDB{$pathNum}->dbTRptSetEndPoint($end_point);
  }#elsif end point
  elsif($_ =~ /^Beginpoint/){
    ($begin_point) = (split(/\s+/,$_))[1];
    $TRDB{$pathNum}->dbTRptSetbeginPoint($begin_point);
  }#elsif begin point
  elsif($_ =~ /Slack Time/){
    $slack_time = (split(/\s+/,$_))[3];
    $TRDB{$pathNum}->dbTRptSetSlkTime($slack_time);
  }#elsif slack time
  elsif($_ =~ /\s*=\s*Required\s*Time\s*\d+/){
    $reqtime = (split(/\s+/,$_))[3];
    $TRDB{$pathNum}->dbTRptSetRequiredTime($reqtime);
  }
  elsif($_ =~ /\s*-\s*Arrival\s*Time\s*\d+/){
    $arrtime = (split(/\s+/,$_))[3];
    $TRDB{$pathNum}->dbTRptSetArrivalTime($arrtime);
  }
  elsif($_ =~ /\s*Clock\s*(Rise|Fall)\s*Edge\s*/i){
    my $type = (split(/\s+/,$_))[2];
    $TRDB{$pathNum}->dbTRptSetClockTypeEdge($type);
  }#elsif
  elsif($_ =~/^\s*\+-+\+\s*$/){
    if($read_data ==1){
       $read_data = 0 ;
       $hd_st = 0;
       next;
    }elsif($hd_st ==0){
      $hd_st = 1;
      $read_data = 0; 
      next ;
    }#elsif
  }#elsif
  elsif($_ =~/^\s*\|(\+|-)+\|\s*$/){
    shift(@columns) ;
    for(my $i = 0 ; $i <=$#columns; $i++) {
        if($columns[$i] =~ (/^\s*Instance\s*$/)||(/^\s*inst\s*$/)||(/^\s*instance\s*$/)||(/^\s*InstName\s*$/)){$instance_pos = $i;}
        elsif($columns[$i] =~(/^\s*Instance\s*Location\s*$/)||(/^\s*loc\s*$/)||(/^\s*instloc\s*$/)||(/^\s*location\s*$/)||(/^\s*instance\s*location\s*$/)){$instanceLocation_pos = $i;}
        elsif($columns[$i] =~/^\s*Arc\s*$/){$arc_pos= $i;}
        elsif($columns[$i] =~(/^\s*Cell\s*$/)||(/^\s*cellref\s*$/)||(/^\s*cell\s*$/)||(/^\s*CELL\s*$/)||(/^\s*MACRO\s*$/)||(/^\s*instcell\s*$/)){$cell_pos = $i;}
        elsif($columns[$i] =~(/^\s*Delay\s*$/)||(/^\s*delay\s*$/)||(/^\s*delta\s*$/)||(/^\s*incrdly\s*$/)||(/^\s*dly\s*$/)||(/^\s*instdly\s*$/)||(/^\s*instdelay\s*$/)){$delay_pos = $i;}
        elsif($columns[$i] =~/^\s*Load\s*$/){$load_pos = $i;}
        elsif($columns[$i] =~(/^\s*Arrival Time\s*$/)||(/^\s*arrival\s*$/)||(/^\s*Arrival\s*$/)){$arrivalTime_pos = $i;}
        elsif($columns[$i] =~/^\s*Required Time\s*$/){$requiredTime_pos = $i;}
        elsif($columns[$i] =~(/^\s*Slew\s*$/)||(/^\s*slew\s*$/)||(/^\s*slope\s*$/)){$slew_pos = $i;}
    }#for 
    $hd_st = 0;$read_data = 1; 
    next ;
  }#elsif
  if( $hd_st == 1 && $read_data == 0){
    my @curr_column = (split(/\s*\|\s*/,$_));
    if($#columns ==0){
      foreach $temp_col (@curr_column){
        push(@columns, $temp_col);
      }#foreach
    }else{
      my $temp_index = 0 ;
      foreach $temp_col (@curr_column){
        my $temp_val = $columns[$temp_index];
        $temp_val = $temp_val." ".$temp_col;
        $columns[$temp_index] = $temp_val;
        $temp_index++ ;
      }#foreach
    }#else
  }#if hd_st
  if($read_data == 1 && $hd_st == 0){
    my @curr_data = (split(/\|\s*/,$_)); 
    shift(@curr_data);
    $instance_val = $curr_data[$instance_pos] ;                        
    $instanceLocation_val = $curr_data[$instanceLocation_pos] ;        
    $arc_val = $curr_data[$arc_pos] ;              
    $cell_val = $curr_data[$cell_pos] ;        
    $delay_val = $curr_data[$delay_pos] ;   
    $load_val = $curr_data[$load_pos] ;  
    $arrivalTime_val = $curr_data[$arrivalTime_pos] ;  
    $requiredTime_val = $curr_data[$requiredTime_pos] ;
    $slew_val = $curr_data[$slew_pos];
    if($arc_val ne ""){
      ($locationX,$locationY) = (split(/\s*,\s*/,$instanceLocation_val));
      $locationX =~ s/\(//;
      $locationY =~ s/\)//;
      $loc_val = $locationX." ".$locationY;
      $TRDB{$pathNum}->dbTRptSetInstName($instance_val);
      $TRDB{$pathNum}->dbTRptSetInstLoc($loc_val);
      $TRDB{$pathNum}->dbTRptSetArc($arc_val);
      $TRDB{$pathNum}->dbTRptSetCell($cell_val);
      $TRDB{$pathNum}->dbTRptSetDelay($delay_val);
      $TRDB{$pathNum}->dbTRptSetLoad($load_val);
      $TRDB{$pathNum}->dbTRptSetArrTime($arrivalTime_val);
      $TRDB{$pathNum}->dbTRptSetReqTime($requiredTime_val);
      $TRDB{$pathNum}->dbTRptSetSlew($slew_val);
    }#if arc_val  
  }#if read_data
}#if path_reads
    }#while
}#if file exists

}#sub read_report_timing_wth_hd
#------------------------------------------------------------------------------------------------------------------------------------------------------------#

sub write_rpt_timing {
my $noOfArguments  = @_;
if($noOfArguments < 0 || $_[0] eq "-h"){print "Usage : write_rpt_timing\n";
                                        print "        -inst\n";
                                        print "        -cell\n";
                                        }
else {
        my $inst = 0;
        my $arc = 0;
        my $loc = 0;
my @inst_n = ();
my @arc_n = ();
my @loc_n = ();
my @cell_n = ();
my @delay_n = ();
my @load_n = ();
my @arr_n = ();
my @req_n = ();
my @slew_n = ();
        for (my $i = 0; $i < $noOfArguments; $i++){
                if ($_[$i] eq "-inst"){$inst = 1;}
                if ($_[$i] eq "-arc"){$arc= 1;}
                if($_[$i] eq "-loc"){$loc =1;}
        }#for

     
open (WRITE,">timing_rpt");
foreach $point (keys %TRDB){
my $path = $TRDB{$point}->dbTRptGetPathNum;
print WRITE "PATH $path\n";
my $bgp = $TRDB{$point}->dbTRptGetbeginPoint;
print WRITE "Begin Point $bgp\n";
my $edp = $TRDB{$point}->dbTRptGetEndPoint;
print WRITE "End Point $edp\n";
my $slack = $TRDB{$point}->dbTRptGetSlkTime;
print WRITE "Slack Time $slack\n";
my $art = $TRDB{$point}->dbTRptGetArrivalTime;
print WRITE "Arrival Time $art\n";
my $rt  = $TRDB{$point}->dbTRptGetRequiredTime;
print WRITE "Required Time $rt\n";
print WRITE "\n";
@inst_n = $TRDB{$point}->dbTRptGetInstName;
@arc_n = $TRDB{$point}->dbTRptGetArc;
@loc_n = $TRDB{$point}->dbTRptGetInstLoc;
@cell_n = $TRDB{$point}->dbTRptGetCell;
@delay_n = $TRDB{$point}->dbTRptGetDelay;
@load_n = $TRDB{$point}->dbTRptGetLoad;
@arr_n = $TRDB{$point}->dbTRptGetArrTime;
@req_n = $TRDB{$point}->dbTRptGetReqTime;
@slew_n = $TRDB{$point}->dbTRptGetSlew;
print WRITE "Instance		Cell 	    Location 	  Slew	   	Load            Delay 	        ArrTime	    Arc	        ReqTime \n";
for(my $j =0;$j<=$#inst_n; $j++){
print WRITE "$inst_n[$j]       $cell_n[$j] $loc_n[$j]     $slew_n[$j]   $load_n[$j]	$delay_n[$j]	$arr_n[$j]  $arc_n[$j]	$req_n[$j]\n";
}
}#foreach
}#else
}#sub write_rpt_timing
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
sub write_xls_for_timing_rpt {
my $noOfArguments  = @_;
use Spreadsheet::WriteExcel;
if($noOfArguments < 0 || $_[0] eq "-h"){
                                       }
else {
  my $OUTPUT_FLIE;
  for (my $i = 0; $i < $noOfArguments; $i++){
    if ($_[$i] eq "-output"){$OUTPUT_FLIE = $_[$i+1];}
  }#for
  my $workbook = Spreadsheet::WriteExcel->new($OUTPUT_FLIE);
  my $worksheet = $workbook->add_worksheet("report timing");
  $worksheet->activate("report timing");
  #my @headings = ("Instance","CellName","Arc","Type");
  my @headings = ("Instance","Arc","Type");
  my @point_list = keys %TRDB;
  my @sort_point_list = sort {$a<=>$b} @point_list;
  $worksheet->set_column('B:D',40);
  my $format = $workbook->add_format();
  $format->set_bold();
  for(my $i=0;$i<=$#sort_point_list;$i++){
    my $point = $sort_point_list[$i];
    my $path = $TRDB{$point}->dbTRptGetPathNum;
    my $type = $TRDB{$point}->dbTRptGetClockTypeEdge;
    my @inst_n = $TRDB{$point}->dbTRptGetInstName;
    my @cell_n = $TRDB{$point}->dbTRptGetCell;
    my @arc_n = $TRDB{$point}->dbTRptGetArc;
    my $max_number_of_inst = &get_max_number_of_inst;
    my $r1 = ($i)*($max_number_of_inst+1);
     $worksheet->write($r1,0,"PATH $path",$format);
     $worksheet->write($r1,1,\@headings,$format);
     for(my $j=0;$j<=$#inst_n;$j++){
       my $inst = $inst_n[$j];
       my $cell = $cell_n[$j];
       my $type_r = $j+($r1+1);
       my $r2 = $j+($r1+1);
       $worksheet->write($r2,1,$inst);
       #$worksheet->write($r2,2,$cell);
       $worksheet->write($r2,2,$arc_n[$j]);
       $worksheet->write($type_r,3,$type);
     }#for 
  }#for  
}#else
}#sub write_xls_for_timing_rpt
#-----------------------------------------------------------------------#
sub get_max_number_of_inst { 
my @temp_list = ();
my $max_number;
foreach $point (keys %TRDB){
  my @inst_n = $TRDB{$point}->dbTRptGetInstName;
  my $n = @inst_n;
  push (@temp_list,$n);
}
my @sort_number = sort {$a <=> $b} @temp_list;
$max_number = $sort_number[-1];
return ($max_number);
}#sub get_max_number_of_inst
#-----------------------------------------------------------------------#
1;
