
sub read_testdata {
$noOfArguments = @_;
if($noOfArguments < 2 || $_[0] eq '-h') {
print "usage : read_testdata -datafile < input data file> \n";
print "                  --new {if new data needs to be added for a testcase}\n";
print "                  --update {if an old data need to be updated with the new run}\n";
print "                  -addField < false / true >\n";
                       } else {
######## defaults #####################
$addField = "false";
my $UPDATE = -1;

for(my $i = 0 ; $i < $noOfArguments ;  $i++){
if($_[$i] eq "-datafile"){  $INPUT_FILE = $_[$i+1];}
if($_[$i] eq "-addField"){  $addField = $_[$i+1];}
if($_[$i] eq "--new"){  $UPDATE = 0;}
if($_[$i] eq "--update"){  $UPDATE = 1;}
                              }# for no of arguments
###   pseudo code ###
# if $UPDATE == 0 then get a new ID from sql database for the testcase name
# if $UPDATE == 1 then make sure use provides a ID to annotate the data
# in either case check if the testname and testpath in the datafile matches that in the SQL database   
# if addField switch is true then its OK to add a new field else the missing field will be skipped
open(READ,"$INPUT_FILE");
my $readPreSection = 0;
my $readPostSection = 0;
while(<READ>) {
chomp();
if ( $_ =~ /PreSection/ ) { $readPreSection = 1; }
elsif ( $_ =~ /PostSection/ ) { $readPostSection = 1; }
elsif ( $readPreSection == 1 ) {
       if ( $_ =~ /TestName/ ) { $testName = (split(/\s+/, $_))[1]; }
       if ( $_ =~ /TestPath/ ) { $testPath = (split(/\s+/, $_))[1]; }
       if ( $_ =~ /TestID/ ) { $testID = (split(/\s+/, $_))[1]; }
       if ( $_ =~ /nodeName/ ) { $nodeName = (split(/\s+/, $_))[1]; }
       if ( $_ =~ /softwareID/ ) { $nodeName = (split(/\s+/, $_))[1]; }
       if ( $_ =~ /execTime/ ) { $nodeName = (split(/\s+/, $_))[1]; }
                            }
elsif ( $readPostSection == 1 ) {
                            }
else { next; }
               }#while
                            }# if correct arguments    
}# sub read_testdata
