
sub dbAnalyzeDesign {

print "INFO-TST-DB_ANALZE_DES : 001 : collecting design statistics ..\n";
&do_collect_netlist_statistics;

print "INFO-TST-DB_ANALZE_DES : 002 : characterizing the design...\n";
open (WRITE,">matlab.txt");
&do_characterize_netlist;

print "INFO-TST-DB_ANALZE_DES : 003 : output netlist characterstic in matlab format ... \n";
&dbGenWriteMatlabDatFile;
close(WRITE);


}# sub dbAnalyzeDesign



sub do_collect_netlist_statistics {
# search for all flops and ports and have a number map.
# and all other of kind of statics

%Row_Hash = ();
%Col_Hash = ();

my $colCount = 0;
my $rowCount = 0;
my $SeqCompCount = 0;
my $CombCompCount = 0;
my $BlockCompCount = 0;
my $PadCompCount = 0;
my $InputPortCount = 0;
my $OutputPortCount = 0;
my $InoutPortCount = 0;
my $NetCount = 0;
my $Net0PinCount = 0;
my $Net1PinCount = 0;
my $Net2PinCount = 0;
my $Net3PinCount = 0;
my $Net4PinCount = 0;
my $Net5orMorePinCount = 0;

foreach my $instanceName ( keys %COMP_ALREADY ) {
#        print "$instanceName\n";
        my $cellref = $CADB{$instanceName}->dbCadbGetCellref;
        my $cellType = $PLDB{$cellref}->dbMdbGetType;
        my $cellFuction = $PLDB{$cellref}->dbMdbGetFunction;
        if ( $cellType == 0 )    { $CombCompCount++; }
        elsif ( $cellType == 1 ) { $SeqCompCount++; 
                                   $colCount++; $rowCount++; 
                                   $Col_Hash{$instanceName}=$colCount; 
                                   $Row_Hash{$instanceName}=$rowCount; 
                                 }
        elsif ( $cellType == 2 ) { $BlockCompCount++; }
        elsif ( $cellType == 3 ) { $PadCompCount++; }
        else { print "WARN-TST : 001 : instance $instanceName has unknown cell type $cellType\n"; }
        
                                                }
foreach my $portName ( keys %{$PORTS_ALREADY{$TOP_MODULE}} ) {
#        print "$portName\n";
        my $portDirection = $PORTS_ALREADY{$TOP_MODULE}{$portName}->dbPortGetDir;
        if ($portDirection eq "input" ) { $InputPortCount++;
                                   $colCount++; 
                                   $Col_Hash{$portName}=$colCount; 
                                        }
        elsif ($portDirection eq "output" ) { $OutputPortCount++;
                                   $rowCount++; 
                                   $Row_Hash{$portName}=$rowCount; 
                                            }
        elsif ($portDirection eq "inout" ) { $InoutPortCount++;}
        else { print "WARN-TST : 002 : port $portName has unknown direction type $portDirection\n"; }
                                                            }
foreach my $netName ( keys %NETS_ALREADY ) {
        my $noOfPinsOnNet = 0;
        foreach (keys %{$NETS_ALREADY{$netName}} ) { $noOfPinsOnNet++; }
        if ( $noOfPinsOnNet == 0 )    { $Net0PinCount++;}
        elsif ( $noOfPinsOnNet == 1 ) { $Net1PinCount++;}
        elsif ( $noOfPinsOnNet == 2 ) { $Net2PinCount++;}
        elsif ( $noOfPinsOnNet == 3 ) { $Net3PinCount++;}
        elsif ( $noOfPinsOnNet == 4 ) { $Net4PinCount++;}
        else { $Net5orMorePinCount++; }
                                           }
print "INFO-TST : 003 : Design Statistics\n";
print "INFO-TST : 004 : Seq : $SeqCompCount , Combinational : $CombCompCount , Block : $BlockCompCount , Pad : $PadCompCount\n";
print "INFO-TST : 005 : In  : $InputPortCount , Out : $OutputPortCount , Bidi : $InoutPortCount\n";
print "INFO-TST : 006 :  0-pin : $Net0PinCount , 1-pin : $Net1PinCount , 2-pin : $Net2PinCount , 3-pin : $Net3PinCount , 4-pin : $Net3PinCount , >= 5-pin : $Net5orMorePinCount\n";

my $genDesignNumOfRows = $SeqCompCount + $OutputPortCount;
my $genDesignNumOfColumns = $SeqCompCount + $InputPortCount;

$GEN{$TOP_MODULE} = GenDesignDB::new();
$GEN{$TOP_MODULE}->dbGenDesignInit_new($genDesignNumOfRows,$genDesignNumOfColumns);


}#do_collect_netlist_statistics


sub dbGenWriteMatlabDatFile {
# my $max_row = $GEN{$TOP_MODULE}->dbGenDesignGetMaxRow;
# my $max_col = $GEN{$TOP_MODULE}->dbGenDesignGetMaxCol;

my $max_row = $PLACE{$TOP_MODULE}->dbPlaceGetMaxRow;
my $max_col = $PLACE{$TOP_MODULE}->dbPlaceGetMaxCol;


# print " $max_row $max_col\n";
for (my $xx = 1; $xx <= $max_row; $xx++ ) { # row 
    for ( my $yy = 1; $yy <= $max_col; $yy++ ) { #col
          my $val = 0;
          if ( $xx == $yy ) { 
                            #$val = 1; 
               $val = $GEN{$TOP_MODULE}->dbGenDesignGetTpathVal_new($xx,$yy);
                            }
          else { 
               $val = $GEN{$TOP_MODULE}->dbGenDesignGetTpathVal_new($xx,$yy);
               }
          if ($val == 0 ) { }
          else { print WRITE "$xx $yy $val\n"; }
                                               }
                                           }


}#sub dbGenWriteMatlabDatFile




















#####################################################################
## I am using the Breadth first technique to populate the TSTGEN DB #
## using the back trace                                             #
#####################################################################

sub do_characterize_netlist {
&dbGenTraceReg2RegTPaths;
&dbGenTraceReg2OutTPaths;

}#sub do_characterize_netlist

sub dbGenTraceReg2OutTPaths {
    foreach $pinName ( keys %{$PORTS_ALREADY{$TOP_MODULE}} ) {
            my $dir = $PORTS_ALREADY{$TOP_MODULE}{$pinName}->dbPortGetDir;
#            print "$pinName $dir\n";
            if ( $dir eq "output" ) {
            my @connList = $PORTS_ALREADY{$TOP_MODULE}{$pinName}->dbPortGetConn;
            my $len = @connList;
            if ($len == 1 ) { $netName = $connList[0]; }
            else { print "ERR-TST : 001 : pin has more than one net connected\n"; }
            my $driverInst = &dbGenTraceGetNetDriver($netName); 
#                      print "\tdriver is $driverInst\n";
                                 if ( exists $COMP_ALREADY{$driverInst} ) {
                     my $driverCellref = $CADB{$driverInst}->dbCadbGetCellref;
                     if ( $PLDB{$driverCellref}->dbMdbGetFunction eq "flop" &&  $PLDB{$driverCellref}->dbMdbGetType == 1 ) {
#                    print "driver is a fanin cone flop\n";
#############################################################################################################
my $row_num = $Row_Hash{$pinName};
my $col_num = $Col_Hash{$driverInst};
my $val = 1;
$GEN{$TOP_MODULE}->dbGenDesignSetTpathVal_new($row_num,$col_num,$val);
#print WRITE "$row_num $col_num $val\n";
#############################################################################################################
                                                                             }# if the driver is a flop
                     else {
#                          print "backward tracing\n";
                           &dbGenReg2RegTraceTPaths($driverInst,1,$pinName);
                          }# if the drivel cell is not a flop
                                                              }
                     elsif ( exists $PORTS_ALREADY{$TOP_MODULE}{$driverInst} ) {
#                     print "driver is a fanin cone port\n";
                                                                               }
                                    }# if pin is a output port
            
                                                              }#foreach

}#sub dbGenTraceReg2OutTPaths


sub dbGenTraceReg2RegTPaths {

foreach $instance ( keys %COMP_ALREADY ) {
        my $cellref = $CADB{$instance}->dbCadbGetCellref;
if ( $PLDB{$cellref}->dbMdbGetFunction eq "flop" && $PLDB{$cellref}->dbMdbGetType == 1 ) { # concerned only about flops now
     print "INFO-TST : 001 : $instance\n";
     my @pins = $PLDB{$cellref}->dbMdbGetPins;
        foreach $pinName ( @pins ) {
                $pinType = $PLDB{$cellref}->dbMdbGetPinType($pinName);
                if ( $PLDB{$cellref}->dbMdbGetPinType($pinName) == 4 ) {
                     my $driverInst = &dbGenTraceGetNetDriver($COMP_ALREADY{$instance}{$pinName}); 
#                      print "\tdriver is $driverInst\n";
                     if ( exists $COMP_ALREADY{$driverInst} ) {
                     my $driverCellref = $CADB{$driverInst}->dbCadbGetCellref;
                     if ( $PLDB{$driverCellref}->dbMdbGetFunction eq "flop" &&  $PLDB{$driverCellref}->dbMdbGetType == 1 ) {
#                    print "driver is a fanin cone flop\n";
#############################################################################################################
my $row_num = $Row_Hash{$instance};
my $col_num = $Col_Hash{$driverInst};
my $val = 1;
$GEN{$TOP_MODULE}->dbGenDesignSetTpathVal_new($row_num,$col_num,$val);
#print WRITE "$row_num $col_num $val\n";
#############################################################################################################
                     
                                                                             }# if the driver is a flop
                     else {
#                          print "backward tracing\n";
                           &dbGenReg2RegTraceTPaths($driverInst,1,$instance);
                          }# if the drivel cell is not a flop
                                                              }
                     elsif ( exists $PORTS_ALREADY{$TOP_MODULE}{$driverInst} ) {
#                     print "driver is a fanin cone port\n";
                                                                               }
                                                                       }# if the pin is the primary register input
                                   }# foreach pin of a register
                                                  }
                                         }# foreach instance in the component list


}#sub dbGenTraceReg2RegTPaths



sub dbGenReg2RegTraceTPaths {
local $instance = $_[0];
local $level = $_[1];
local $traceStartInst = $_[2];
local @TEMP_DRIVER = ();
# print "Finding level $level drivers\n";
local $cellref = $CADB{$instance}->dbCadbGetCellref;
      my @pins = $PLDB{$cellref}->dbMdbGetPins;
        foreach $pinName ( @pins ) {
                $pinType = $PLDB{$cellref}->dbMdbGetPinType($pinName);

                if ( $PLDB{$cellref}->dbMdbGetPinType($pinName) == 0 && $PLDB{$cellref}->dbMdbGetPinDir($pinName) == 0 ) {
                     my $driverInst = &dbGenTraceGetNetDriver($COMP_ALREADY{$instance}{$pinName});
#                     print "\tdriver is $driverInst\n";
                     if ( exists $COMP_ALREADY{$driverInst} ) {
                     my $driverCellref = $CADB{$driverInst}->dbCadbGetCellref;
                     if ( $PLDB{$driverCellref}->dbMdbGetFunction eq "flop" &&  $PLDB{$driverCellref}->dbMdbGetType == 1 ) {
 #                     print "\tdriver is a fanin cone flop $driverInst  $driverCellref\n";
#################################################################################################################
my $row_num = $Row_Hash{$traceStartInst};
my $col_num = $Col_Hash{$driverInst};
my $val = 1;
$GEN{$TOP_MODULE}->dbGenDesignSetTpathVal_new($row_num,$col_num,$val);
#print WRITE "$row_num $col_num $val\n";
#############################################################################################################
                                                                             }# if the driver is a flop
                     else {
                 #    print "\tdriver is a fanin cone combi\n";
                     push(@TEMP_DRIVER,$driverInst);
                          }# if the drivel cell is not a flop
                                                              }
                     elsif ( exists $PORTS_ALREADY{$TOP_MODULE}{$driverInst} ) {
#                      print "\tdriver is a fanin cone port\n";
#################################################################################################################
my $row_num = $Row_Hash{$traceStartInst};
my $col_num = $Col_Hash{$driverInst};
my $val = 1;
$GEN{$TOP_MODULE}->dbGenDesignSetTpathVal_new($row_num,$col_num,$val);
#print WRITE "$row_num $col_num $val\n";
#############################################################################################################
                                                                               }
                                                                       }# if the pin is the input of cominational cell
                                   }# foreach pin of a cell
$level++;
foreach ( @TEMP_DRIVER ) {
        #print "\t$driver\n";
        $driver = pop(@TEMP_DRIVER);
        &dbGenReg2RegTraceTPaths($driver,$level,$traceStartInst);
                                 }#


}#dbGenReg2RegTraceTPaths


















sub dbGenTraceGetNetDriver {
my $netName = $_[0];
my $driverInst ="UND";
   if ( exists $NETS_ALREADY{$netName} ) {
        foreach my $instance ( keys %{$NETS_ALREADY{$netName}} ) {
                if ( exists $COMP_ALREADY{$instance} ) {
                my $pinName = $NETS_ALREADY{$netName}{$instance};
#                print "$instance $pinName\n";
                my $cellref = $CADB{$instance}->dbCadbGetCellref;
                my $pinType = $PLDB{$cellref}->dbMdbGetPinType($pinName);
                my $pinDir  = $PLDB{$cellref}->dbMdbGetPinDir($pinName);
                my $cellType = $PLDB{$cellref}->dbMdbGetType;
#                print " $pinType $pinDir $cellType\n";
                if ( $pinType == 9 && $cellType == 1 ) { $driverInst = $instance; }
                elsif ( $pinType == 0 && $cellType == 0 && $pinDir == 1 ) {$driverInst = $instance; }
                else { }
                                                       }# if the instance connected is a component
                elsif ( $instance eq "PIN" ) {
                my $portName = $NETS_ALREADY{$netName}{$instance};
                $driverInst = $portName;
                                             }# if connects to a port
                else { print "WARN-TST : 001 : connecting instance is unknown type\n"; }
                                                              }# for each instance connected to net
                                         }# if net exits in the databse 
return($driverInst);
}# sub dbGenTraceGetNetDriver

1;
