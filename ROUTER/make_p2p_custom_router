
sub routeP2P_inpair {
my $noOfArg = @_;
my ($netNames, $layers, $netWidth) = ("", "", "");

 if($noOfArg < 2 || $_[0] eq "-h" || $_[0] eq "-help" || $_[0] eq "-HELP"){
    print "Usage:  route_p2p -nets \{<net1, net2 ......>\}\n";
    print "                  -layers <M1, M2 ........>\n";
    print "                  -width <pinWidth >\n";
 }else{
    for(my $i=0; $i<$noOfArg; $i++){
        if ($_[$i] eq "-nets"){$netNames = $_[$i+1];
                               $netNames =~ s/\{//; $netNames =~ s/\}//;
                              }
        if ($_[$i] eq "-layers"){$layers = $_[$i+1];}
        if ($_[$i] eq "-width"){$netWidth = $_[$i+1];}
    }

my @nets = split(/\,/,$netNames);
#print "\nMSG-CRT:001 routing @nets using point-to-point custom router\n";
print "\nMSG-RTR : 001 : routing @nets using point-to-point custom router\n";
#----- Algorithm --------#
# first we will find the nearest rects to connect, and see if the rects are parallel and can be routed in pair (almost bus like ) with some jog near the pin access
# find the driver and sink pin rectanges, and iterate to find the nearest one, one which gives the smallest wirelength
#--- processing the first net in the pair ---#
print "DBG-RTR : 002 : getting driver and sink pins of the net $nets[0]\n" if ($DEBUG == 1000);

my @driverSide = &getNetDriver($nets[0]);
print "INFO-RTR : 003 : driver : @driverSide\n";

if ( exists $CADB{$driverSide[0]} ) {
my @driverBox = $CADB{$driverSide[0]}->dbCadbGetbBox;
my @driverLoc = $CADB{$driverSide[0]}->dbCadbGetLoc;
print "INFO-RTR : 004 : $driverSide[0] @driverBox @driverLoc\n";
#my @driverRects = dbGetInstTermRects(@driverSide);
                                    }

my @sinkSide = &getNetSink($nets[0]);
print "INFO-RTR : 005 : sink : @sinkSide\n";
if ( exists $CADB{$sinkSide[0]} ) {
my @sinkBox = $CADB{$sinkSide[0]}->dbCadbGetbBox;
my @sinkLoc = $CADB{$sinkSide[0]}->dbCadbGetLoc;
print "INFO-RTR : 006 : $sinkSide[0] @sinkBox @sinkLoc\n";
#my @sinkRects = dbGetInstTermRects(@sinkSide);
                                    }





}
}#sub routeP2P_inpair

1;
